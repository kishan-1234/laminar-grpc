import defaultOptions from '../defaultOptions';
import { DataType, FilterOperatorName } from '../enums';
import { isEmpty } from './CommonUtils';
import { getValueByColumn } from './DataUtils';
export var getRowEditableCells = function (rowKeyValue, editableCells) {
    return editableCells.filter(function (c) { return c.rowKeyValue === rowKeyValue; });
};
export var searchData = function (columns, data, searchText, search) {
    return columns.reduce(function (initialData, c) {
        var filterFunction = function (item) {
            var searchContent = search && search({ column: c, searchText: searchText, rowData: item });
            if (searchContent != null) {
                return searchContent;
            }
            if (initialData.indexOf(item) >= 0) {
                return false;
            }
            var columnValue = getValueByColumn(item, c);
            if (columnValue == null) {
                return false;
            }
            return columnValue.toString().toLowerCase().includes(searchText.toLowerCase());
        };
        return initialData.concat(data.filter(filterFunction));
    }, []);
};
export var filterData = function (data, columns) {
    return columns.reduce(function (initialData, column) {
        if (isEmpty(column.filterRowValue)
            && column.filterRowOperator !== FilterOperatorName.IsEmpty
            && column.filterRowOperator !== FilterOperatorName.IsNotEmpty) {
            return initialData;
        }
        var filterRowOperator = column.filterRowOperator
            || getDefaultOperatorForType(column.dataType || defaultOptions.columnDataType);
        var filterOperator = predefinedFilterOperators.find(function (fo) { return filterRowOperator === fo.name; });
        if (!filterOperator) {
            throw new Error("'" + column.filterRowOperator + "' has not found in predefinedFilterOperators array, available operators: " + predefinedFilterOperators.map(function (o) { return o.name; }).join(', '));
        }
        var compare = filterOperator.compare;
        return initialData.filter(function (d) {
            var fieldValue = getValueByColumn(d, column);
            var conditionValue = column.filterRowValue;
            if (column.dataType === DataType.Date) {
                fieldValue = fieldValue == null ? fieldValue : new Date(fieldValue).setHours(0, 0, 0, 0);
                conditionValue = conditionValue == null ? conditionValue : new Date(conditionValue).setHours(0, 0, 0, 0);
            }
            return compare(fieldValue, conditionValue);
        });
    }, data);
};
export var getDefaultOperatorForType = function (type) {
    var filterOperator = predefinedFilterOperators.find(function (o) { return o.defaultForTypes && o.defaultForTypes.includes(type); });
    return (filterOperator && filterOperator.name) || '=';
};
export var predefinedFilterOperators = [{
        compare: function (fieldValue, conditionValue) {
            return fieldValue === conditionValue;
        },
        defaultForTypes: [DataType.Boolean, DataType.Number, DataType.Date],
        name: FilterOperatorName.Equal,
    }, {
        compare: function (fieldValue, conditionValue) {
            return fieldValue > conditionValue;
        },
        name: FilterOperatorName.MoreThan,
    }, {
        compare: function (fieldValue, conditionValue) {
            return fieldValue < conditionValue;
        },
        name: FilterOperatorName.LessThan,
    }, {
        compare: function (fieldValue, conditionValue) {
            return fieldValue >= conditionValue;
        },
        name: FilterOperatorName.MoreThanOrEqual,
    }, {
        compare: function (fieldValue, conditionValue) {
            return fieldValue <= conditionValue;
        },
        name: FilterOperatorName.LessThanOrEqual,
    }, {
        compare: function (fieldValue, conditionValue) {
            return fieldValue != null && fieldValue.toString().toLowerCase().includes(conditionValue.toString().toLowerCase());
        },
        defaultForTypes: [DataType.String],
        name: FilterOperatorName.Contains,
    }, {
        compare: function (fieldValue) {
            return isEmpty(fieldValue);
        },
        name: FilterOperatorName.IsEmpty,
    }, {
        compare: function (fieldValue) {
            return !isEmpty(fieldValue);
        },
        name: FilterOperatorName.IsNotEmpty,
    }];