var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import defaultOptions from '../defaultOptions';
import { SortDirection } from '../enums';
export var getSortedColumns = function (columns, columnKey) {
    var index = columns.findIndex(function (c) { return c.key === columnKey; });
    var newColumns = __spreadArrays(columns);
    newColumns.forEach(function (c, newColumnIndex) {
        if (index === newColumnIndex) {
            newColumns[index] = getColumnWithUpdatedSortDirection(newColumns[index]);
        }
        else if (c.sortDirection) {
            newColumns[newColumnIndex] = __assign({}, c);
            newColumns[newColumnIndex].sortDirection = undefined;
        }
    });
    return newColumns;
};
export var getColumnWithUpdatedSortDirection = function (column) {
    var newColumn = __assign({}, column);
    newColumn.sortDirection = getNextSortDirection(newColumn.sortDirection);
    return newColumn;
};
var getNextSortDirection = function (previousSortdirection) {
    var nextSortDirection;
    if (previousSortdirection) {
        nextSortDirection = previousSortdirection === SortDirection.Ascend
            ? SortDirection.Descend : SortDirection.Ascend;
    }
    else {
        nextSortDirection = defaultOptions.columnSortDirection;
    }
    return nextSortDirection;
};