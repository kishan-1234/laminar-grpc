var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useCallback, useEffect, useState } from 'react';
import { closeEditor, updateEditorValue } from '../../actionCreators';
import { ActionType, EditingMode } from '../../enums';
import { replaceValue } from '../../Utils/DataUtils';
import { addEscEnterKeyEffect } from '../../Utils/EffectUtils';
import { getValidationValue } from '../../Utils/Validation';
import CellEditorValidation from '../CellEditorValidation/CellEditorValidation';
var CellEditorState = function (props) {
    var column = props.column, dispatch = props.dispatch, editingMode = props.editingMode, rowData = props.rowData, rowKeyValue = props.rowKeyValue, validation = props.validation, value = props.value;
    var validationMessage = props.validationMessage;
    var _a = useState(rowData), rowDataState = _a[0], changeRowData = _a[1];
    var _b = useState(value), editorValueState = _b[0], changeEditorValue = _b[1];
    var isCellEditingMode = editingMode === EditingMode.Cell;
    validationMessage = isCellEditingMode || validationMessage
        ? getValidationValue(editorValueState, rowDataState, column, validation) || ''
        : validationMessage;
    var onValueStateChange = function (action) {
        var newRowValue = replaceValue(rowData, column, action.value);
        changeRowData(newRowValue);
        changeEditorValue(action.value);
    };
    var close = useCallback(function () {
        dispatch(closeEditor(rowKeyValue, column.key));
    }, [dispatch, column, rowKeyValue]);
    var closeHandler = useCallback(function () {
        if (!isCellEditingMode || !validationMessage) {
            if (editorValueState !== value) {
                dispatch(updateEditorValue(rowKeyValue, column.key, editorValueState));
            }
            if (isCellEditingMode) {
                close();
            }
        }
    }, [validationMessage, dispatch, close, column, editorValueState, rowKeyValue, value, isCellEditingMode]);
    useEffect(function () {
        return addEscEnterKeyEffect(close, closeHandler);
    }, [close, closeHandler]);
    var dispatchHandler = function (action) {
        if (action.type === ActionType.CloseEditor) {
            closeHandler();
        }
        else if (action.type === ActionType.UpdateCellValue) {
            onValueStateChange(action);
        }
        else {
            dispatch(action);
        }
    };
    var stateProps = __assign(__assign({}, props), {
        dispatch: dispatchHandler,
        value: editorValueState,
        editorValue: editorValueState,
        rowData: rowDataState,
        validationMessage: validationMessage || undefined
    });
    return (React.createElement(CellEditorValidation, __assign({}, stateProps)));
};
export default CellEditorState;