var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import defaultOptions from '../../defaultOptions';
import { headCellDispatchWrapper } from '../../Utils/CellResizeUtils';
import { getElementCustomization } from '../../Utils/ComponentUtils';
import { isSortingEnabled } from '../../Utils/SortUtils';
import HeadCellContent from '../HeadCellContent/HeadCellContent';
import HeadCellResize from '../HeadCellResize/HeadCellResize';
var HeadCell = function (props) {
    var childComponents = props.childComponents, _a = props.column, style = _a.style, isResizable = _a.isResizable, dispatch = props.dispatch, sortingMode = props.sortingMode;
    var _b = React.useState(style ? style.width : undefined), width = _b[0], setWidth = _b[1];
    var stateStyle = __assign(__assign({}, style), { width: width });
    var headCellDispatch = headCellDispatchWrapper(setWidth, dispatch);
    var _c = getElementCustomization({
        className: defaultOptions.css.theadCell + " " + (isSortingEnabled(sortingMode) ? 'ka-pointer' : ''),
        style: stateStyle,
        scope: 'col'
    }, props, childComponents.headCell), elementAttributes = _c.elementAttributes, content = _c.content;
    return (React.createElement("th", __assign({}, elementAttributes),
        React.createElement("div", { className: defaultOptions.css.theadCellWrapper },
            React.createElement("div", { className: defaultOptions.css.theadCellContentWrapper }, content || React.createElement(HeadCellContent, __assign({}, props))),
            isResizable && (React.createElement(HeadCellResize, __assign({}, props, { currentWidth: width, dispatch: headCellDispatch }))))));
};
export default HeadCell;