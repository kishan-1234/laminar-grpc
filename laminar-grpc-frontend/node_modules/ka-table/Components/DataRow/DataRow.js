var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { reorderRows } from '../../actionCreators';
import defaultOptions from '../../defaultOptions';
import { addElementAttributes, getElementCustomization } from '../../Utils/ComponentUtils';
import { getDraggableProps } from '../../Utils/PropsUtils';
import DataRowContent from '../DataRowContent/DataRowContent';
import EmptyCells from '../EmptyCells/EmptyCells';
var DataRow = function (props) {
    var dispatch = props.dispatch, groupColumnsCount = props.groupColumnsCount, isSelectedRow = props.isSelectedRow, rowKeyValue = props.rowKeyValue, rowReordering = props.rowReordering, trRef = props.trRef;
    var dataRow = props.childComponents.dataRow;
    if (rowReordering) {
        var reorderedRowProps = getDraggableProps(rowKeyValue, dispatch, reorderRows, defaultOptions.css.draggedRow, defaultOptions.css.dragOverRow);
        dataRow = addElementAttributes(reorderedRowProps, props, dataRow);
    }
    var _a = getElementCustomization({
        className: defaultOptions.css.row + " " + (isSelectedRow ? defaultOptions.css.rowSelected : '')
    }, props, dataRow), elementAttributes = _a.elementAttributes, content = _a.content;
    return (React.createElement("tr", __assign({}, elementAttributes, { ref: trRef }),
        React.createElement(EmptyCells, { count: groupColumnsCount }),
        content
            ? React.createElement("td", { className: defaultOptions.css.cell }, content)
            : React.createElement(DataRowContent, __assign({}, props))));
};
export default DataRow;