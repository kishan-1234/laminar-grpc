var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { openEditor } from '../../actionCreators';
import defaultOptions from '../../defaultOptions';
import { EditingMode } from '../../enums';
import { isEmpty } from '../../Utils/CommonUtils';
import { getElementCustomization } from '../../Utils/ComponentUtils';
var CellText = function (props) {
    var childComponents = props.childComponents, column = props.column, format = props.format, dispatch = props.dispatch, editingMode = props.editingMode, rowKeyValue = props.rowKeyValue, value = props.value;
    var formatedValue = format && format({ column: column, value: value });
    formatedValue = formatedValue || (!isEmpty(value) && value.toString());
    var _a = getElementCustomization({
        className: defaultOptions.css.cellText,
        onClick: function () {
            if (editingMode === EditingMode.Cell) {
                dispatch(openEditor(rowKeyValue, column.key));
            }
        },
    }, props, childComponents.cellText), elementAttributes = _a.elementAttributes, content = _a.content;
    return (React.createElement("div", __assign({}, elementAttributes), content || formatedValue || React.createElement(React.Fragment, null, "\u00A0")));
};
export default CellText;