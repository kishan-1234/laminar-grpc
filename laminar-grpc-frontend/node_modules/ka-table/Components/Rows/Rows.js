import React, { useEffect, useRef } from 'react';
import { newRowId } from '../../const';
import { getValueByField } from '../../Utils/DataUtils';
import { getRowEditableCells } from '../../Utils/FilterUtils';
import { getGroupMark, getGroupText } from '../../Utils/GroupUtils';
import DataAndDetailsRows from '../DataAndDetailsRows/DataAndDetailsRows';
import GroupRow from '../GroupRow/GroupRow';
import NewRow from '../NewRow/NewRow';
var Rows = function (props) {
    var childComponents = props.childComponents, columns = props.columns, data = props.data, _a = props.detailsRows, detailsRows = _a === void 0 ? [] : _a, dispatch = props.dispatch, editableCells = props.editableCells, format = props.format, groupColumnsCount = props.groupColumnsCount, groupedColumns = props.groupedColumns, _b = props.groups, groups = _b === void 0 ? [] : _b, _c = props.groupsExpanded, groupsExpanded = _c === void 0 ? [] : _c, onFirstRowRendered = props.onFirstRowRendered, rowKeyField = props.rowKeyField, rowReordering = props.rowReordering, selectedRows = props.selectedRows, validation = props.validation;
    var groupMark = getGroupMark();
    var firstRowRef = useRef(null);
    useEffect(function () {
        onFirstRowRendered(firstRowRef);
    }, [firstRowRef, onFirstRowRendered]);
    var rowRefLink = firstRowRef;
    var newRowEditableCells = editableCells && editableCells.filter(function (c) { return c.rowKeyValue === newRowId; });
    return (React.createElement(React.Fragment, null,
        newRowEditableCells && !!newRowEditableCells.length && (React.createElement(NewRow, { childComponents: childComponents, columns: columns, dispatch: dispatch, editableCells: newRowEditableCells, format: format, groupColumnsCount: groupColumnsCount, rowKeyField: rowKeyField, validation: validation })),
        data.map(function (d) {
            if (d.groupMark === groupMark) {
                var groupIndex = d.key.length - 1;
                var group_1 = groups && groups[groupIndex];
                var column = group_1 && groupedColumns.find(function (c) { return c.key === group_1.columnKey; });
                return (React.createElement(GroupRow, { childComponents: childComponents, column: column, contentColSpan: columns.length - groupIndex + groups.length, dispatch: dispatch, groupIndex: groupIndex, groupKey: d.key, isExpanded: groupsExpanded.some(function (ge) { return JSON.stringify(ge) === JSON.stringify(d.key); }), text: getGroupText(d.value, column), key: d.key }));
            }
            else {
                var rowKeyValue_1 = getValueByField(d, rowKeyField);
                var isSelectedRow = selectedRows.some(function (s) { return s === rowKeyValue_1; });
                var isDetailsRowShown = detailsRows.some(function (r) { return r === rowKeyValue_1; });
                var rowEditableCells = getRowEditableCells(rowKeyValue_1, editableCells);
                var dataRow = (React.createElement(DataAndDetailsRows, { childComponents: props.childComponents, columns: props.columns, dispatch: dispatch, editableCells: props.editableCells, editingMode: props.editingMode, format: format, groupColumnsCount: props.groupColumnsCount, isDetailsRowShown: isDetailsRowShown, isSelectedRow: isSelectedRow, key: rowKeyValue_1, rowData: d, rowEditableCells: rowEditableCells, rowKeyField: props.rowKeyField, rowKeyValue: rowKeyValue_1, rowReordering: rowReordering, selectedRows: props.selectedRows, trRef: rowRefLink, validation: validation }));
                rowRefLink = undefined;
                return dataRow;
            }
        })));
};
export default Rows;