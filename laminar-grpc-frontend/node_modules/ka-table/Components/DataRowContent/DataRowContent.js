import React from 'react';
import { getEditableCell } from '../../Utils/CellUtils';
import { getField } from '../../Utils/ColumnUtils';
import { getValueByColumn } from '../../Utils/DataUtils';
import CellComponent from '../CellComponent/CellComponent';
var DataRowContent = function (_a) {
    var childComponents = _a.childComponents, columns = _a.columns, dispatch = _a.dispatch, editingMode = _a.editingMode, format = _a.format, isDetailsRowShown = _a.isDetailsRowShown, isSelectedRow = _a.isSelectedRow, rowData = _a.rowData, rowEditableCells = _a.rowEditableCells, rowKeyField = _a.rowKeyField, rowKeyValue = _a.rowKeyValue, selectedRows = _a.selectedRows, validation = _a.validation;
    return (React.createElement(React.Fragment, null, columns.map(function (column) {
        var editableCell = getEditableCell(column, rowEditableCells);
        var hasEditorValue = editableCell && editableCell.hasOwnProperty('editorValue');
        var editorValue = editableCell && editableCell.editorValue;
        var value = hasEditorValue ? editorValue : getValueByColumn(rowData, column);
        return (React.createElement(CellComponent, { childComponents: childComponents, column: column, dispatch: dispatch, editingMode: editingMode, editorValue: editorValue, field: getField(column), format: format, hasEditorValue: editableCell && editableCell.hasOwnProperty('editorValue'), isDetailsRowShown: isDetailsRowShown, isEditableCell: !!editableCell, isSelectedRow: isSelectedRow, key: column.key, rowData: rowData, rowKeyField: rowKeyField, rowKeyValue: rowKeyValue, selectedRows: selectedRows, validation: validation, validationMessage: editableCell && editableCell.validationMessage, value: value }));
    })));
};
export default DataRowContent;