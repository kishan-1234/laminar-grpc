var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import defaultOptions from '../../defaultOptions';
import { EditingMode, FilteringMode, SortingMode } from '../../enums';
import { wrapDispatch } from '../../Utils/ActionUtils';
import { getElementCustomization } from '../../Utils/ComponentUtils';
import { getExpandedGroups } from '../../Utils/GroupUtils';
import { prepareTableOptions } from '../../Utils/PropsUtils';
import Loading from '../Loading/Loading';
import Paging from '../Paging/Paging';
import TableBody from '../TableBody/TableBody';
import { TableHead } from '../TableHead/TableHead';
export var Table = function (props) {
    var _a = props.data, data = _a === void 0 ? [] : _a, _b = props.childComponents, childComponents = _b === void 0 ? {} : _b, _c = props.editableCells, editableCells = _c === void 0 ? [] : _c, _d = props.editingMode, editingMode = _d === void 0 ? EditingMode.None : _d, _e = props.filteringMode, filteringMode = _e === void 0 ? FilteringMode.None : _e, _f = props.rowReordering, rowReordering = _f === void 0 ? false : _f, groups = props.groups, loading = props.loading, paging = props.paging, _g = props.selectedRows, selectedRows = _g === void 0 ? [] : _g, _h = props.sortingMode, sortingMode = _h === void 0 ? SortingMode.None : _h;
    var groupsExpanded = props.groupsExpanded;
    var preparedOptions = prepareTableOptions(props);
    if (groups && !groupsExpanded) {
        groupsExpanded = getExpandedGroups(preparedOptions.groupedData);
    }
    var theadRef = React.useRef(null);
    var dispatch = wrapDispatch(__assign({}, props), theadRef);
    var areAllRowsSelected = data.length === selectedRows.length;
    var isLoadingActive = loading && loading.enabled;
    var kaCss = isLoadingActive ? 'ka ka-loading-active' : 'ka';
    var _j = getElementCustomization({
        className: kaCss,
    }, __assign(__assign({}, props), { dispatch: dispatch }), childComponents.rootDiv), rootDivElementAttributes = _j.elementAttributes, rootDivContent = _j.content;
    var _k = getElementCustomization({
        className: defaultOptions.css.table,
    }, __assign(__assign({}, props), { dispatch: dispatch }), childComponents.table), elementAttributes = _k.elementAttributes, content = _k.content;
    return (React.createElement("div", __assign({}, rootDivElementAttributes),
        rootDivContent || content ||
            (React.createElement("table", __assign({}, elementAttributes),
                React.createElement(TableHead, { areAllRowsSelected: areAllRowsSelected, childComponents: childComponents, columns: preparedOptions.columns, dispatch: dispatch, filteringMode: filteringMode, groupColumnsCount: preparedOptions.groupColumnsCount, sortingMode: sortingMode, theadRef: theadRef }),
                React.createElement(TableBody, __assign({}, props, { childComponents: childComponents, columns: preparedOptions.columns, data: preparedOptions.groupedData, dispatch: dispatch, editableCells: editableCells, editingMode: editingMode, groupColumnsCount: preparedOptions.groupColumnsCount, groupedColumns: preparedOptions.groupedColumns, groupsExpanded: groupsExpanded, rowReordering: rowReordering, selectedRows: selectedRows })))),
        React.createElement(Paging, __assign({}, paging, { dispatch: dispatch, childComponents: childComponents, pagesCount: preparedOptions.pagesCount })),
        React.createElement(Loading, __assign({}, loading))));
};