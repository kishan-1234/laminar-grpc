{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { closeEditor, updateEditorValue } from '../../actionCreators';\nimport { ActionType, EditingMode } from '../../enums';\nimport { replaceValue } from '../../Utils/DataUtils';\nimport { addEscEnterKeyEffect } from '../../Utils/EffectUtils';\nimport { getValidationValue } from '../../Utils/Validation';\nimport CellEditorValidation from '../CellEditorValidation/CellEditorValidation';\n\nvar CellEditorState = function (props) {\n  var column = props.column,\n      dispatch = props.dispatch,\n      editingMode = props.editingMode,\n      rowData = props.rowData,\n      rowKeyValue = props.rowKeyValue,\n      validation = props.validation,\n      value = props.value;\n  var validationMessage = props.validationMessage;\n\n  var _a = useState(rowData),\n      rowDataState = _a[0],\n      changeRowData = _a[1];\n\n  var _b = useState(value),\n      editorValueState = _b[0],\n      changeEditorValue = _b[1];\n\n  var isCellEditingMode = editingMode === EditingMode.Cell;\n  validationMessage = isCellEditingMode || validationMessage ? getValidationValue(editorValueState, rowDataState, column, validation) || '' : validationMessage;\n\n  var onValueStateChange = function (action) {\n    var newRowValue = replaceValue(rowData, column, action.value);\n    changeRowData(newRowValue);\n    changeEditorValue(action.value);\n  };\n\n  var close = useCallback(function () {\n    dispatch(closeEditor(rowKeyValue, column.key));\n  }, [dispatch, column, rowKeyValue]);\n  var closeHandler = useCallback(function () {\n    if (!isCellEditingMode || !validationMessage) {\n      if (editorValueState !== value) {\n        dispatch(updateEditorValue(rowKeyValue, column.key, editorValueState));\n      }\n\n      if (isCellEditingMode) {\n        close();\n      }\n    }\n  }, [validationMessage, dispatch, close, column, editorValueState, rowKeyValue, value, isCellEditingMode]);\n  useEffect(function () {\n    return addEscEnterKeyEffect(close, closeHandler);\n  }, [close, closeHandler]);\n\n  var dispatchHandler = function (action) {\n    if (action.type === ActionType.CloseEditor) {\n      closeHandler();\n    } else if (action.type === ActionType.UpdateCellValue) {\n      onValueStateChange(action);\n    } else {\n      dispatch(action);\n    }\n  };\n\n  var stateProps = __assign(__assign({}, props), {\n    dispatch: dispatchHandler,\n    value: editorValueState,\n    editorValue: editorValueState,\n    rowData: rowDataState,\n    validationMessage: validationMessage || undefined\n  });\n\n  return React.createElement(CellEditorValidation, __assign({}, stateProps));\n};\n\nexport default CellEditorState;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/ka-table/Components/CellEditorState/CellEditorState.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useCallback","useEffect","useState","closeEditor","updateEditorValue","ActionType","EditingMode","replaceValue","addEscEnterKeyEffect","getValidationValue","CellEditorValidation","CellEditorState","props","column","dispatch","editingMode","rowData","rowKeyValue","validation","value","validationMessage","_a","rowDataState","changeRowData","_b","editorValueState","changeEditorValue","isCellEditingMode","Cell","onValueStateChange","action","newRowValue","close","key","closeHandler","dispatchHandler","type","CloseEditor","UpdateCellValue","stateProps","editorValue","undefined","createElement"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { closeEditor, updateEditorValue } from '../../actionCreators';\nimport { ActionType, EditingMode } from '../../enums';\nimport { replaceValue } from '../../Utils/DataUtils';\nimport { addEscEnterKeyEffect } from '../../Utils/EffectUtils';\nimport { getValidationValue } from '../../Utils/Validation';\nimport CellEditorValidation from '../CellEditorValidation/CellEditorValidation';\nvar CellEditorState = function (props) {\n    var column = props.column, dispatch = props.dispatch, editingMode = props.editingMode, rowData = props.rowData, rowKeyValue = props.rowKeyValue, validation = props.validation, value = props.value;\n    var validationMessage = props.validationMessage;\n    var _a = useState(rowData), rowDataState = _a[0], changeRowData = _a[1];\n    var _b = useState(value), editorValueState = _b[0], changeEditorValue = _b[1];\n    var isCellEditingMode = editingMode === EditingMode.Cell;\n    validationMessage = isCellEditingMode || validationMessage\n        ? getValidationValue(editorValueState, rowDataState, column, validation) || ''\n        : validationMessage;\n    var onValueStateChange = function (action) {\n        var newRowValue = replaceValue(rowData, column, action.value);\n        changeRowData(newRowValue);\n        changeEditorValue(action.value);\n    };\n    var close = useCallback(function () {\n        dispatch(closeEditor(rowKeyValue, column.key));\n    }, [dispatch, column, rowKeyValue]);\n    var closeHandler = useCallback(function () {\n        if (!isCellEditingMode || !validationMessage) {\n            if (editorValueState !== value) {\n                dispatch(updateEditorValue(rowKeyValue, column.key, editorValueState));\n            }\n            if (isCellEditingMode) {\n                close();\n            }\n        }\n    }, [validationMessage, dispatch, close, column, editorValueState, rowKeyValue, value, isCellEditingMode]);\n    useEffect(function () {\n        return addEscEnterKeyEffect(close, closeHandler);\n    }, [close, closeHandler]);\n    var dispatchHandler = function (action) {\n        if (action.type === ActionType.CloseEditor) {\n            closeHandler();\n        }\n        else if (action.type === ActionType.UpdateCellValue) {\n            onValueStateChange(action);\n        }\n        else {\n            dispatch(action);\n        }\n    };\n    var stateProps = __assign(__assign({}, props), {\n        dispatch: dispatchHandler,\n        value: editorValueState,\n        editorValue: editorValueState,\n        rowData: rowDataState,\n        validationMessage: validationMessage || undefined\n    });\n    return (React.createElement(CellEditorValidation, __assign({}, stateProps)));\n};\nexport default CellEditorState;"]},"metadata":{},"sourceType":"module"}