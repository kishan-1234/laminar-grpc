{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayModernRecord = require('../store/RelayModernRecord');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('../store/RelayRecordState'),\n    EXISTENT = _require.EXISTENT;\n/**\n * @internal\n *\n * Wrapper API that is an amalgam of the `RelayModernRecord` API and\n * `MutableRecordSource` interface, implementing copy-on-write semantics for records\n * in a record source.\n *\n * Modifications are applied to fresh copies of records:\n * - Records in `base` are never modified.\n * - Modifications cause a fresh version of a record to be created in `sink`.\n *   These sink records contain only modified fields.\n */\n\n\nvar RelayRecordSourceMutator = /*#__PURE__*/function () {\n  function RelayRecordSourceMutator(base, sink) {\n    this.__sources = [sink, base];\n    this._base = base;\n    this._sink = sink;\n  }\n  /**\n   * **UNSTABLE**\n   * This method is likely to be removed in an upcoming release\n   * and should not be relied upon.\n   * TODO T41593196: Remove unstable_getRawRecordWithChanges\n   */\n\n\n  var _proto = RelayRecordSourceMutator.prototype;\n\n  _proto.unstable_getRawRecordWithChanges = function unstable_getRawRecordWithChanges(dataID) {\n    var baseRecord = this._base.get(dataID);\n\n    var sinkRecord = this._sink.get(dataID);\n\n    if (sinkRecord === undefined) {\n      if (baseRecord == null) {\n        return baseRecord;\n      }\n\n      var nextRecord = RelayModernRecord.clone(baseRecord);\n\n      if (process.env.NODE_ENV !== \"production\") {\n        // Prevent mutation of a record from outside the store.\n        RelayModernRecord.freeze(nextRecord);\n      }\n\n      return nextRecord;\n    } else if (sinkRecord === null) {\n      return null;\n    } else if (baseRecord != null) {\n      var _nextRecord = RelayModernRecord.update(baseRecord, sinkRecord);\n\n      if (process.env.NODE_ENV !== \"production\") {\n        if (_nextRecord !== baseRecord) {\n          // Prevent mutation of a record from outside the store.\n          RelayModernRecord.freeze(_nextRecord);\n        }\n      }\n\n      return _nextRecord;\n    } else {\n      var _nextRecord2 = RelayModernRecord.clone(sinkRecord);\n\n      if (process.env.NODE_ENV !== \"production\") {\n        // Prevent mutation of a record from outside the store.\n        RelayModernRecord.freeze(_nextRecord2);\n      }\n\n      return _nextRecord2;\n    }\n  };\n\n  _proto._getSinkRecord = function _getSinkRecord(dataID) {\n    var sinkRecord = this._sink.get(dataID);\n\n    if (!sinkRecord) {\n      var baseRecord = this._base.get(dataID);\n\n      !baseRecord ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceMutator: Cannot modify non-existent record `%s`.', dataID) : invariant(false) : void 0;\n      sinkRecord = RelayModernRecord.create(dataID, RelayModernRecord.getType(baseRecord));\n\n      this._sink.set(dataID, sinkRecord);\n    }\n\n    return sinkRecord;\n  };\n\n  _proto.copyFields = function copyFields(sourceID, sinkID) {\n    var sinkSource = this._sink.get(sourceID);\n\n    var baseSource = this._base.get(sourceID);\n\n    !(sinkSource || baseSource) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceMutator#copyFields(): Cannot copy fields from ' + 'non-existent record `%s`.', sourceID) : invariant(false) : void 0;\n\n    var sink = this._getSinkRecord(sinkID);\n\n    if (baseSource) {\n      RelayModernRecord.copyFields(baseSource, sink);\n    }\n\n    if (sinkSource) {\n      RelayModernRecord.copyFields(sinkSource, sink);\n    }\n  };\n\n  _proto.copyFieldsFromRecord = function copyFieldsFromRecord(record, sinkID) {\n    var sink = this._getSinkRecord(sinkID);\n\n    RelayModernRecord.copyFields(record, sink);\n  };\n\n  _proto.create = function create(dataID, typeName) {\n    !(this._base.getStatus(dataID) !== EXISTENT && this._sink.getStatus(dataID) !== EXISTENT) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceMutator#create(): Cannot create a record with id ' + '`%s`, this record already exists.', dataID) : invariant(false) : void 0;\n    var record = RelayModernRecord.create(dataID, typeName);\n\n    this._sink.set(dataID, record);\n  };\n\n  _proto[\"delete\"] = function _delete(dataID) {\n    this._sink[\"delete\"](dataID);\n  };\n\n  _proto.getStatus = function getStatus(dataID) {\n    return this._sink.has(dataID) ? this._sink.getStatus(dataID) : this._base.getStatus(dataID);\n  };\n\n  _proto.getType = function getType(dataID) {\n    for (var ii = 0; ii < this.__sources.length; ii++) {\n      var record = this.__sources[ii].get(dataID);\n\n      if (record) {\n        return RelayModernRecord.getType(record);\n      } else if (record === null) {\n        return null;\n      }\n    }\n  };\n\n  _proto.getValue = function getValue(dataID, storageKey) {\n    for (var ii = 0; ii < this.__sources.length; ii++) {\n      var record = this.__sources[ii].get(dataID);\n\n      if (record) {\n        var value = RelayModernRecord.getValue(record, storageKey);\n\n        if (value !== undefined) {\n          return value;\n        }\n      } else if (record === null) {\n        return null;\n      }\n    }\n  };\n\n  _proto.setValue = function setValue(dataID, storageKey, value) {\n    var sinkRecord = this._getSinkRecord(dataID);\n\n    RelayModernRecord.setValue(sinkRecord, storageKey, value);\n  };\n\n  _proto.getLinkedRecordID = function getLinkedRecordID(dataID, storageKey) {\n    for (var ii = 0; ii < this.__sources.length; ii++) {\n      var record = this.__sources[ii].get(dataID);\n\n      if (record) {\n        var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n        if (linkedID !== undefined) {\n          return linkedID;\n        }\n      } else if (record === null) {\n        return null;\n      }\n    }\n  };\n\n  _proto.setLinkedRecordID = function setLinkedRecordID(dataID, storageKey, linkedID) {\n    var sinkRecord = this._getSinkRecord(dataID);\n\n    RelayModernRecord.setLinkedRecordID(sinkRecord, storageKey, linkedID);\n  };\n\n  _proto.getLinkedRecordIDs = function getLinkedRecordIDs(dataID, storageKey) {\n    for (var ii = 0; ii < this.__sources.length; ii++) {\n      var record = this.__sources[ii].get(dataID);\n\n      if (record) {\n        var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n\n        if (linkedIDs !== undefined) {\n          return linkedIDs;\n        }\n      } else if (record === null) {\n        return null;\n      }\n    }\n  };\n\n  _proto.setLinkedRecordIDs = function setLinkedRecordIDs(dataID, storageKey, linkedIDs) {\n    var sinkRecord = this._getSinkRecord(dataID);\n\n    RelayModernRecord.setLinkedRecordIDs(sinkRecord, storageKey, linkedIDs);\n  };\n\n  return RelayRecordSourceMutator;\n}();\n\nmodule.exports = RelayRecordSourceMutator;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/relay-runtime/lib/mutations/RelayRecordSourceMutator.js"],"names":["RelayModernRecord","require","invariant","_require","EXISTENT","RelayRecordSourceMutator","base","sink","__sources","_base","_sink","_proto","prototype","unstable_getRawRecordWithChanges","dataID","baseRecord","get","sinkRecord","undefined","nextRecord","clone","process","env","NODE_ENV","freeze","_nextRecord","update","_nextRecord2","_getSinkRecord","create","getType","set","copyFields","sourceID","sinkID","sinkSource","baseSource","copyFieldsFromRecord","record","typeName","getStatus","_delete","has","ii","length","getValue","storageKey","value","setValue","getLinkedRecordID","linkedID","setLinkedRecordID","getLinkedRecordIDs","linkedIDs","setLinkedRecordIDs","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayModernRecord = require('../store/RelayModernRecord');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('../store/RelayRecordState'),\n    EXISTENT = _require.EXISTENT;\n\n/**\n * @internal\n *\n * Wrapper API that is an amalgam of the `RelayModernRecord` API and\n * `MutableRecordSource` interface, implementing copy-on-write semantics for records\n * in a record source.\n *\n * Modifications are applied to fresh copies of records:\n * - Records in `base` are never modified.\n * - Modifications cause a fresh version of a record to be created in `sink`.\n *   These sink records contain only modified fields.\n */\nvar RelayRecordSourceMutator = /*#__PURE__*/function () {\n  function RelayRecordSourceMutator(base, sink) {\n    this.__sources = [sink, base];\n    this._base = base;\n    this._sink = sink;\n  }\n  /**\n   * **UNSTABLE**\n   * This method is likely to be removed in an upcoming release\n   * and should not be relied upon.\n   * TODO T41593196: Remove unstable_getRawRecordWithChanges\n   */\n\n\n  var _proto = RelayRecordSourceMutator.prototype;\n\n  _proto.unstable_getRawRecordWithChanges = function unstable_getRawRecordWithChanges(dataID) {\n    var baseRecord = this._base.get(dataID);\n\n    var sinkRecord = this._sink.get(dataID);\n\n    if (sinkRecord === undefined) {\n      if (baseRecord == null) {\n        return baseRecord;\n      }\n\n      var nextRecord = RelayModernRecord.clone(baseRecord);\n\n      if (process.env.NODE_ENV !== \"production\") {\n        // Prevent mutation of a record from outside the store.\n        RelayModernRecord.freeze(nextRecord);\n      }\n\n      return nextRecord;\n    } else if (sinkRecord === null) {\n      return null;\n    } else if (baseRecord != null) {\n      var _nextRecord = RelayModernRecord.update(baseRecord, sinkRecord);\n\n      if (process.env.NODE_ENV !== \"production\") {\n        if (_nextRecord !== baseRecord) {\n          // Prevent mutation of a record from outside the store.\n          RelayModernRecord.freeze(_nextRecord);\n        }\n      }\n\n      return _nextRecord;\n    } else {\n      var _nextRecord2 = RelayModernRecord.clone(sinkRecord);\n\n      if (process.env.NODE_ENV !== \"production\") {\n        // Prevent mutation of a record from outside the store.\n        RelayModernRecord.freeze(_nextRecord2);\n      }\n\n      return _nextRecord2;\n    }\n  };\n\n  _proto._getSinkRecord = function _getSinkRecord(dataID) {\n    var sinkRecord = this._sink.get(dataID);\n\n    if (!sinkRecord) {\n      var baseRecord = this._base.get(dataID);\n\n      !baseRecord ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceMutator: Cannot modify non-existent record `%s`.', dataID) : invariant(false) : void 0;\n      sinkRecord = RelayModernRecord.create(dataID, RelayModernRecord.getType(baseRecord));\n\n      this._sink.set(dataID, sinkRecord);\n    }\n\n    return sinkRecord;\n  };\n\n  _proto.copyFields = function copyFields(sourceID, sinkID) {\n    var sinkSource = this._sink.get(sourceID);\n\n    var baseSource = this._base.get(sourceID);\n\n    !(sinkSource || baseSource) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceMutator#copyFields(): Cannot copy fields from ' + 'non-existent record `%s`.', sourceID) : invariant(false) : void 0;\n\n    var sink = this._getSinkRecord(sinkID);\n\n    if (baseSource) {\n      RelayModernRecord.copyFields(baseSource, sink);\n    }\n\n    if (sinkSource) {\n      RelayModernRecord.copyFields(sinkSource, sink);\n    }\n  };\n\n  _proto.copyFieldsFromRecord = function copyFieldsFromRecord(record, sinkID) {\n    var sink = this._getSinkRecord(sinkID);\n\n    RelayModernRecord.copyFields(record, sink);\n  };\n\n  _proto.create = function create(dataID, typeName) {\n    !(this._base.getStatus(dataID) !== EXISTENT && this._sink.getStatus(dataID) !== EXISTENT) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceMutator#create(): Cannot create a record with id ' + '`%s`, this record already exists.', dataID) : invariant(false) : void 0;\n    var record = RelayModernRecord.create(dataID, typeName);\n\n    this._sink.set(dataID, record);\n  };\n\n  _proto[\"delete\"] = function _delete(dataID) {\n    this._sink[\"delete\"](dataID);\n  };\n\n  _proto.getStatus = function getStatus(dataID) {\n    return this._sink.has(dataID) ? this._sink.getStatus(dataID) : this._base.getStatus(dataID);\n  };\n\n  _proto.getType = function getType(dataID) {\n    for (var ii = 0; ii < this.__sources.length; ii++) {\n      var record = this.__sources[ii].get(dataID);\n\n      if (record) {\n        return RelayModernRecord.getType(record);\n      } else if (record === null) {\n        return null;\n      }\n    }\n  };\n\n  _proto.getValue = function getValue(dataID, storageKey) {\n    for (var ii = 0; ii < this.__sources.length; ii++) {\n      var record = this.__sources[ii].get(dataID);\n\n      if (record) {\n        var value = RelayModernRecord.getValue(record, storageKey);\n\n        if (value !== undefined) {\n          return value;\n        }\n      } else if (record === null) {\n        return null;\n      }\n    }\n  };\n\n  _proto.setValue = function setValue(dataID, storageKey, value) {\n    var sinkRecord = this._getSinkRecord(dataID);\n\n    RelayModernRecord.setValue(sinkRecord, storageKey, value);\n  };\n\n  _proto.getLinkedRecordID = function getLinkedRecordID(dataID, storageKey) {\n    for (var ii = 0; ii < this.__sources.length; ii++) {\n      var record = this.__sources[ii].get(dataID);\n\n      if (record) {\n        var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n        if (linkedID !== undefined) {\n          return linkedID;\n        }\n      } else if (record === null) {\n        return null;\n      }\n    }\n  };\n\n  _proto.setLinkedRecordID = function setLinkedRecordID(dataID, storageKey, linkedID) {\n    var sinkRecord = this._getSinkRecord(dataID);\n\n    RelayModernRecord.setLinkedRecordID(sinkRecord, storageKey, linkedID);\n  };\n\n  _proto.getLinkedRecordIDs = function getLinkedRecordIDs(dataID, storageKey) {\n    for (var ii = 0; ii < this.__sources.length; ii++) {\n      var record = this.__sources[ii].get(dataID);\n\n      if (record) {\n        var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n\n        if (linkedIDs !== undefined) {\n          return linkedIDs;\n        }\n      } else if (record === null) {\n        return null;\n      }\n    }\n  };\n\n  _proto.setLinkedRecordIDs = function setLinkedRecordIDs(dataID, storageKey, linkedIDs) {\n    var sinkRecord = this._getSinkRecord(dataID);\n\n    RelayModernRecord.setLinkedRecordIDs(sinkRecord, storageKey, linkedIDs);\n  };\n\n  return RelayRecordSourceMutator;\n}();\n\nmodule.exports = RelayRecordSourceMutator;"]},"metadata":{},"sourceType":"script"}