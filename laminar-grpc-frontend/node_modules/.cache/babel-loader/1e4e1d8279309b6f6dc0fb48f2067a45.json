{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @emails oncall+relay\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar stableCopy = require('./stableCopy');\n\nvar _require = require('../store/RelayModernSelector'),\n    getDataIDsFromFragment = _require.getDataIDsFromFragment,\n    getVariablesFromFragment = _require.getVariablesFromFragment,\n    getSelector = _require.getSelector;\n\nfunction getFragmentIdentifier(fragmentNode, fragmentRef) {\n  var _JSON$stringify;\n\n  var selector = getSelector(fragmentNode, fragmentRef);\n  var fragmentOwnerIdentifier = selector == null ? 'null' : selector.kind === 'SingularReaderSelector' ? selector.owner.identifier : '[' + selector.selectors.map(function (sel) {\n    return sel.owner.identifier;\n  }).join(',') + ']';\n  var fragmentVariables = getVariablesFromFragment(fragmentNode, fragmentRef);\n  var dataIDs = getDataIDsFromFragment(fragmentNode, fragmentRef);\n  return fragmentOwnerIdentifier + '/' + fragmentNode.name + '/' + JSON.stringify(stableCopy(fragmentVariables)) + '/' + ((_JSON$stringify = JSON.stringify(dataIDs)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : 'missing');\n}\n\nmodule.exports = getFragmentIdentifier;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/relay-runtime/lib/util/getFragmentIdentifier.js"],"names":["stableCopy","require","_require","getDataIDsFromFragment","getVariablesFromFragment","getSelector","getFragmentIdentifier","fragmentNode","fragmentRef","_JSON$stringify","selector","fragmentOwnerIdentifier","kind","owner","identifier","selectors","map","sel","join","fragmentVariables","dataIDs","name","JSON","stringify","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;AACA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,8BAAD,CAAtB;AAAA,IACIE,sBAAsB,GAAGD,QAAQ,CAACC,sBADtC;AAAA,IAEIC,wBAAwB,GAAGF,QAAQ,CAACE,wBAFxC;AAAA,IAGIC,WAAW,GAAGH,QAAQ,CAACG,WAH3B;;AAKA,SAASC,qBAAT,CAA+BC,YAA/B,EAA6CC,WAA7C,EAA0D;AACxD,MAAIC,eAAJ;;AAEA,MAAIC,QAAQ,GAAGL,WAAW,CAACE,YAAD,EAAeC,WAAf,CAA1B;AACA,MAAIG,uBAAuB,GAAGD,QAAQ,IAAI,IAAZ,GAAmB,MAAnB,GAA4BA,QAAQ,CAACE,IAAT,KAAkB,wBAAlB,GAA6CF,QAAQ,CAACG,KAAT,CAAeC,UAA5D,GAAyE,MAAMJ,QAAQ,CAACK,SAAT,CAAmBC,GAAnB,CAAuB,UAAUC,GAAV,EAAe;AAC7K,WAAOA,GAAG,CAACJ,KAAJ,CAAUC,UAAjB;AACD,GAFwI,EAEtII,IAFsI,CAEjI,GAFiI,CAAN,GAEpH,GAFf;AAGA,MAAIC,iBAAiB,GAAGf,wBAAwB,CAACG,YAAD,EAAeC,WAAf,CAAhD;AACA,MAAIY,OAAO,GAAGjB,sBAAsB,CAACI,YAAD,EAAeC,WAAf,CAApC;AACA,SAAOG,uBAAuB,GAAG,GAA1B,GAAgCJ,YAAY,CAACc,IAA7C,GAAoD,GAApD,GAA0DC,IAAI,CAACC,SAAL,CAAevB,UAAU,CAACmB,iBAAD,CAAzB,CAA1D,GAA0G,GAA1G,IAAiH,CAACV,eAAe,GAAGa,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAnB,MAAgD,IAAhD,IAAwDX,eAAe,KAAK,KAAK,CAAjF,GAAqFA,eAArF,GAAuG,SAAxN,CAAP;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiBnB,qBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @emails oncall+relay\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar stableCopy = require('./stableCopy');\n\nvar _require = require('../store/RelayModernSelector'),\n    getDataIDsFromFragment = _require.getDataIDsFromFragment,\n    getVariablesFromFragment = _require.getVariablesFromFragment,\n    getSelector = _require.getSelector;\n\nfunction getFragmentIdentifier(fragmentNode, fragmentRef) {\n  var _JSON$stringify;\n\n  var selector = getSelector(fragmentNode, fragmentRef);\n  var fragmentOwnerIdentifier = selector == null ? 'null' : selector.kind === 'SingularReaderSelector' ? selector.owner.identifier : '[' + selector.selectors.map(function (sel) {\n    return sel.owner.identifier;\n  }).join(',') + ']';\n  var fragmentVariables = getVariablesFromFragment(fragmentNode, fragmentRef);\n  var dataIDs = getDataIDsFromFragment(fragmentNode, fragmentRef);\n  return fragmentOwnerIdentifier + '/' + fragmentNode.name + '/' + JSON.stringify(stableCopy(fragmentVariables)) + '/' + ((_JSON$stringify = JSON.stringify(dataIDs)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : 'missing');\n}\n\nmodule.exports = getFragmentIdentifier;"]},"metadata":{},"sourceType":"script"}