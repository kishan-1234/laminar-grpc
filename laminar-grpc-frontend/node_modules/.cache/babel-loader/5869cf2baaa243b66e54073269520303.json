{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('../store/RelayStoreUtils'),\n    getStorageKey = _require.getStorageKey,\n    ROOT_TYPE = _require.ROOT_TYPE;\n/**\n * @internal\n *\n * A subclass of RecordSourceProxy that provides convenience methods for\n * accessing the root fields of a given query/mutation. These fields accept\n * complex arguments and it can be tedious to re-construct the correct sets of\n * arguments to pass to e.g. `getRoot().getLinkedRecord()`.\n */\n\n\nvar RelayRecordSourceSelectorProxy = /*#__PURE__*/function () {\n  function RelayRecordSourceSelectorProxy(mutator, recordSource, readSelector) {\n    this.__mutator = mutator;\n    this.__recordSource = recordSource;\n    this._readSelector = readSelector;\n  }\n\n  var _proto = RelayRecordSourceSelectorProxy.prototype;\n\n  _proto.create = function create(dataID, typeName) {\n    return this.__recordSource.create(dataID, typeName);\n  };\n\n  _proto[\"delete\"] = function _delete(dataID) {\n    this.__recordSource[\"delete\"](dataID);\n  };\n\n  _proto.get = function get(dataID) {\n    return this.__recordSource.get(dataID);\n  };\n\n  _proto.getRoot = function getRoot() {\n    return this.__recordSource.getRoot();\n  };\n\n  _proto.getOperationRoot = function getOperationRoot() {\n    var root = this.__recordSource.get(this._readSelector.dataID);\n\n    if (!root) {\n      root = this.__recordSource.create(this._readSelector.dataID, ROOT_TYPE);\n    }\n\n    return root;\n  };\n\n  _proto._getRootField = function _getRootField(selector, fieldName, plural) {\n    var field = selector.node.selections.find(function (selection) {\n      return selection.kind === 'LinkedField' && selection.name === fieldName;\n    });\n    !(field && field.kind === 'LinkedField') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceSelectorProxy#getRootField(): Cannot find root ' + 'field `%s`, no such field is defined on GraphQL document `%s`.', fieldName, selector.node.name) : invariant(false) : void 0;\n    !(field.plural === plural) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceSelectorProxy#getRootField(): Expected root field ' + '`%s` to be %s.', fieldName, plural ? 'plural' : 'singular') : invariant(false) : void 0;\n    return field;\n  };\n\n  _proto.getRootField = function getRootField(fieldName) {\n    var field = this._getRootField(this._readSelector, fieldName, false);\n\n    var storageKey = getStorageKey(field, this._readSelector.variables);\n    return this.getOperationRoot().getLinkedRecord(storageKey);\n  };\n\n  _proto.getPluralRootField = function getPluralRootField(fieldName) {\n    var field = this._getRootField(this._readSelector, fieldName, true);\n\n    var storageKey = getStorageKey(field, this._readSelector.variables);\n    return this.getOperationRoot().getLinkedRecords(storageKey);\n  };\n\n  _proto.invalidateStore = function invalidateStore() {\n    this.__recordSource.invalidateStore();\n  };\n\n  return RelayRecordSourceSelectorProxy;\n}();\n\nmodule.exports = RelayRecordSourceSelectorProxy;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/relay-runtime/lib/mutations/RelayRecordSourceSelectorProxy.js"],"names":["invariant","require","_require","getStorageKey","ROOT_TYPE","RelayRecordSourceSelectorProxy","mutator","recordSource","readSelector","__mutator","__recordSource","_readSelector","_proto","prototype","create","dataID","typeName","_delete","get","getRoot","getOperationRoot","root","_getRootField","selector","fieldName","plural","field","node","selections","find","selection","kind","name","process","env","NODE_ENV","getRootField","storageKey","variables","getLinkedRecord","getPluralRootField","getLinkedRecords","invalidateStore","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('../store/RelayStoreUtils'),\n    getStorageKey = _require.getStorageKey,\n    ROOT_TYPE = _require.ROOT_TYPE;\n\n/**\n * @internal\n *\n * A subclass of RecordSourceProxy that provides convenience methods for\n * accessing the root fields of a given query/mutation. These fields accept\n * complex arguments and it can be tedious to re-construct the correct sets of\n * arguments to pass to e.g. `getRoot().getLinkedRecord()`.\n */\nvar RelayRecordSourceSelectorProxy = /*#__PURE__*/function () {\n  function RelayRecordSourceSelectorProxy(mutator, recordSource, readSelector) {\n    this.__mutator = mutator;\n    this.__recordSource = recordSource;\n    this._readSelector = readSelector;\n  }\n\n  var _proto = RelayRecordSourceSelectorProxy.prototype;\n\n  _proto.create = function create(dataID, typeName) {\n    return this.__recordSource.create(dataID, typeName);\n  };\n\n  _proto[\"delete\"] = function _delete(dataID) {\n    this.__recordSource[\"delete\"](dataID);\n  };\n\n  _proto.get = function get(dataID) {\n    return this.__recordSource.get(dataID);\n  };\n\n  _proto.getRoot = function getRoot() {\n    return this.__recordSource.getRoot();\n  };\n\n  _proto.getOperationRoot = function getOperationRoot() {\n    var root = this.__recordSource.get(this._readSelector.dataID);\n\n    if (!root) {\n      root = this.__recordSource.create(this._readSelector.dataID, ROOT_TYPE);\n    }\n\n    return root;\n  };\n\n  _proto._getRootField = function _getRootField(selector, fieldName, plural) {\n    var field = selector.node.selections.find(function (selection) {\n      return selection.kind === 'LinkedField' && selection.name === fieldName;\n    });\n    !(field && field.kind === 'LinkedField') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceSelectorProxy#getRootField(): Cannot find root ' + 'field `%s`, no such field is defined on GraphQL document `%s`.', fieldName, selector.node.name) : invariant(false) : void 0;\n    !(field.plural === plural) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceSelectorProxy#getRootField(): Expected root field ' + '`%s` to be %s.', fieldName, plural ? 'plural' : 'singular') : invariant(false) : void 0;\n    return field;\n  };\n\n  _proto.getRootField = function getRootField(fieldName) {\n    var field = this._getRootField(this._readSelector, fieldName, false);\n\n    var storageKey = getStorageKey(field, this._readSelector.variables);\n    return this.getOperationRoot().getLinkedRecord(storageKey);\n  };\n\n  _proto.getPluralRootField = function getPluralRootField(fieldName) {\n    var field = this._getRootField(this._readSelector, fieldName, true);\n\n    var storageKey = getStorageKey(field, this._readSelector.variables);\n    return this.getOperationRoot().getLinkedRecords(storageKey);\n  };\n\n  _proto.invalidateStore = function invalidateStore() {\n    this.__recordSource.invalidateStore();\n  };\n\n  return RelayRecordSourceSelectorProxy;\n}();\n\nmodule.exports = RelayRecordSourceSelectorProxy;"]},"metadata":{},"sourceType":"script"}