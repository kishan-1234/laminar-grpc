{"ast":null,"code":"import React from 'react';\nimport { getEditableCell } from '../../Utils/CellUtils';\nimport { getField } from '../../Utils/ColumnUtils';\nimport { getValueByColumn } from '../../Utils/DataUtils';\nimport CellComponent from '../CellComponent/CellComponent';\n\nvar DataRowContent = function (_a) {\n  var childComponents = _a.childComponents,\n      columns = _a.columns,\n      dispatch = _a.dispatch,\n      editingMode = _a.editingMode,\n      format = _a.format,\n      isDetailsRowShown = _a.isDetailsRowShown,\n      isSelectedRow = _a.isSelectedRow,\n      rowData = _a.rowData,\n      rowEditableCells = _a.rowEditableCells,\n      rowKeyField = _a.rowKeyField,\n      rowKeyValue = _a.rowKeyValue,\n      selectedRows = _a.selectedRows,\n      validation = _a.validation;\n  return React.createElement(React.Fragment, null, columns.map(function (column) {\n    var editableCell = getEditableCell(column, rowEditableCells);\n    var hasEditorValue = editableCell && editableCell.hasOwnProperty('editorValue');\n    var editorValue = editableCell && editableCell.editorValue;\n    var value = hasEditorValue ? editorValue : getValueByColumn(rowData, column);\n    return React.createElement(CellComponent, {\n      childComponents: childComponents,\n      column: column,\n      dispatch: dispatch,\n      editingMode: editingMode,\n      editorValue: editorValue,\n      field: getField(column),\n      format: format,\n      hasEditorValue: editableCell && editableCell.hasOwnProperty('editorValue'),\n      isDetailsRowShown: isDetailsRowShown,\n      isEditableCell: !!editableCell,\n      isSelectedRow: isSelectedRow,\n      key: column.key,\n      rowData: rowData,\n      rowKeyField: rowKeyField,\n      rowKeyValue: rowKeyValue,\n      selectedRows: selectedRows,\n      validation: validation,\n      validationMessage: editableCell && editableCell.validationMessage,\n      value: value\n    });\n  }));\n};\n\nexport default DataRowContent;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/ka-table/Components/DataRowContent/DataRowContent.js"],"names":["React","getEditableCell","getField","getValueByColumn","CellComponent","DataRowContent","_a","childComponents","columns","dispatch","editingMode","format","isDetailsRowShown","isSelectedRow","rowData","rowEditableCells","rowKeyField","rowKeyValue","selectedRows","validation","createElement","Fragment","map","column","editableCell","hasEditorValue","hasOwnProperty","editorValue","value","field","isEditableCell","key","validationMessage"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AACA,IAAIC,cAAc,GAAG,UAAUC,EAAV,EAAc;AAC/B,MAAIC,eAAe,GAAGD,EAAE,CAACC,eAAzB;AAAA,MAA0CC,OAAO,GAAGF,EAAE,CAACE,OAAvD;AAAA,MAAgEC,QAAQ,GAAGH,EAAE,CAACG,QAA9E;AAAA,MAAwFC,WAAW,GAAGJ,EAAE,CAACI,WAAzG;AAAA,MAAsHC,MAAM,GAAGL,EAAE,CAACK,MAAlI;AAAA,MAA0IC,iBAAiB,GAAGN,EAAE,CAACM,iBAAjK;AAAA,MAAoLC,aAAa,GAAGP,EAAE,CAACO,aAAvM;AAAA,MAAsNC,OAAO,GAAGR,EAAE,CAACQ,OAAnO;AAAA,MAA4OC,gBAAgB,GAAGT,EAAE,CAACS,gBAAlQ;AAAA,MAAoRC,WAAW,GAAGV,EAAE,CAACU,WAArS;AAAA,MAAkTC,WAAW,GAAGX,EAAE,CAACW,WAAnU;AAAA,MAAgVC,YAAY,GAAGZ,EAAE,CAACY,YAAlW;AAAA,MAAgXC,UAAU,GAAGb,EAAE,CAACa,UAAhY;AACA,SAAQnB,KAAK,CAACoB,aAAN,CAAoBpB,KAAK,CAACqB,QAA1B,EAAoC,IAApC,EAA0Cb,OAAO,CAACc,GAAR,CAAY,UAAUC,MAAV,EAAkB;AAC5E,QAAIC,YAAY,GAAGvB,eAAe,CAACsB,MAAD,EAASR,gBAAT,CAAlC;AACA,QAAIU,cAAc,GAAGD,YAAY,IAAIA,YAAY,CAACE,cAAb,CAA4B,aAA5B,CAArC;AACA,QAAIC,WAAW,GAAGH,YAAY,IAAIA,YAAY,CAACG,WAA/C;AACA,QAAIC,KAAK,GAAGH,cAAc,GAAGE,WAAH,GAAiBxB,gBAAgB,CAACW,OAAD,EAAUS,MAAV,CAA3D;AACA,WAAQvB,KAAK,CAACoB,aAAN,CAAoBhB,aAApB,EAAmC;AAAEG,MAAAA,eAAe,EAAEA,eAAnB;AAAoCgB,MAAAA,MAAM,EAAEA,MAA5C;AAAoDd,MAAAA,QAAQ,EAAEA,QAA9D;AAAwEC,MAAAA,WAAW,EAAEA,WAArF;AAAkGiB,MAAAA,WAAW,EAAEA,WAA/G;AAA4HE,MAAAA,KAAK,EAAE3B,QAAQ,CAACqB,MAAD,CAA3I;AAAqJZ,MAAAA,MAAM,EAAEA,MAA7J;AAAqKc,MAAAA,cAAc,EAAED,YAAY,IAAIA,YAAY,CAACE,cAAb,CAA4B,aAA5B,CAArM;AAAiPd,MAAAA,iBAAiB,EAAEA,iBAApQ;AAAuRkB,MAAAA,cAAc,EAAE,CAAC,CAACN,YAAzS;AAAuTX,MAAAA,aAAa,EAAEA,aAAtU;AAAqVkB,MAAAA,GAAG,EAAER,MAAM,CAACQ,GAAjW;AAAsWjB,MAAAA,OAAO,EAAEA,OAA/W;AAAwXE,MAAAA,WAAW,EAAEA,WAArY;AAAkZC,MAAAA,WAAW,EAAEA,WAA/Z;AAA4aC,MAAAA,YAAY,EAAEA,YAA1b;AAAwcC,MAAAA,UAAU,EAAEA,UAApd;AAAgea,MAAAA,iBAAiB,EAAER,YAAY,IAAIA,YAAY,CAACQ,iBAAhhB;AAAmiBJ,MAAAA,KAAK,EAAEA;AAA1iB,KAAnC,CAAR;AACH,GANiD,CAA1C,CAAR;AAOH,CATD;;AAUA,eAAevB,cAAf","sourcesContent":["import React from 'react';\nimport { getEditableCell } from '../../Utils/CellUtils';\nimport { getField } from '../../Utils/ColumnUtils';\nimport { getValueByColumn } from '../../Utils/DataUtils';\nimport CellComponent from '../CellComponent/CellComponent';\nvar DataRowContent = function (_a) {\n    var childComponents = _a.childComponents, columns = _a.columns, dispatch = _a.dispatch, editingMode = _a.editingMode, format = _a.format, isDetailsRowShown = _a.isDetailsRowShown, isSelectedRow = _a.isSelectedRow, rowData = _a.rowData, rowEditableCells = _a.rowEditableCells, rowKeyField = _a.rowKeyField, rowKeyValue = _a.rowKeyValue, selectedRows = _a.selectedRows, validation = _a.validation;\n    return (React.createElement(React.Fragment, null, columns.map(function (column) {\n        var editableCell = getEditableCell(column, rowEditableCells);\n        var hasEditorValue = editableCell && editableCell.hasOwnProperty('editorValue');\n        var editorValue = editableCell && editableCell.editorValue;\n        var value = hasEditorValue ? editorValue : getValueByColumn(rowData, column);\n        return (React.createElement(CellComponent, { childComponents: childComponents, column: column, dispatch: dispatch, editingMode: editingMode, editorValue: editorValue, field: getField(column), format: format, hasEditorValue: editableCell && editableCell.hasOwnProperty('editorValue'), isDetailsRowShown: isDetailsRowShown, isEditableCell: !!editableCell, isSelectedRow: isSelectedRow, key: column.key, rowData: rowData, rowKeyField: rowKeyField, rowKeyValue: rowKeyValue, selectedRows: selectedRows, validation: validation, validationMessage: editableCell && editableCell.validationMessage, value: value }));\n    })));\n};\nexport default DataRowContent;"]},"metadata":{},"sourceType":"module"}