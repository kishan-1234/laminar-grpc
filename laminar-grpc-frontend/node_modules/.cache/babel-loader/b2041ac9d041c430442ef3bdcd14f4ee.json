{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('./ConvertToExecuteFunction'),\n    convertFetch = _require.convertFetch;\n/**\n * Creates an implementation of the `Network` interface defined in\n * `RelayNetworkTypes` given `fetch` and `subscribe` functions.\n */\n\n\nfunction create(fetchFn, subscribe) {\n  // Convert to functions that returns RelayObservable.\n  var observeFetch = convertFetch(fetchFn);\n\n  function execute(request, variables, cacheConfig, uploadables, logRequestInfo) {\n    if (request.operationKind === 'subscription') {\n      !subscribe ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayNetwork: This network layer does not support Subscriptions. ' + 'To use Subscriptions, provide a custom network layer.') : invariant(false) : void 0;\n      !!uploadables ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayNetwork: Cannot provide uploadables while subscribing.') : invariant(false) : void 0;\n      return subscribe(request, variables, cacheConfig);\n    }\n\n    var pollInterval = cacheConfig.poll;\n\n    if (pollInterval != null) {\n      !!uploadables ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayNetwork: Cannot provide uploadables while polling.') : invariant(false) : void 0;\n      return observeFetch(request, variables, {\n        force: true\n      }).poll(pollInterval);\n    }\n\n    return observeFetch(request, variables, cacheConfig, uploadables, logRequestInfo);\n  }\n\n  return {\n    execute: execute\n  };\n}\n\nmodule.exports = {\n  create: create\n};","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/relay-runtime/lib/network/RelayNetwork.js"],"names":["invariant","require","_require","convertFetch","create","fetchFn","subscribe","observeFetch","execute","request","variables","cacheConfig","uploadables","logRequestInfo","operationKind","process","env","NODE_ENV","pollInterval","poll","force","module","exports"],"mappings":"AAAA;;;;;;;;;AASA;AACA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,4BAAD,CAAtB;AAAA,IACIE,YAAY,GAAGD,QAAQ,CAACC,YAD5B;AAGA;;;;;;AAIA,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,SAAzB,EAAoC;AAClC;AACA,MAAIC,YAAY,GAAGJ,YAAY,CAACE,OAAD,CAA/B;;AAEA,WAASG,OAAT,CAAiBC,OAAjB,EAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,WAAlD,EAA+DC,cAA/D,EAA+E;AAC7E,QAAIJ,OAAO,CAACK,aAAR,KAA0B,cAA9B,EAA8C;AAC5C,OAACR,SAAD,GAAaS,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,SAAS,CAAC,KAAD,EAAQ,sEAAsE,uDAA9E,CAAjD,GAA0LA,SAAS,CAAC,KAAD,CAAhN,GAA0N,KAAK,CAA/N;AACA,OAAC,CAACY,WAAF,GAAgBG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,SAAS,CAAC,KAAD,EAAQ,6DAAR,CAAjD,GAA0HA,SAAS,CAAC,KAAD,CAAnJ,GAA6J,KAAK,CAAlK;AACA,aAAOM,SAAS,CAACG,OAAD,EAAUC,SAAV,EAAqBC,WAArB,CAAhB;AACD;;AAED,QAAIO,YAAY,GAAGP,WAAW,CAACQ,IAA/B;;AAEA,QAAID,YAAY,IAAI,IAApB,EAA0B;AACxB,OAAC,CAACN,WAAF,GAAgBG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,SAAS,CAAC,KAAD,EAAQ,yDAAR,CAAjD,GAAsHA,SAAS,CAAC,KAAD,CAA/I,GAAyJ,KAAK,CAA9J;AACA,aAAOO,YAAY,CAACE,OAAD,EAAUC,SAAV,EAAqB;AACtCU,QAAAA,KAAK,EAAE;AAD+B,OAArB,CAAZ,CAEJD,IAFI,CAECD,YAFD,CAAP;AAGD;;AAED,WAAOX,YAAY,CAACE,OAAD,EAAUC,SAAV,EAAqBC,WAArB,EAAkCC,WAAlC,EAA+CC,cAA/C,CAAnB;AACD;;AAED,SAAO;AACLL,IAAAA,OAAO,EAAEA;AADJ,GAAP;AAGD;;AAEDa,MAAM,CAACC,OAAP,GAAiB;AACflB,EAAAA,MAAM,EAAEA;AADO,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('./ConvertToExecuteFunction'),\n    convertFetch = _require.convertFetch;\n\n/**\n * Creates an implementation of the `Network` interface defined in\n * `RelayNetworkTypes` given `fetch` and `subscribe` functions.\n */\nfunction create(fetchFn, subscribe) {\n  // Convert to functions that returns RelayObservable.\n  var observeFetch = convertFetch(fetchFn);\n\n  function execute(request, variables, cacheConfig, uploadables, logRequestInfo) {\n    if (request.operationKind === 'subscription') {\n      !subscribe ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayNetwork: This network layer does not support Subscriptions. ' + 'To use Subscriptions, provide a custom network layer.') : invariant(false) : void 0;\n      !!uploadables ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayNetwork: Cannot provide uploadables while subscribing.') : invariant(false) : void 0;\n      return subscribe(request, variables, cacheConfig);\n    }\n\n    var pollInterval = cacheConfig.poll;\n\n    if (pollInterval != null) {\n      !!uploadables ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayNetwork: Cannot provide uploadables while polling.') : invariant(false) : void 0;\n      return observeFetch(request, variables, {\n        force: true\n      }).poll(pollInterval);\n    }\n\n    return observeFetch(request, variables, cacheConfig, uploadables, logRequestInfo);\n  }\n\n  return {\n    execute: execute\n  };\n}\n\nmodule.exports = {\n  create: create\n};"]},"metadata":{},"sourceType":"script"}