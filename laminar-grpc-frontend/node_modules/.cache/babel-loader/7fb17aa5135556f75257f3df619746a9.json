{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar CONNECTION_CALLS = {\n  after: true,\n  before: true,\n  find: true,\n  first: true,\n  last: true,\n  surrounds: true\n};\nvar config = {\n  CLIENT_MUTATION_ID: 'clientMutationId',\n  CURSOR: 'cursor',\n  EDGES: 'edges',\n  END_CURSOR: 'endCursor',\n  HAS_NEXT_PAGE: 'hasNextPage',\n  HAS_PREV_PAGE: 'hasPreviousPage',\n  NODE: 'node',\n  PAGE_INFO_TYPE: 'PageInfo',\n  PAGE_INFO: 'pageInfo',\n  START_CURSOR: 'startCursor'\n};\n/**\n * @internal\n *\n * Defines logic relevant to the informal \"Connection\" GraphQL interface.\n */\n\nvar ConnectionInterface = {\n  inject: function inject(newConfig) {\n    config = newConfig;\n  },\n  get: function get() {\n    return config;\n  },\n\n  /**\n   * Checks whether a call exists strictly to encode which parts of a connection\n   * to fetch. Fields that only differ by connection call values should have the\n   * same identity.\n   */\n  isConnectionCall: function isConnectionCall(call) {\n    return CONNECTION_CALLS.hasOwnProperty(call.name);\n  }\n};\nmodule.exports = ConnectionInterface;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js"],"names":["CONNECTION_CALLS","after","before","find","first","last","surrounds","config","CLIENT_MUTATION_ID","CURSOR","EDGES","END_CURSOR","HAS_NEXT_PAGE","HAS_PREV_PAGE","NODE","PAGE_INFO_TYPE","PAGE_INFO","START_CURSOR","ConnectionInterface","inject","newConfig","get","isConnectionCall","call","hasOwnProperty","name","module","exports"],"mappings":"AAAA;;;;;;;;;AASA;AACA;;AAEA,IAAIA,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,IADc;AAErBC,EAAAA,MAAM,EAAE,IAFa;AAGrBC,EAAAA,IAAI,EAAE,IAHe;AAIrBC,EAAAA,KAAK,EAAE,IAJc;AAKrBC,EAAAA,IAAI,EAAE,IALe;AAMrBC,EAAAA,SAAS,EAAE;AANU,CAAvB;AAQA,IAAIC,MAAM,GAAG;AACXC,EAAAA,kBAAkB,EAAE,kBADT;AAEXC,EAAAA,MAAM,EAAE,QAFG;AAGXC,EAAAA,KAAK,EAAE,OAHI;AAIXC,EAAAA,UAAU,EAAE,WAJD;AAKXC,EAAAA,aAAa,EAAE,aALJ;AAMXC,EAAAA,aAAa,EAAE,iBANJ;AAOXC,EAAAA,IAAI,EAAE,MAPK;AAQXC,EAAAA,cAAc,EAAE,UARL;AASXC,EAAAA,SAAS,EAAE,UATA;AAUXC,EAAAA,YAAY,EAAE;AAVH,CAAb;AAYA;;;;;;AAMA,IAAIC,mBAAmB,GAAG;AACxBC,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,SAAhB,EAA2B;AACjCb,IAAAA,MAAM,GAAGa,SAAT;AACD,GAHuB;AAIxBC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOd,MAAP;AACD,GANuB;;AAQxB;;;;;AAKAe,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AAChD,WAAOvB,gBAAgB,CAACwB,cAAjB,CAAgCD,IAAI,CAACE,IAArC,CAAP;AACD;AAfuB,CAA1B;AAiBAC,MAAM,CAACC,OAAP,GAAiBT,mBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar CONNECTION_CALLS = {\n  after: true,\n  before: true,\n  find: true,\n  first: true,\n  last: true,\n  surrounds: true\n};\nvar config = {\n  CLIENT_MUTATION_ID: 'clientMutationId',\n  CURSOR: 'cursor',\n  EDGES: 'edges',\n  END_CURSOR: 'endCursor',\n  HAS_NEXT_PAGE: 'hasNextPage',\n  HAS_PREV_PAGE: 'hasPreviousPage',\n  NODE: 'node',\n  PAGE_INFO_TYPE: 'PageInfo',\n  PAGE_INFO: 'pageInfo',\n  START_CURSOR: 'startCursor'\n};\n/**\n * @internal\n *\n * Defines logic relevant to the informal \"Connection\" GraphQL interface.\n */\n\nvar ConnectionInterface = {\n  inject: function inject(newConfig) {\n    config = newConfig;\n  },\n  get: function get() {\n    return config;\n  },\n\n  /**\n   * Checks whether a call exists strictly to encode which parts of a connection\n   * to fetch. Fields that only differ by connection call values should have the\n   * same identity.\n   */\n  isConnectionCall: function isConnectionCall(call) {\n    return CONNECTION_CALLS.hasOwnProperty(call.name);\n  }\n};\nmodule.exports = ConnectionInterface;"]},"metadata":{},"sourceType":"script"}