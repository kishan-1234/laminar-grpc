{"ast":null,"code":"import defaultOptions from '../defaultOptions';\nimport { DataType, FilterOperatorName } from '../enums';\nimport { isEmpty } from './CommonUtils';\nimport { getValueByColumn } from './DataUtils';\nexport var getRowEditableCells = function (rowKeyValue, editableCells) {\n  return editableCells.filter(function (c) {\n    return c.rowKeyValue === rowKeyValue;\n  });\n};\nexport var searchData = function (columns, data, searchText, search) {\n  return columns.reduce(function (initialData, c) {\n    var filterFunction = function (item) {\n      var searchContent = search && search({\n        column: c,\n        searchText: searchText,\n        rowData: item\n      });\n\n      if (searchContent != null) {\n        return searchContent;\n      }\n\n      if (initialData.indexOf(item) >= 0) {\n        return false;\n      }\n\n      var columnValue = getValueByColumn(item, c);\n\n      if (columnValue == null) {\n        return false;\n      }\n\n      return columnValue.toString().toLowerCase().includes(searchText.toLowerCase());\n    };\n\n    return initialData.concat(data.filter(filterFunction));\n  }, []);\n};\nexport var filterData = function (data, columns) {\n  return columns.reduce(function (initialData, column) {\n    if (isEmpty(column.filterRowValue) && column.filterRowOperator !== FilterOperatorName.IsEmpty && column.filterRowOperator !== FilterOperatorName.IsNotEmpty) {\n      return initialData;\n    }\n\n    var filterRowOperator = column.filterRowOperator || getDefaultOperatorForType(column.dataType || defaultOptions.columnDataType);\n    var filterOperator = predefinedFilterOperators.find(function (fo) {\n      return filterRowOperator === fo.name;\n    });\n\n    if (!filterOperator) {\n      throw new Error(\"'\" + column.filterRowOperator + \"' has not found in predefinedFilterOperators array, available operators: \" + predefinedFilterOperators.map(function (o) {\n        return o.name;\n      }).join(', '));\n    }\n\n    var compare = filterOperator.compare;\n    return initialData.filter(function (d) {\n      var fieldValue = getValueByColumn(d, column);\n      var conditionValue = column.filterRowValue;\n\n      if (column.dataType === DataType.Date) {\n        fieldValue = fieldValue == null ? fieldValue : new Date(fieldValue).setHours(0, 0, 0, 0);\n        conditionValue = conditionValue == null ? conditionValue : new Date(conditionValue).setHours(0, 0, 0, 0);\n      }\n\n      return compare(fieldValue, conditionValue);\n    });\n  }, data);\n};\nexport var getDefaultOperatorForType = function (type) {\n  var filterOperator = predefinedFilterOperators.find(function (o) {\n    return o.defaultForTypes && o.defaultForTypes.includes(type);\n  });\n  return filterOperator && filterOperator.name || '=';\n};\nexport var predefinedFilterOperators = [{\n  compare: function (fieldValue, conditionValue) {\n    return fieldValue === conditionValue;\n  },\n  defaultForTypes: [DataType.Boolean, DataType.Number, DataType.Date],\n  name: FilterOperatorName.Equal\n}, {\n  compare: function (fieldValue, conditionValue) {\n    return fieldValue > conditionValue;\n  },\n  name: FilterOperatorName.MoreThan\n}, {\n  compare: function (fieldValue, conditionValue) {\n    return fieldValue < conditionValue;\n  },\n  name: FilterOperatorName.LessThan\n}, {\n  compare: function (fieldValue, conditionValue) {\n    return fieldValue >= conditionValue;\n  },\n  name: FilterOperatorName.MoreThanOrEqual\n}, {\n  compare: function (fieldValue, conditionValue) {\n    return fieldValue <= conditionValue;\n  },\n  name: FilterOperatorName.LessThanOrEqual\n}, {\n  compare: function (fieldValue, conditionValue) {\n    return fieldValue != null && fieldValue.toString().toLowerCase().includes(conditionValue.toString().toLowerCase());\n  },\n  defaultForTypes: [DataType.String],\n  name: FilterOperatorName.Contains\n}, {\n  compare: function (fieldValue) {\n    return isEmpty(fieldValue);\n  },\n  name: FilterOperatorName.IsEmpty\n}, {\n  compare: function (fieldValue) {\n    return !isEmpty(fieldValue);\n  },\n  name: FilterOperatorName.IsNotEmpty\n}];","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/ka-table/Utils/FilterUtils.js"],"names":["defaultOptions","DataType","FilterOperatorName","isEmpty","getValueByColumn","getRowEditableCells","rowKeyValue","editableCells","filter","c","searchData","columns","data","searchText","search","reduce","initialData","filterFunction","item","searchContent","column","rowData","indexOf","columnValue","toString","toLowerCase","includes","concat","filterData","filterRowValue","filterRowOperator","IsEmpty","IsNotEmpty","getDefaultOperatorForType","dataType","columnDataType","filterOperator","predefinedFilterOperators","find","fo","name","Error","map","o","join","compare","d","fieldValue","conditionValue","Date","setHours","type","defaultForTypes","Boolean","Number","Equal","MoreThan","LessThan","MoreThanOrEqual","LessThanOrEqual","String","Contains"],"mappings":"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","sourcesContent":["import defaultOptions from '../defaultOptions';\nimport { DataType, FilterOperatorName } from '../enums';\nimport { isEmpty } from './CommonUtils';\nimport { getValueByColumn } from './DataUtils';\nexport var getRowEditableCells = function (rowKeyValue, editableCells) {\n    return editableCells.filter(function (c) { return c.rowKeyValue === rowKeyValue; });\n};\nexport var searchData = function (columns, data, searchText, search) {\n    return columns.reduce(function (initialData, c) {\n        var filterFunction = function (item) {\n            var searchContent = search && search({ column: c, searchText: searchText, rowData: item });\n            if (searchContent != null) {\n                return searchContent;\n            }\n            if (initialData.indexOf(item) >= 0) {\n                return false;\n            }\n            var columnValue = getValueByColumn(item, c);\n            if (columnValue == null) {\n                return false;\n            }\n            return columnValue.toString().toLowerCase().includes(searchText.toLowerCase());\n        };\n        return initialData.concat(data.filter(filterFunction));\n    }, []);\n};\nexport var filterData = function (data, columns) {\n    return columns.reduce(function (initialData, column) {\n        if (isEmpty(column.filterRowValue)\n            && column.filterRowOperator !== FilterOperatorName.IsEmpty\n            && column.filterRowOperator !== FilterOperatorName.IsNotEmpty) {\n            return initialData;\n        }\n        var filterRowOperator = column.filterRowOperator\n            || getDefaultOperatorForType(column.dataType || defaultOptions.columnDataType);\n        var filterOperator = predefinedFilterOperators.find(function (fo) { return filterRowOperator === fo.name; });\n        if (!filterOperator) {\n            throw new Error(\"'\" + column.filterRowOperator + \"' has not found in predefinedFilterOperators array, available operators: \" + predefinedFilterOperators.map(function (o) { return o.name; }).join(', '));\n        }\n        var compare = filterOperator.compare;\n        return initialData.filter(function (d) {\n            var fieldValue = getValueByColumn(d, column);\n            var conditionValue = column.filterRowValue;\n            if (column.dataType === DataType.Date) {\n                fieldValue = fieldValue == null ? fieldValue : new Date(fieldValue).setHours(0, 0, 0, 0);\n                conditionValue = conditionValue == null ? conditionValue : new Date(conditionValue).setHours(0, 0, 0, 0);\n            }\n            return compare(fieldValue, conditionValue);\n        });\n    }, data);\n};\nexport var getDefaultOperatorForType = function (type) {\n    var filterOperator = predefinedFilterOperators.find(function (o) { return o.defaultForTypes && o.defaultForTypes.includes(type); });\n    return (filterOperator && filterOperator.name) || '=';\n};\nexport var predefinedFilterOperators = [{\n        compare: function (fieldValue, conditionValue) {\n            return fieldValue === conditionValue;\n        },\n        defaultForTypes: [DataType.Boolean, DataType.Number, DataType.Date],\n        name: FilterOperatorName.Equal,\n    }, {\n        compare: function (fieldValue, conditionValue) {\n            return fieldValue > conditionValue;\n        },\n        name: FilterOperatorName.MoreThan,\n    }, {\n        compare: function (fieldValue, conditionValue) {\n            return fieldValue < conditionValue;\n        },\n        name: FilterOperatorName.LessThan,\n    }, {\n        compare: function (fieldValue, conditionValue) {\n            return fieldValue >= conditionValue;\n        },\n        name: FilterOperatorName.MoreThanOrEqual,\n    }, {\n        compare: function (fieldValue, conditionValue) {\n            return fieldValue <= conditionValue;\n        },\n        name: FilterOperatorName.LessThanOrEqual,\n    }, {\n        compare: function (fieldValue, conditionValue) {\n            return fieldValue != null && fieldValue.toString().toLowerCase().includes(conditionValue.toString().toLowerCase());\n        },\n        defaultForTypes: [DataType.String],\n        name: FilterOperatorName.Contains,\n    }, {\n        compare: function (fieldValue) {\n            return isEmpty(fieldValue);\n        },\n        name: FilterOperatorName.IsEmpty,\n    }, {\n        compare: function (fieldValue) {\n            return !isEmpty(fieldValue);\n        },\n        name: FilterOperatorName.IsNotEmpty,\n    }];"]},"metadata":{},"sourceType":"module"}