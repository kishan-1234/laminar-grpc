{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('./RelayConcreteVariables'),\n    getFragmentVariables = _require.getFragmentVariables;\n\nvar _require2 = require('./RelayStoreUtils'),\n    FRAGMENT_OWNER_KEY = _require2.FRAGMENT_OWNER_KEY,\n    FRAGMENTS_KEY = _require2.FRAGMENTS_KEY,\n    ID_KEY = _require2.ID_KEY,\n    IS_WITHIN_UNMATCHED_TYPE_REFINEMENT = _require2.IS_WITHIN_UNMATCHED_TYPE_REFINEMENT;\n/**\n * @public\n *\n * Given the result `item` from a parent that fetched `fragment`, creates a\n * selector that can be used to read the results of that fragment for that item.\n *\n * Example:\n *\n * Given two fragments as follows:\n *\n * ```\n * fragment Parent on User {\n *   id\n *   ...Child\n * }\n * fragment Child on User {\n *   name\n * }\n * ```\n *\n * And given some object `parent` that is the results of `Parent` for id \"4\",\n * the results of `Child` can be accessed by first getting a selector and then\n * using that selector to `lookup()` the results against the environment:\n *\n * ```\n * const childSelector = getSingularSelector(queryVariables, Child, parent);\n * const childData = environment.lookup(childSelector).data;\n * ```\n */\n\n\nfunction getSingularSelector(fragment, item) {\n  !(typeof item === 'object' && item !== null && !Array.isArray(item)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : invariant(false) : void 0;\n  var dataID = item[ID_KEY];\n  var fragments = item[FRAGMENTS_KEY];\n  var mixedOwner = item[FRAGMENT_OWNER_KEY];\n  var isWithinUnmatchedTypeRefinement = item[IS_WITHIN_UNMATCHED_TYPE_REFINEMENT] === true;\n\n  if (typeof dataID === 'string' && typeof fragments === 'object' && fragments !== null && typeof fragments[fragment.name] === 'object' && fragments[fragment.name] !== null && typeof mixedOwner === 'object' && mixedOwner !== null) {\n    var owner = mixedOwner;\n    var argumentVariables = fragments[fragment.name];\n    var fragmentVariables = getFragmentVariables(fragment, owner.variables, argumentVariables);\n    return createReaderSelector(fragment, dataID, fragmentVariables, owner, isWithinUnmatchedTypeRefinement);\n  }\n\n  if (process.env.NODE_ENV !== \"production\") {\n    var stringifiedItem = JSON.stringify(item);\n\n    if (stringifiedItem.length > 499) {\n      stringifiedItem = stringifiedItem.substr(0, 498) + \"\\u2026\";\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`.', fragment.name, stringifiedItem, fragment.name) : void 0;\n  }\n\n  return null;\n}\n/**\n * @public\n *\n * Given the result `items` from a parent that fetched `fragment`, creates a\n * selector that can be used to read the results of that fragment on those\n * items. This is similar to `getSingularSelector` but for \"plural\" fragments that\n * expect an array of results and therefore return an array of selectors.\n */\n\n\nfunction getPluralSelector(fragment, items) {\n  var selectors = null;\n  items.forEach(function (item, ii) {\n    var selector = item != null ? getSingularSelector(fragment, item) : null;\n\n    if (selector != null) {\n      selectors = selectors || [];\n      selectors.push(selector);\n    }\n  });\n\n  if (selectors == null) {\n    return null;\n  } else {\n    return {\n      kind: 'PluralReaderSelector',\n      selectors: selectors\n    };\n  }\n}\n\nfunction getSelector(fragment, item) {\n  if (item == null) {\n    return item;\n  } else if (fragment.metadata && fragment.metadata.plural === true) {\n    !Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getPluralSelector(fragment, item);\n  } else {\n    !!Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getSingularSelector(fragment, item);\n  }\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts the selectors for those fragments from the results.\n *\n * The canonical use-case for this function is ReactRelayFragmentContainer, which\n * uses this function to convert (props, fragments) into selectors so that it\n * can read the results to pass to the inner component.\n */\n\n\nfunction getSelectorsFromObject(fragments, object) {\n  var selectors = {};\n\n  for (var _key in fragments) {\n    if (fragments.hasOwnProperty(_key)) {\n      var fragment = fragments[_key];\n      var item = object[_key];\n      selectors[_key] = getSelector(fragment, item);\n    }\n  }\n\n  return selectors;\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts a mapping of keys -> id(s) of the results.\n *\n * Similar to `getSelectorsFromObject()`, this function can be useful in\n * determining the \"identity\" of the props passed to a component.\n */\n\n\nfunction getDataIDsFromObject(fragments, object) {\n  var ids = {};\n\n  for (var _key2 in fragments) {\n    if (fragments.hasOwnProperty(_key2)) {\n      var fragment = fragments[_key2];\n      var item = object[_key2];\n      ids[_key2] = getDataIDsFromFragment(fragment, item);\n    }\n  }\n\n  return ids;\n}\n\nfunction getDataIDsFromFragment(fragment, item) {\n  if (item == null) {\n    return item;\n  } else if (fragment.metadata && fragment.metadata.plural === true) {\n    !Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getDataIDs(fragment, item);\n  } else {\n    !!Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getDataID(fragment, item);\n  }\n}\n/**\n * @internal\n */\n\n\nfunction getDataIDs(fragment, items) {\n  var ids = null;\n  items.forEach(function (item) {\n    var id = item != null ? getDataID(fragment, item) : null;\n\n    if (id != null) {\n      ids = ids || [];\n      ids.push(id);\n    }\n  });\n  return ids;\n}\n/**\n * @internal\n */\n\n\nfunction getDataID(fragment, item) {\n  !(typeof item === 'object' && item !== null && !Array.isArray(item)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : invariant(false) : void 0;\n  var dataID = item[ID_KEY];\n\n  if (typeof dataID === 'string') {\n    return dataID;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`, or `null` is passed as the fragment ' + \"reference for `%s` if it's conditonally included and the condition isn't met.\", fragment.name, JSON.stringify(item), fragment.name, fragment.name) : void 0;\n  return null;\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts the merged variables that would be in scope for those\n * fragments/results.\n *\n * This can be useful in determing what varaibles were used to fetch the data\n * for a Relay container, for example.\n */\n\n\nfunction getVariablesFromObject(fragments, object) {\n  var variables = {};\n\n  for (var _key3 in fragments) {\n    if (fragments.hasOwnProperty(_key3)) {\n      var fragment = fragments[_key3];\n      var item = object[_key3];\n      var itemVariables = getVariablesFromFragment(fragment, item);\n      Object.assign(variables, itemVariables);\n    }\n  }\n\n  return variables;\n}\n\nfunction getVariablesFromFragment(fragment, item) {\n  var _fragment$metadata;\n\n  if (item == null) {\n    return {};\n  } else if (((_fragment$metadata = fragment.metadata) === null || _fragment$metadata === void 0 ? void 0 : _fragment$metadata.plural) === true) {\n    !Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getVariablesFromPluralFragment(fragment, item);\n  } else {\n    !!Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getVariablesFromSingularFragment(fragment, item) || {};\n  }\n}\n\nfunction getVariablesFromSingularFragment(fragment, item) {\n  var selector = getSingularSelector(fragment, item);\n\n  if (!selector) {\n    return null;\n  }\n\n  return selector.variables;\n}\n\nfunction getVariablesFromPluralFragment(fragment, items) {\n  var variables = {};\n  items.forEach(function (value, ii) {\n    if (value != null) {\n      var itemVariables = getVariablesFromSingularFragment(fragment, value);\n\n      if (itemVariables != null) {\n        Object.assign(variables, itemVariables);\n      }\n    }\n  });\n  return variables;\n}\n/**\n * @public\n *\n * Determine if two selectors are equal (represent the same selection). Note\n * that this function returns `false` when the two queries/fragments are\n * different objects, even if they select the same fields.\n */\n\n\nfunction areEqualSelectors(thisSelector, thatSelector) {\n  return thisSelector.owner === thatSelector.owner && thisSelector.dataID === thatSelector.dataID && thisSelector.node === thatSelector.node && areEqual(thisSelector.variables, thatSelector.variables);\n}\n\nfunction createReaderSelector(fragment, dataID, variables, request) {\n  var isWithinUnmatchedTypeRefinement = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  return {\n    kind: 'SingularReaderSelector',\n    dataID: dataID,\n    isWithinUnmatchedTypeRefinement: isWithinUnmatchedTypeRefinement,\n    node: fragment,\n    variables: variables,\n    owner: request\n  };\n}\n\nfunction createNormalizationSelector(node, dataID, variables) {\n  return {\n    dataID: dataID,\n    node: node,\n    variables: variables\n  };\n}\n\nmodule.exports = {\n  areEqualSelectors: areEqualSelectors,\n  createReaderSelector: createReaderSelector,\n  createNormalizationSelector: createNormalizationSelector,\n  getDataIDsFromFragment: getDataIDsFromFragment,\n  getDataIDsFromObject: getDataIDsFromObject,\n  getSingularSelector: getSingularSelector,\n  getPluralSelector: getPluralSelector,\n  getSelector: getSelector,\n  getSelectorsFromObject: getSelectorsFromObject,\n  getVariablesFromSingularFragment: getVariablesFromSingularFragment,\n  getVariablesFromPluralFragment: getVariablesFromPluralFragment,\n  getVariablesFromFragment: getVariablesFromFragment,\n  getVariablesFromObject: getVariablesFromObject\n};","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/relay-runtime/lib/store/RelayModernSelector.js"],"names":["areEqual","require","invariant","warning","_require","getFragmentVariables","_require2","FRAGMENT_OWNER_KEY","FRAGMENTS_KEY","ID_KEY","IS_WITHIN_UNMATCHED_TYPE_REFINEMENT","getSingularSelector","fragment","item","Array","isArray","process","env","NODE_ENV","name","JSON","stringify","dataID","fragments","mixedOwner","isWithinUnmatchedTypeRefinement","owner","argumentVariables","fragmentVariables","variables","createReaderSelector","stringifiedItem","length","substr","getPluralSelector","items","selectors","forEach","ii","selector","push","kind","getSelector","metadata","plural","getSelectorsFromObject","object","_key","hasOwnProperty","getDataIDsFromObject","ids","_key2","getDataIDsFromFragment","getDataIDs","getDataID","id","getVariablesFromObject","_key3","itemVariables","getVariablesFromFragment","Object","assign","_fragment$metadata","getVariablesFromPluralFragment","getVariablesFromSingularFragment","value","areEqualSelectors","thisSelector","thatSelector","node","request","arguments","undefined","createNormalizationSelector","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('./RelayConcreteVariables'),\n    getFragmentVariables = _require.getFragmentVariables;\n\nvar _require2 = require('./RelayStoreUtils'),\n    FRAGMENT_OWNER_KEY = _require2.FRAGMENT_OWNER_KEY,\n    FRAGMENTS_KEY = _require2.FRAGMENTS_KEY,\n    ID_KEY = _require2.ID_KEY,\n    IS_WITHIN_UNMATCHED_TYPE_REFINEMENT = _require2.IS_WITHIN_UNMATCHED_TYPE_REFINEMENT;\n\n/**\n * @public\n *\n * Given the result `item` from a parent that fetched `fragment`, creates a\n * selector that can be used to read the results of that fragment for that item.\n *\n * Example:\n *\n * Given two fragments as follows:\n *\n * ```\n * fragment Parent on User {\n *   id\n *   ...Child\n * }\n * fragment Child on User {\n *   name\n * }\n * ```\n *\n * And given some object `parent` that is the results of `Parent` for id \"4\",\n * the results of `Child` can be accessed by first getting a selector and then\n * using that selector to `lookup()` the results against the environment:\n *\n * ```\n * const childSelector = getSingularSelector(queryVariables, Child, parent);\n * const childData = environment.lookup(childSelector).data;\n * ```\n */\nfunction getSingularSelector(fragment, item) {\n  !(typeof item === 'object' && item !== null && !Array.isArray(item)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : invariant(false) : void 0;\n  var dataID = item[ID_KEY];\n  var fragments = item[FRAGMENTS_KEY];\n  var mixedOwner = item[FRAGMENT_OWNER_KEY];\n  var isWithinUnmatchedTypeRefinement = item[IS_WITHIN_UNMATCHED_TYPE_REFINEMENT] === true;\n\n  if (typeof dataID === 'string' && typeof fragments === 'object' && fragments !== null && typeof fragments[fragment.name] === 'object' && fragments[fragment.name] !== null && typeof mixedOwner === 'object' && mixedOwner !== null) {\n    var owner = mixedOwner;\n    var argumentVariables = fragments[fragment.name];\n    var fragmentVariables = getFragmentVariables(fragment, owner.variables, argumentVariables);\n    return createReaderSelector(fragment, dataID, fragmentVariables, owner, isWithinUnmatchedTypeRefinement);\n  }\n\n  if (process.env.NODE_ENV !== \"production\") {\n    var stringifiedItem = JSON.stringify(item);\n\n    if (stringifiedItem.length > 499) {\n      stringifiedItem = stringifiedItem.substr(0, 498) + \"\\u2026\";\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`.', fragment.name, stringifiedItem, fragment.name) : void 0;\n  }\n\n  return null;\n}\n/**\n * @public\n *\n * Given the result `items` from a parent that fetched `fragment`, creates a\n * selector that can be used to read the results of that fragment on those\n * items. This is similar to `getSingularSelector` but for \"plural\" fragments that\n * expect an array of results and therefore return an array of selectors.\n */\n\n\nfunction getPluralSelector(fragment, items) {\n  var selectors = null;\n  items.forEach(function (item, ii) {\n    var selector = item != null ? getSingularSelector(fragment, item) : null;\n\n    if (selector != null) {\n      selectors = selectors || [];\n      selectors.push(selector);\n    }\n  });\n\n  if (selectors == null) {\n    return null;\n  } else {\n    return {\n      kind: 'PluralReaderSelector',\n      selectors: selectors\n    };\n  }\n}\n\nfunction getSelector(fragment, item) {\n  if (item == null) {\n    return item;\n  } else if (fragment.metadata && fragment.metadata.plural === true) {\n    !Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getPluralSelector(fragment, item);\n  } else {\n    !!Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getSingularSelector(fragment, item);\n  }\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts the selectors for those fragments from the results.\n *\n * The canonical use-case for this function is ReactRelayFragmentContainer, which\n * uses this function to convert (props, fragments) into selectors so that it\n * can read the results to pass to the inner component.\n */\n\n\nfunction getSelectorsFromObject(fragments, object) {\n  var selectors = {};\n\n  for (var _key in fragments) {\n    if (fragments.hasOwnProperty(_key)) {\n      var fragment = fragments[_key];\n      var item = object[_key];\n      selectors[_key] = getSelector(fragment, item);\n    }\n  }\n\n  return selectors;\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts a mapping of keys -> id(s) of the results.\n *\n * Similar to `getSelectorsFromObject()`, this function can be useful in\n * determining the \"identity\" of the props passed to a component.\n */\n\n\nfunction getDataIDsFromObject(fragments, object) {\n  var ids = {};\n\n  for (var _key2 in fragments) {\n    if (fragments.hasOwnProperty(_key2)) {\n      var fragment = fragments[_key2];\n      var item = object[_key2];\n      ids[_key2] = getDataIDsFromFragment(fragment, item);\n    }\n  }\n\n  return ids;\n}\n\nfunction getDataIDsFromFragment(fragment, item) {\n  if (item == null) {\n    return item;\n  } else if (fragment.metadata && fragment.metadata.plural === true) {\n    !Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getDataIDs(fragment, item);\n  } else {\n    !!Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getDataID(fragment, item);\n  }\n}\n/**\n * @internal\n */\n\n\nfunction getDataIDs(fragment, items) {\n  var ids = null;\n  items.forEach(function (item) {\n    var id = item != null ? getDataID(fragment, item) : null;\n\n    if (id != null) {\n      ids = ids || [];\n      ids.push(id);\n    }\n  });\n  return ids;\n}\n/**\n * @internal\n */\n\n\nfunction getDataID(fragment, item) {\n  !(typeof item === 'object' && item !== null && !Array.isArray(item)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : invariant(false) : void 0;\n  var dataID = item[ID_KEY];\n\n  if (typeof dataID === 'string') {\n    return dataID;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`, or `null` is passed as the fragment ' + \"reference for `%s` if it's conditonally included and the condition isn't met.\", fragment.name, JSON.stringify(item), fragment.name, fragment.name) : void 0;\n  return null;\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts the merged variables that would be in scope for those\n * fragments/results.\n *\n * This can be useful in determing what varaibles were used to fetch the data\n * for a Relay container, for example.\n */\n\n\nfunction getVariablesFromObject(fragments, object) {\n  var variables = {};\n\n  for (var _key3 in fragments) {\n    if (fragments.hasOwnProperty(_key3)) {\n      var fragment = fragments[_key3];\n      var item = object[_key3];\n      var itemVariables = getVariablesFromFragment(fragment, item);\n      Object.assign(variables, itemVariables);\n    }\n  }\n\n  return variables;\n}\n\nfunction getVariablesFromFragment(fragment, item) {\n  var _fragment$metadata;\n\n  if (item == null) {\n    return {};\n  } else if (((_fragment$metadata = fragment.metadata) === null || _fragment$metadata === void 0 ? void 0 : _fragment$metadata.plural) === true) {\n    !Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getVariablesFromPluralFragment(fragment, item);\n  } else {\n    !!Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getVariablesFromSingularFragment(fragment, item) || {};\n  }\n}\n\nfunction getVariablesFromSingularFragment(fragment, item) {\n  var selector = getSingularSelector(fragment, item);\n\n  if (!selector) {\n    return null;\n  }\n\n  return selector.variables;\n}\n\nfunction getVariablesFromPluralFragment(fragment, items) {\n  var variables = {};\n  items.forEach(function (value, ii) {\n    if (value != null) {\n      var itemVariables = getVariablesFromSingularFragment(fragment, value);\n\n      if (itemVariables != null) {\n        Object.assign(variables, itemVariables);\n      }\n    }\n  });\n  return variables;\n}\n/**\n * @public\n *\n * Determine if two selectors are equal (represent the same selection). Note\n * that this function returns `false` when the two queries/fragments are\n * different objects, even if they select the same fields.\n */\n\n\nfunction areEqualSelectors(thisSelector, thatSelector) {\n  return thisSelector.owner === thatSelector.owner && thisSelector.dataID === thatSelector.dataID && thisSelector.node === thatSelector.node && areEqual(thisSelector.variables, thatSelector.variables);\n}\n\nfunction createReaderSelector(fragment, dataID, variables, request) {\n  var isWithinUnmatchedTypeRefinement = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  return {\n    kind: 'SingularReaderSelector',\n    dataID: dataID,\n    isWithinUnmatchedTypeRefinement: isWithinUnmatchedTypeRefinement,\n    node: fragment,\n    variables: variables,\n    owner: request\n  };\n}\n\nfunction createNormalizationSelector(node, dataID, variables) {\n  return {\n    dataID: dataID,\n    node: node,\n    variables: variables\n  };\n}\n\nmodule.exports = {\n  areEqualSelectors: areEqualSelectors,\n  createReaderSelector: createReaderSelector,\n  createNormalizationSelector: createNormalizationSelector,\n  getDataIDsFromFragment: getDataIDsFromFragment,\n  getDataIDsFromObject: getDataIDsFromObject,\n  getSingularSelector: getSingularSelector,\n  getPluralSelector: getPluralSelector,\n  getSelector: getSelector,\n  getSelectorsFromObject: getSelectorsFromObject,\n  getVariablesFromSingularFragment: getVariablesFromSingularFragment,\n  getVariablesFromPluralFragment: getVariablesFromPluralFragment,\n  getVariablesFromFragment: getVariablesFromFragment,\n  getVariablesFromObject: getVariablesFromObject\n};"]},"metadata":{},"sourceType":"script"}