{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayDeclarativeMutationConfig = require('./RelayDeclarativeMutationConfig');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar isRelayModernEnvironment = require('../store/isRelayModernEnvironment');\n\nvar _require = require('../query/GraphQLTag'),\n    getRequest = _require.getRequest;\n\nvar _require2 = require('../store/RelayModernOperationDescriptor'),\n    createOperationDescriptor = _require2.createOperationDescriptor;\n/**\n * Higher-level helper function to execute a mutation against a specific\n * environment.\n */\n\n\nfunction applyOptimisticMutation(environment, config) {\n  !isRelayModernEnvironment(environment) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'commitMutation: expected `environment` to be an instance of ' + '`RelayModernEnvironment`.') : invariant(false) : void 0;\n  var mutation = getRequest(config.mutation);\n\n  if (mutation.params.operationKind !== 'mutation') {\n    throw new Error('commitMutation: Expected mutation operation');\n  }\n\n  var optimisticUpdater = config.optimisticUpdater;\n  var configs = config.configs,\n      optimisticResponse = config.optimisticResponse,\n      variables = config.variables;\n  var operation = createOperationDescriptor(mutation, variables);\n\n  if (configs) {\n    var _RelayDeclarativeMuta = RelayDeclarativeMutationConfig.convert(configs, mutation, optimisticUpdater);\n\n    optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;\n  }\n\n  return environment.applyMutation({\n    operation: operation,\n    response: optimisticResponse,\n    updater: optimisticUpdater\n  });\n}\n\nmodule.exports = applyOptimisticMutation;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/relay-runtime/lib/mutations/applyOptimisticMutation.js"],"names":["RelayDeclarativeMutationConfig","require","invariant","isRelayModernEnvironment","_require","getRequest","_require2","createOperationDescriptor","applyOptimisticMutation","environment","config","process","env","NODE_ENV","mutation","params","operationKind","Error","optimisticUpdater","configs","optimisticResponse","variables","operation","_RelayDeclarativeMuta","convert","applyMutation","response","updater","module","exports"],"mappings":"AAAA;;;;;;;;;AASA;AACA;;AAEA,IAAIA,8BAA8B,GAAGC,OAAO,CAAC,kCAAD,CAA5C;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIE,wBAAwB,GAAGF,OAAO,CAAC,mCAAD,CAAtC;;AAEA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,qBAAD,CAAtB;AAAA,IACII,UAAU,GAAGD,QAAQ,CAACC,UAD1B;;AAGA,IAAIC,SAAS,GAAGL,OAAO,CAAC,yCAAD,CAAvB;AAAA,IACIM,yBAAyB,GAAGD,SAAS,CAACC,yBAD1C;AAGA;;;;;;AAIA,SAASC,uBAAT,CAAiCC,WAAjC,EAA8CC,MAA9C,EAAsD;AACpD,GAACP,wBAAwB,CAACM,WAAD,CAAzB,GAAyCE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,SAAS,CAAC,KAAD,EAAQ,iEAAiE,2BAAzE,CAAjD,GAAyJA,SAAS,CAAC,KAAD,CAA3M,GAAqN,KAAK,CAA1N;AACA,MAAIY,QAAQ,GAAGT,UAAU,CAACK,MAAM,CAACI,QAAR,CAAzB;;AAEA,MAAIA,QAAQ,CAACC,MAAT,CAAgBC,aAAhB,KAAkC,UAAtC,EAAkD;AAChD,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,MAAIC,iBAAiB,GAAGR,MAAM,CAACQ,iBAA/B;AACA,MAAIC,OAAO,GAAGT,MAAM,CAACS,OAArB;AAAA,MACIC,kBAAkB,GAAGV,MAAM,CAACU,kBADhC;AAAA,MAEIC,SAAS,GAAGX,MAAM,CAACW,SAFvB;AAGA,MAAIC,SAAS,GAAGf,yBAAyB,CAACO,QAAD,EAAWO,SAAX,CAAzC;;AAEA,MAAIF,OAAJ,EAAa;AACX,QAAII,qBAAqB,GAAGvB,8BAA8B,CAACwB,OAA/B,CAAuCL,OAAvC,EAAgDL,QAAhD,EAA0DI,iBAA1D,CAA5B;;AAEAA,IAAAA,iBAAiB,GAAGK,qBAAqB,CAACL,iBAA1C;AACD;;AAED,SAAOT,WAAW,CAACgB,aAAZ,CAA0B;AAC/BH,IAAAA,SAAS,EAAEA,SADoB;AAE/BI,IAAAA,QAAQ,EAAEN,kBAFqB;AAG/BO,IAAAA,OAAO,EAAET;AAHsB,GAA1B,CAAP;AAKD;;AAEDU,MAAM,CAACC,OAAP,GAAiBrB,uBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayDeclarativeMutationConfig = require('./RelayDeclarativeMutationConfig');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar isRelayModernEnvironment = require('../store/isRelayModernEnvironment');\n\nvar _require = require('../query/GraphQLTag'),\n    getRequest = _require.getRequest;\n\nvar _require2 = require('../store/RelayModernOperationDescriptor'),\n    createOperationDescriptor = _require2.createOperationDescriptor;\n\n/**\n * Higher-level helper function to execute a mutation against a specific\n * environment.\n */\nfunction applyOptimisticMutation(environment, config) {\n  !isRelayModernEnvironment(environment) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'commitMutation: expected `environment` to be an instance of ' + '`RelayModernEnvironment`.') : invariant(false) : void 0;\n  var mutation = getRequest(config.mutation);\n\n  if (mutation.params.operationKind !== 'mutation') {\n    throw new Error('commitMutation: Expected mutation operation');\n  }\n\n  var optimisticUpdater = config.optimisticUpdater;\n  var configs = config.configs,\n      optimisticResponse = config.optimisticResponse,\n      variables = config.variables;\n  var operation = createOperationDescriptor(mutation, variables);\n\n  if (configs) {\n    var _RelayDeclarativeMuta = RelayDeclarativeMutationConfig.convert(configs, mutation, optimisticUpdater);\n\n    optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;\n  }\n\n  return environment.applyMutation({\n    operation: operation,\n    response: optimisticResponse,\n    updater: optimisticUpdater\n  });\n}\n\nmodule.exports = applyOptimisticMutation;"]},"metadata":{},"sourceType":"script"}