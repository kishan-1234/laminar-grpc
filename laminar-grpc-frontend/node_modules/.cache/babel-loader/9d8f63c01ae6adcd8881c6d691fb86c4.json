{"ast":null,"code":"import { isNumber } from 'util';\nexport var HeadCellResizeStateAction = 'HeadCellResizeStateAction';\nexport var getMouseMove = function (currentWidth, minWidth, startX, dispatch) {\n  return function (event) {\n    var newWidth = event.screenX - startX;\n\n    if (newWidth !== currentWidth) {\n      newWidth = getValidatedWidth(newWidth, minWidth);\n      dispatch({\n        type: HeadCellResizeStateAction,\n        width: newWidth\n      });\n    }\n  };\n};\nexport var getValidatedWidth = function (newWidth, minWidth) {\n  if (newWidth < minWidth) {\n    return minWidth;\n  }\n\n  return newWidth;\n};\nexport var getMinWidth = function (style) {\n  var minWidth = 20;\n  var styleMinWidth = style && style.minWidth;\n\n  if (styleMinWidth && isNumber(styleMinWidth)) {\n    minWidth = styleMinWidth;\n  }\n\n  return minWidth;\n};\nexport var headCellDispatchWrapper = function (setWidth, dispatch) {\n  return function (action) {\n    if (action.type === HeadCellResizeStateAction) {\n      setWidth(action.width);\n    } else {\n      dispatch(action);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/ka-table/Utils/CellResizeUtils.js"],"names":["isNumber","HeadCellResizeStateAction","getMouseMove","currentWidth","minWidth","startX","dispatch","event","newWidth","screenX","getValidatedWidth","type","width","getMinWidth","style","styleMinWidth","headCellDispatchWrapper","setWidth","action"],"mappings":"AAAA,SAASA,QAAT,QAAyB,MAAzB;AACA,OAAO,IAAIC,yBAAyB,GAAG,2BAAhC;AACP,OAAO,IAAIC,YAAY,GAAG,UAAUC,YAAV,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0CC,QAA1C,EAAoD;AAAE,SAAO,UAAUC,KAAV,EAAiB;AACpG,QAAIC,QAAQ,GAAGD,KAAK,CAACE,OAAN,GAAgBJ,MAA/B;;AACA,QAAIG,QAAQ,KAAKL,YAAjB,EAA+B;AAC3BK,MAAAA,QAAQ,GAAGE,iBAAiB,CAACF,QAAD,EAAWJ,QAAX,CAA5B;AACAE,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAEV,yBAAR;AAAmCW,QAAAA,KAAK,EAAEJ;AAA1C,OAAD,CAAR;AACH;AACJ,GAN+E;AAM5E,CANG;AAOP,OAAO,IAAIE,iBAAiB,GAAG,UAAUF,QAAV,EAAoBJ,QAApB,EAA8B;AACzD,MAAII,QAAQ,GAAGJ,QAAf,EAAyB;AACrB,WAAOA,QAAP;AACH;;AACD,SAAOI,QAAP;AACH,CALM;AAMP,OAAO,IAAIK,WAAW,GAAG,UAAUC,KAAV,EAAiB;AACtC,MAAIV,QAAQ,GAAG,EAAf;AACA,MAAIW,aAAa,GAAGD,KAAK,IAAIA,KAAK,CAACV,QAAnC;;AACA,MAAIW,aAAa,IAAIf,QAAQ,CAACe,aAAD,CAA7B,EAA8C;AAC1CX,IAAAA,QAAQ,GAAGW,aAAX;AACH;;AACD,SAAOX,QAAP;AACH,CAPM;AAQP,OAAO,IAAIY,uBAAuB,GAAG,UAAUC,QAAV,EAAoBX,QAApB,EAA8B;AAAE,SAAO,UAAUY,MAAV,EAAkB;AAC1F,QAAIA,MAAM,CAACP,IAAP,KAAgBV,yBAApB,EAA+C;AAC3CgB,MAAAA,QAAQ,CAACC,MAAM,CAACN,KAAR,CAAR;AACH,KAFD,MAGK;AACDN,MAAAA,QAAQ,CAACY,MAAD,CAAR;AACH;AACJ,GAPoE;AAOjE,CAPG","sourcesContent":["import { isNumber } from 'util';\nexport var HeadCellResizeStateAction = 'HeadCellResizeStateAction';\nexport var getMouseMove = function (currentWidth, minWidth, startX, dispatch) { return function (event) {\n    var newWidth = event.screenX - startX;\n    if (newWidth !== currentWidth) {\n        newWidth = getValidatedWidth(newWidth, minWidth);\n        dispatch({ type: HeadCellResizeStateAction, width: newWidth });\n    }\n}; };\nexport var getValidatedWidth = function (newWidth, minWidth) {\n    if (newWidth < minWidth) {\n        return minWidth;\n    }\n    return newWidth;\n};\nexport var getMinWidth = function (style) {\n    var minWidth = 20;\n    var styleMinWidth = style && style.minWidth;\n    if (styleMinWidth && isNumber(styleMinWidth)) {\n        minWidth = styleMinWidth;\n    }\n    return minWidth;\n};\nexport var headCellDispatchWrapper = function (setWidth, dispatch) { return function (action) {\n    if (action.type === HeadCellResizeStateAction) {\n        setWidth(action.width);\n    }\n    else {\n        dispatch(action);\n    }\n}; };"]},"metadata":{},"sourceType":"module"}