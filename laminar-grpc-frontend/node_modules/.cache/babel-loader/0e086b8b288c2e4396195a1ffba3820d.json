{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport { newRowId } from '../../const';\nimport { getValueByField } from '../../Utils/DataUtils';\nimport { getRowEditableCells } from '../../Utils/FilterUtils';\nimport { getGroupMark, getGroupText } from '../../Utils/GroupUtils';\nimport DataAndDetailsRows from '../DataAndDetailsRows/DataAndDetailsRows';\nimport GroupRow from '../GroupRow/GroupRow';\nimport NewRow from '../NewRow/NewRow';\n\nvar Rows = function (props) {\n  var childComponents = props.childComponents,\n      columns = props.columns,\n      data = props.data,\n      _a = props.detailsRows,\n      detailsRows = _a === void 0 ? [] : _a,\n      dispatch = props.dispatch,\n      editableCells = props.editableCells,\n      format = props.format,\n      groupColumnsCount = props.groupColumnsCount,\n      groupedColumns = props.groupedColumns,\n      _b = props.groups,\n      groups = _b === void 0 ? [] : _b,\n      _c = props.groupsExpanded,\n      groupsExpanded = _c === void 0 ? [] : _c,\n      onFirstRowRendered = props.onFirstRowRendered,\n      rowKeyField = props.rowKeyField,\n      rowReordering = props.rowReordering,\n      selectedRows = props.selectedRows,\n      validation = props.validation;\n  var groupMark = getGroupMark();\n  var firstRowRef = useRef(null);\n  useEffect(function () {\n    onFirstRowRendered(firstRowRef);\n  }, [firstRowRef, onFirstRowRendered]);\n  var rowRefLink = firstRowRef;\n  var newRowEditableCells = editableCells && editableCells.filter(function (c) {\n    return c.rowKeyValue === newRowId;\n  });\n  return React.createElement(React.Fragment, null, newRowEditableCells && !!newRowEditableCells.length && React.createElement(NewRow, {\n    childComponents: childComponents,\n    columns: columns,\n    dispatch: dispatch,\n    editableCells: newRowEditableCells,\n    format: format,\n    groupColumnsCount: groupColumnsCount,\n    rowKeyField: rowKeyField,\n    validation: validation\n  }), data.map(function (d) {\n    if (d.groupMark === groupMark) {\n      var groupIndex = d.key.length - 1;\n      var group_1 = groups && groups[groupIndex];\n      var column = group_1 && groupedColumns.find(function (c) {\n        return c.key === group_1.columnKey;\n      });\n      return React.createElement(GroupRow, {\n        childComponents: childComponents,\n        column: column,\n        contentColSpan: columns.length - groupIndex + groups.length,\n        dispatch: dispatch,\n        groupIndex: groupIndex,\n        groupKey: d.key,\n        isExpanded: groupsExpanded.some(function (ge) {\n          return JSON.stringify(ge) === JSON.stringify(d.key);\n        }),\n        text: getGroupText(d.value, column),\n        key: d.key\n      });\n    } else {\n      var rowKeyValue_1 = getValueByField(d, rowKeyField);\n      var isSelectedRow = selectedRows.some(function (s) {\n        return s === rowKeyValue_1;\n      });\n      var isDetailsRowShown = detailsRows.some(function (r) {\n        return r === rowKeyValue_1;\n      });\n      var rowEditableCells = getRowEditableCells(rowKeyValue_1, editableCells);\n      var dataRow = React.createElement(DataAndDetailsRows, {\n        childComponents: props.childComponents,\n        columns: props.columns,\n        dispatch: dispatch,\n        editableCells: props.editableCells,\n        editingMode: props.editingMode,\n        format: format,\n        groupColumnsCount: props.groupColumnsCount,\n        isDetailsRowShown: isDetailsRowShown,\n        isSelectedRow: isSelectedRow,\n        key: rowKeyValue_1,\n        rowData: d,\n        rowEditableCells: rowEditableCells,\n        rowKeyField: props.rowKeyField,\n        rowKeyValue: rowKeyValue_1,\n        rowReordering: rowReordering,\n        selectedRows: props.selectedRows,\n        trRef: rowRefLink,\n        validation: validation\n      });\n      rowRefLink = undefined;\n      return dataRow;\n    }\n  }));\n};\n\nexport default Rows;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/ka-table/Components/Rows/Rows.js"],"names":["React","useEffect","useRef","newRowId","getValueByField","getRowEditableCells","getGroupMark","getGroupText","DataAndDetailsRows","GroupRow","NewRow","Rows","props","childComponents","columns","data","_a","detailsRows","dispatch","editableCells","format","groupColumnsCount","groupedColumns","_b","groups","_c","groupsExpanded","onFirstRowRendered","rowKeyField","rowReordering","selectedRows","validation","groupMark","firstRowRef","rowRefLink","newRowEditableCells","filter","c","rowKeyValue","createElement","Fragment","length","map","d","groupIndex","key","group_1","column","find","columnKey","contentColSpan","groupKey","isExpanded","some","ge","JSON","stringify","text","value","rowKeyValue_1","isSelectedRow","s","isDetailsRowShown","r","rowEditableCells","dataRow","editingMode","rowData","trRef","undefined"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { newRowId } from '../../const';\nimport { getValueByField } from '../../Utils/DataUtils';\nimport { getRowEditableCells } from '../../Utils/FilterUtils';\nimport { getGroupMark, getGroupText } from '../../Utils/GroupUtils';\nimport DataAndDetailsRows from '../DataAndDetailsRows/DataAndDetailsRows';\nimport GroupRow from '../GroupRow/GroupRow';\nimport NewRow from '../NewRow/NewRow';\nvar Rows = function (props) {\n    var childComponents = props.childComponents, columns = props.columns, data = props.data, _a = props.detailsRows, detailsRows = _a === void 0 ? [] : _a, dispatch = props.dispatch, editableCells = props.editableCells, format = props.format, groupColumnsCount = props.groupColumnsCount, groupedColumns = props.groupedColumns, _b = props.groups, groups = _b === void 0 ? [] : _b, _c = props.groupsExpanded, groupsExpanded = _c === void 0 ? [] : _c, onFirstRowRendered = props.onFirstRowRendered, rowKeyField = props.rowKeyField, rowReordering = props.rowReordering, selectedRows = props.selectedRows, validation = props.validation;\n    var groupMark = getGroupMark();\n    var firstRowRef = useRef(null);\n    useEffect(function () {\n        onFirstRowRendered(firstRowRef);\n    }, [firstRowRef, onFirstRowRendered]);\n    var rowRefLink = firstRowRef;\n    var newRowEditableCells = editableCells && editableCells.filter(function (c) { return c.rowKeyValue === newRowId; });\n    return (React.createElement(React.Fragment, null,\n        newRowEditableCells && !!newRowEditableCells.length && (React.createElement(NewRow, { childComponents: childComponents, columns: columns, dispatch: dispatch, editableCells: newRowEditableCells, format: format, groupColumnsCount: groupColumnsCount, rowKeyField: rowKeyField, validation: validation })),\n        data.map(function (d) {\n            if (d.groupMark === groupMark) {\n                var groupIndex = d.key.length - 1;\n                var group_1 = groups && groups[groupIndex];\n                var column = group_1 && groupedColumns.find(function (c) { return c.key === group_1.columnKey; });\n                return (React.createElement(GroupRow, { childComponents: childComponents, column: column, contentColSpan: columns.length - groupIndex + groups.length, dispatch: dispatch, groupIndex: groupIndex, groupKey: d.key, isExpanded: groupsExpanded.some(function (ge) { return JSON.stringify(ge) === JSON.stringify(d.key); }), text: getGroupText(d.value, column), key: d.key }));\n            }\n            else {\n                var rowKeyValue_1 = getValueByField(d, rowKeyField);\n                var isSelectedRow = selectedRows.some(function (s) { return s === rowKeyValue_1; });\n                var isDetailsRowShown = detailsRows.some(function (r) { return r === rowKeyValue_1; });\n                var rowEditableCells = getRowEditableCells(rowKeyValue_1, editableCells);\n                var dataRow = (React.createElement(DataAndDetailsRows, { childComponents: props.childComponents, columns: props.columns, dispatch: dispatch, editableCells: props.editableCells, editingMode: props.editingMode, format: format, groupColumnsCount: props.groupColumnsCount, isDetailsRowShown: isDetailsRowShown, isSelectedRow: isSelectedRow, key: rowKeyValue_1, rowData: d, rowEditableCells: rowEditableCells, rowKeyField: props.rowKeyField, rowKeyValue: rowKeyValue_1, rowReordering: rowReordering, selectedRows: props.selectedRows, trRef: rowRefLink, validation: validation }));\n                rowRefLink = undefined;\n                return dataRow;\n            }\n        })));\n};\nexport default Rows;"]},"metadata":{},"sourceType":"module"}