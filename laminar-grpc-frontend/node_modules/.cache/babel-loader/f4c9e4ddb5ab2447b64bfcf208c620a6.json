{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n'use strict';\n\nvar PreloadableQueryRegistry = /*#__PURE__*/function () {\n  function PreloadableQueryRegistry() {\n    this._preloadableQueries = new Map();\n    this._callbacks = new Map();\n  }\n\n  var _proto = PreloadableQueryRegistry.prototype;\n\n  _proto.set = function set(key, value) {\n    this._preloadableQueries.set(key, value);\n\n    var callbacks = this._callbacks.get(key);\n\n    if (callbacks != null) {\n      callbacks.forEach(function (cb) {\n        try {\n          cb(value);\n        } catch (e) {\n          // We do *not* want to throw in this tick, as this callback is executed\n          // while a query is required for the very first time.\n          setTimeout(function () {\n            throw e;\n          }, 0);\n        }\n      });\n    }\n  };\n\n  _proto.get = function get(key) {\n    return this._preloadableQueries.get(key);\n  };\n\n  _proto.onLoad = function onLoad(key, callback) {\n    var _this$_callbacks$get;\n\n    var callbacks = (_this$_callbacks$get = this._callbacks.get(key)) !== null && _this$_callbacks$get !== void 0 ? _this$_callbacks$get : new Set();\n    callbacks.add(callback);\n\n    var dispose = function dispose() {\n      callbacks[\"delete\"](callback);\n    };\n\n    this._callbacks.set(key, callbacks);\n\n    return {\n      dispose: dispose\n    };\n  };\n\n  _proto.clear = function clear() {\n    this._preloadableQueries.clear();\n  };\n\n  return PreloadableQueryRegistry;\n}();\n\nvar preloadableQueryRegistry = new PreloadableQueryRegistry();\nmodule.exports = preloadableQueryRegistry;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/relay-runtime/lib/query/PreloadableQueryRegistry.js"],"names":["PreloadableQueryRegistry","_preloadableQueries","Map","_callbacks","_proto","prototype","set","key","value","callbacks","get","forEach","cb","e","setTimeout","onLoad","callback","_this$_callbacks$get","Set","add","dispose","clear","preloadableQueryRegistry","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,wBAAwB,GAAG,aAAa,YAAY;AACtD,WAASA,wBAAT,GAAoC;AAClC,SAAKC,mBAAL,GAA2B,IAAIC,GAAJ,EAA3B;AACA,SAAKC,UAAL,GAAkB,IAAID,GAAJ,EAAlB;AACD;;AAED,MAAIE,MAAM,GAAGJ,wBAAwB,CAACK,SAAtC;;AAEAD,EAAAA,MAAM,CAACE,GAAP,GAAa,SAASA,GAAT,CAAaC,GAAb,EAAkBC,KAAlB,EAAyB;AACpC,SAAKP,mBAAL,CAAyBK,GAAzB,CAA6BC,GAA7B,EAAkCC,KAAlC;;AAEA,QAAIC,SAAS,GAAG,KAAKN,UAAL,CAAgBO,GAAhB,CAAoBH,GAApB,CAAhB;;AAEA,QAAIE,SAAS,IAAI,IAAjB,EAAuB;AACrBA,MAAAA,SAAS,CAACE,OAAV,CAAkB,UAAUC,EAAV,EAAc;AAC9B,YAAI;AACFA,UAAAA,EAAE,CAACJ,KAAD,CAAF;AACD,SAFD,CAEE,OAAOK,CAAP,EAAU;AACV;AACA;AACAC,UAAAA,UAAU,CAAC,YAAY;AACrB,kBAAMD,CAAN;AACD,WAFS,EAEP,CAFO,CAAV;AAGD;AACF,OAVD;AAWD;AACF,GAlBD;;AAoBAT,EAAAA,MAAM,CAACM,GAAP,GAAa,SAASA,GAAT,CAAaH,GAAb,EAAkB;AAC7B,WAAO,KAAKN,mBAAL,CAAyBS,GAAzB,CAA6BH,GAA7B,CAAP;AACD,GAFD;;AAIAH,EAAAA,MAAM,CAACW,MAAP,GAAgB,SAASA,MAAT,CAAgBR,GAAhB,EAAqBS,QAArB,EAA+B;AAC7C,QAAIC,oBAAJ;;AAEA,QAAIR,SAAS,GAAG,CAACQ,oBAAoB,GAAG,KAAKd,UAAL,CAAgBO,GAAhB,CAAoBH,GAApB,CAAxB,MAAsD,IAAtD,IAA8DU,oBAAoB,KAAK,KAAK,CAA5F,GAAgGA,oBAAhG,GAAuH,IAAIC,GAAJ,EAAvI;AACAT,IAAAA,SAAS,CAACU,GAAV,CAAcH,QAAd;;AAEA,QAAII,OAAO,GAAG,SAASA,OAAT,GAAmB;AAC/BX,MAAAA,SAAS,CAAC,QAAD,CAAT,CAAoBO,QAApB;AACD,KAFD;;AAIA,SAAKb,UAAL,CAAgBG,GAAhB,CAAoBC,GAApB,EAAyBE,SAAzB;;AAEA,WAAO;AACLW,MAAAA,OAAO,EAAEA;AADJ,KAAP;AAGD,GAfD;;AAiBAhB,EAAAA,MAAM,CAACiB,KAAP,GAAe,SAASA,KAAT,GAAiB;AAC9B,SAAKpB,mBAAL,CAAyBoB,KAAzB;AACD,GAFD;;AAIA,SAAOrB,wBAAP;AACD,CAtD2C,EAA5C;;AAwDA,IAAIsB,wBAAwB,GAAG,IAAItB,wBAAJ,EAA/B;AACAuB,MAAM,CAACC,OAAP,GAAiBF,wBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n'use strict';\n\nvar PreloadableQueryRegistry = /*#__PURE__*/function () {\n  function PreloadableQueryRegistry() {\n    this._preloadableQueries = new Map();\n    this._callbacks = new Map();\n  }\n\n  var _proto = PreloadableQueryRegistry.prototype;\n\n  _proto.set = function set(key, value) {\n    this._preloadableQueries.set(key, value);\n\n    var callbacks = this._callbacks.get(key);\n\n    if (callbacks != null) {\n      callbacks.forEach(function (cb) {\n        try {\n          cb(value);\n        } catch (e) {\n          // We do *not* want to throw in this tick, as this callback is executed\n          // while a query is required for the very first time.\n          setTimeout(function () {\n            throw e;\n          }, 0);\n        }\n      });\n    }\n  };\n\n  _proto.get = function get(key) {\n    return this._preloadableQueries.get(key);\n  };\n\n  _proto.onLoad = function onLoad(key, callback) {\n    var _this$_callbacks$get;\n\n    var callbacks = (_this$_callbacks$get = this._callbacks.get(key)) !== null && _this$_callbacks$get !== void 0 ? _this$_callbacks$get : new Set();\n    callbacks.add(callback);\n\n    var dispose = function dispose() {\n      callbacks[\"delete\"](callback);\n    };\n\n    this._callbacks.set(key, callbacks);\n\n    return {\n      dispose: dispose\n    };\n  };\n\n  _proto.clear = function clear() {\n    this._preloadableQueries.clear();\n  };\n\n  return PreloadableQueryRegistry;\n}();\n\nvar preloadableQueryRegistry = new PreloadableQueryRegistry();\nmodule.exports = preloadableQueryRegistry;"]},"metadata":{},"sourceType":"script"}