{"ast":null,"code":"var _ListFarmersQuery,\n    _jsxFileName = \"/Users/gayatri/work/laminar-grpc/frontend/src/ListFarmers.js\";\n\nimport React, { useState } from 'react';\nimport { QueryRenderer } from 'react-relay';\nimport { DataType, SortDirection, SortingMode } from 'ka-table/enums';\nimport environment from './RelayEnv';\nimport { kaReducer, Table } from 'ka-table';\nimport { EditingMode } from 'ka-table/enums';\nimport \"ka-table/style.scss\";\nimport FilterControl from 'react-filter-control';\nimport { filterData } from './FilterData';\nconst listFarmersQuery = _ListFarmersQuery !== void 0 ? _ListFarmersQuery : (_ListFarmersQuery = require(\"./__generated__/ListFarmersQuery.graphql\"), _ListFarmersQuery.hash && _ListFarmersQuery.hash !== \"7f7f701330dd27749b2cbbe748cbe0ba\" && console.error(\"The definition of 'ListFarmersQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _ListFarmersQuery);\nexport const fields = [{\n  caption: 'Farmer Name',\n  name: 'farmerName',\n  operators: [{\n    caption: 'Contains',\n    name: 'contains'\n  }, {\n    caption: 'Does not Contain',\n    name: 'doesNotContain'\n  }]\n}, {\n  caption: 'Email',\n  name: 'email',\n  operators: [{\n    caption: 'Contains',\n    name: 'contains'\n  }, {\n    caption: 'Does not Contain',\n    name: 'doesNotContain'\n  }]\n}, {\n  caption: 'Create Time',\n  name: 'epochs',\n  operators: [{\n    caption: 'Equals',\n    name: '='\n  }, {\n    caption: 'Does not Equal',\n    name: '<>'\n  }, {\n    caption: 'More than',\n    name: '>'\n  }, {\n    caption: 'Less than',\n    name: '<'\n  }]\n}];\nexport const groups = [{\n  caption: 'And',\n  name: 'and'\n}, {\n  caption: 'Or',\n  name: 'or'\n}];\nexport const defaultFilter = {\n  groupName: 'and',\n  items: [{\n    field: 'farmerName',\n    key: '1',\n    operator: 'contains',\n    value: ''\n  }]\n};\nconst tablePropsInit = {\n  columns: [{\n    key: 'farmerId',\n    title: 'Farmer Id',\n    dataType: DataType.String\n  }, {\n    key: 'farmerName',\n    title: 'Farmer Name',\n    dataType: DataType.String,\n    sortDirection: SortDirection.Descend\n  }, {\n    key: 'epochs',\n    title: 'Create Time',\n    dataType: DataType.String\n  }, {\n    key: 'email',\n    title: 'Email',\n    dataType: DataType.String\n  }],\n  editingMode: EditingMode.Cell,\n  paging: {\n    enabled: true,\n    pageIndex: 0,\n    pageSize: 10\n  },\n  rowKeyField: 'farmerId',\n  sortingMode: SortingMode.Single\n};\n\nconst ListFramers = () => {\n  //table\n  const [tableProps, changeTableProps] = useState(tablePropsInit);\n\n  const dispatch = action => {\n    changeTableProps(prevState => kaReducer(prevState, action));\n  }; //filter\n\n\n  const [filterValue, changeFilter] = useState(defaultFilter);\n\n  const onFilterChanged = newFilterValue => {\n    changeFilter(newFilterValue);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"h-screen bg-gray-200 pt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(QueryRenderer, {\n    environment: environment,\n    query: listFarmersQuery,\n    variables: {},\n    render: ({\n      error,\n      props\n    }) => {\n      if (error) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 20\n          }\n        }, \"Error!\");\n      } else if (props) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"container mx-auto\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          className: \"text-3xl font-sans font-medium block\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }\n        }, \"Farmer List\"), /*#__PURE__*/React.createElement(FilterControl, Object.assign({\n          fields,\n          groups,\n          filterValue,\n          onFilterValueChanged: onFilterChanged\n        }, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"rounded overflow-hidden shadow-lg\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Table, Object.assign({}, tableProps, {\n          data: props.executeListAllFarmers.records,\n          dispatch: dispatch,\n          extendedFilter: data => filterData(data, filterValue),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 19\n          }\n        }))));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ListFramers;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/src/ListFarmers.js"],"names":["React","useState","QueryRenderer","DataType","SortDirection","SortingMode","environment","kaReducer","Table","EditingMode","FilterControl","filterData","listFarmersQuery","fields","caption","name","operators","groups","defaultFilter","groupName","items","field","key","operator","value","tablePropsInit","columns","title","dataType","String","sortDirection","Descend","editingMode","Cell","paging","enabled","pageIndex","pageSize","rowKeyField","sortingMode","Single","ListFramers","tableProps","changeTableProps","dispatch","action","prevState","filterValue","changeFilter","onFilterChanged","newFilterValue","error","props","onFilterValueChanged","executeListAllFarmers","records","data"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport graphql from 'babel-plugin-relay/macro';\nimport { QueryRenderer } from 'react-relay';\nimport { DataType, SortDirection, SortingMode } from 'ka-table/enums';\nimport environment from './RelayEnv';\nimport { kaReducer, Table } from 'ka-table';\nimport { EditingMode } from 'ka-table/enums';\nimport \"ka-table/style.scss\";\nimport FilterControl from 'react-filter-control';\nimport { filterData } from './FilterData';\n\nconst listFarmersQuery = graphql`\n  query ListFarmersQuery {\n      executeListAllFarmers {\n          status\n          count\n          records {\n              farmerId\n              farmerName\n              epochs\n              email\n          }\n      }\n  }`\n\nexport const fields = [\n  {\n    caption: 'Farmer Name',\n    name: 'farmerName',\n    operators: [{\n      caption: 'Contains',\n      name: 'contains',\n    }, {\n      caption: 'Does not Contain',\n      name: 'doesNotContain',\n    }],\n  },\n  {\n    caption: 'Email',\n    name: 'email',\n    operators: [{\n      caption: 'Contains',\n      name: 'contains',\n    }, {\n      caption: 'Does not Contain',\n      name: 'doesNotContain',\n    }],\n  }, {\n    caption: 'Create Time',\n    name: 'epochs',\n    operators: [{\n      caption: 'Equals',\n      name: '=',\n    }, {\n      caption: 'Does not Equal',\n      name: '<>',\n    }, {\n      caption: 'More than',\n      name: '>',\n    }, {\n      caption: 'Less than',\n      name: '<',\n    }],\n  }];\n\nexport const groups = [{\n  caption: 'And',\n  name: 'and',\n}, {\n  caption: 'Or',\n  name: 'or',\n}];\n\nexport const defaultFilter = {\n  groupName: 'and',\n  items: [\n    {\n      field: 'farmerName',\n      key: '1',\n      operator: 'contains',\n      value: '',\n    }\n  ],\n};\n\nconst tablePropsInit = {\n  columns: [\n    { key: 'farmerId', title: 'Farmer Id', dataType: DataType.String },\n    { key: 'farmerName', title: 'Farmer Name', dataType: DataType.String, sortDirection: SortDirection.Descend },\n    { key: 'epochs', title: 'Create Time', dataType: DataType.String },\n    { key: 'email', title: 'Email', dataType: DataType.String },\n  ],\n  editingMode: EditingMode.Cell,\n  paging: {\n    enabled: true,\n    pageIndex: 0,\n    pageSize: 10\n  },\n  rowKeyField: 'farmerId',\n  sortingMode: SortingMode.Single,\n};\n\nconst ListFramers = () => {\n  //table\n  const [tableProps, changeTableProps] = useState(tablePropsInit);\n  const dispatch = (action) => {\n    changeTableProps((prevState) => kaReducer(prevState, action));\n  };\n\n  //filter\n  const [filterValue, changeFilter] = useState(defaultFilter);\n  const onFilterChanged = (newFilterValue) => {\n    changeFilter(newFilterValue);\n  };\n\n  return (\n    <div className=\"h-screen bg-gray-200 pt-4\">\n      <QueryRenderer\n        environment={environment}\n        query={listFarmersQuery}\n        variables={{}}\n        render={({ error, props }) => {\n          if (error) {\n            return <div>Error!</div>;\n          } else if (props) {\n            return (\n              <div className='container mx-auto'>\n                <label className=\"text-3xl font-sans font-medium block\">Farmer List</label>\n                <FilterControl {...{ fields, groups, filterValue, onFilterValueChanged: onFilterChanged }} />\n                <div className=\"rounded overflow-hidden shadow-lg\">\n                  <Table\n                    {...tableProps}\n                    data={props.executeListAllFarmers.records}\n                    dispatch={dispatch}\n                    extendedFilter={(data) => filterData(data, filterValue)}\n                  />\n                </div>\n              </div>\n            );\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default ListFramers;"]},"metadata":{},"sourceType":"module"}