{"ast":null,"code":"import * as React from 'react';\nimport { resizeColumn } from '../../actionCreators';\nimport defaultOptions from '../../defaultOptions';\nimport { getMinWidth, getMouseMove, getValidatedWidth, HeadCellResizeStateAction } from '../../Utils/CellResizeUtils';\nimport { getEventListenerEffect } from '../../Utils/EffectUtils';\n\nvar HeadCellResize = function (props) {\n  var _a = props.column,\n      key = _a.key,\n      style = _a.style,\n      dispatch = props.dispatch,\n      currentWidth = props.currentWidth;\n  var minWidth = getMinWidth(style);\n  return React.createElement(\"div\", {\n    className: defaultOptions.css.theadCellResize,\n    draggable: 'false',\n    onMouseDown: function (mouseDownEvent) {\n      var startX = mouseDownEvent.screenX - mouseDownEvent.currentTarget.parentElement.offsetWidth;\n      var mouseMoveStop = getEventListenerEffect('mousemove', getMouseMove(currentWidth, minWidth, startX, dispatch));\n      var mouseUpStop = getEventListenerEffect('mouseup', function (event) {\n        var newWidth = getValidatedWidth(event.screenX - startX, minWidth);\n        dispatch(resizeColumn(key, newWidth));\n        dispatch({\n          type: HeadCellResizeStateAction,\n          width: newWidth\n        });\n        mouseUpStop();\n        mouseMoveStop();\n      });\n    }\n  }, \"\\u00A0\");\n};\n\nexport default HeadCellResize;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/ka-table/Components/HeadCellResize/HeadCellResize.js"],"names":["React","resizeColumn","defaultOptions","getMinWidth","getMouseMove","getValidatedWidth","HeadCellResizeStateAction","getEventListenerEffect","HeadCellResize","props","_a","column","key","style","dispatch","currentWidth","minWidth","createElement","className","css","theadCellResize","draggable","onMouseDown","mouseDownEvent","startX","screenX","currentTarget","parentElement","offsetWidth","mouseMoveStop","mouseUpStop","event","newWidth","type","width"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,iBAApC,EAAuDC,yBAAvD,QAAyF,6BAAzF;AACA,SAASC,sBAAT,QAAuC,yBAAvC;;AACA,IAAIC,cAAc,GAAG,UAAUC,KAAV,EAAiB;AAClC,MAAIC,EAAE,GAAGD,KAAK,CAACE,MAAf;AAAA,MAAuBC,GAAG,GAAGF,EAAE,CAACE,GAAhC;AAAA,MAAqCC,KAAK,GAAGH,EAAE,CAACG,KAAhD;AAAA,MAAuDC,QAAQ,GAAGL,KAAK,CAACK,QAAxE;AAAA,MAAkFC,YAAY,GAAGN,KAAK,CAACM,YAAvG;AACA,MAAIC,QAAQ,GAAGb,WAAW,CAACU,KAAD,CAA1B;AACA,SAAQb,KAAK,CAACiB,aAAN,CAAoB,KAApB,EAA2B;AAAEC,IAAAA,SAAS,EAAEhB,cAAc,CAACiB,GAAf,CAAmBC,eAAhC;AAAiDC,IAAAA,SAAS,EAAE,OAA5D;AAAqEC,IAAAA,WAAW,EAAE,UAAUC,cAAV,EAA0B;AACvI,UAAIC,MAAM,GAAGD,cAAc,CAACE,OAAf,GAAyBF,cAAc,CAACG,aAAf,CAA6BC,aAA7B,CAA2CC,WAAjF;AACA,UAAIC,aAAa,GAAGtB,sBAAsB,CAAC,WAAD,EAAcH,YAAY,CAACW,YAAD,EAAeC,QAAf,EAAyBQ,MAAzB,EAAiCV,QAAjC,CAA1B,CAA1C;AACA,UAAIgB,WAAW,GAAGvB,sBAAsB,CAAC,SAAD,EAAY,UAAUwB,KAAV,EAAiB;AACjE,YAAIC,QAAQ,GAAG3B,iBAAiB,CAAC0B,KAAK,CAACN,OAAN,GAAgBD,MAAjB,EAAyBR,QAAzB,CAAhC;AACAF,QAAAA,QAAQ,CAACb,YAAY,CAACW,GAAD,EAAMoB,QAAN,CAAb,CAAR;AACAlB,QAAAA,QAAQ,CAAC;AAAEmB,UAAAA,IAAI,EAAE3B,yBAAR;AAAmC4B,UAAAA,KAAK,EAAEF;AAA1C,SAAD,CAAR;AACAF,QAAAA,WAAW;AACXD,QAAAA,aAAa;AAChB,OANuC,CAAxC;AAOH;AAV8B,GAA3B,EAUC,QAVD,CAAR;AAWH,CAdD;;AAeA,eAAerB,cAAf","sourcesContent":["import * as React from 'react';\nimport { resizeColumn } from '../../actionCreators';\nimport defaultOptions from '../../defaultOptions';\nimport { getMinWidth, getMouseMove, getValidatedWidth, HeadCellResizeStateAction, } from '../../Utils/CellResizeUtils';\nimport { getEventListenerEffect } from '../../Utils/EffectUtils';\nvar HeadCellResize = function (props) {\n    var _a = props.column, key = _a.key, style = _a.style, dispatch = props.dispatch, currentWidth = props.currentWidth;\n    var minWidth = getMinWidth(style);\n    return (React.createElement(\"div\", { className: defaultOptions.css.theadCellResize, draggable: 'false', onMouseDown: function (mouseDownEvent) {\n            var startX = mouseDownEvent.screenX - mouseDownEvent.currentTarget.parentElement.offsetWidth;\n            var mouseMoveStop = getEventListenerEffect('mousemove', getMouseMove(currentWidth, minWidth, startX, dispatch));\n            var mouseUpStop = getEventListenerEffect('mouseup', function (event) {\n                var newWidth = getValidatedWidth(event.screenX - startX, minWidth);\n                dispatch(resizeColumn(key, newWidth));\n                dispatch({ type: HeadCellResizeStateAction, width: newWidth });\n                mouseUpStop();\n                mouseMoveStop();\n            });\n        } }, \"\\u00A0\"));\n};\nexport default HeadCellResize;"]},"metadata":{},"sourceType":"module"}