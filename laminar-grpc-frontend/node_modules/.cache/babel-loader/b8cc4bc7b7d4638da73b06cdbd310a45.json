{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar React = require('react');\n\nvar ReactRelayContext = require('./ReactRelayContext');\n\nvar ReactRelayQueryFetcher = require('./ReactRelayQueryFetcher');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar buildReactRelayContainer = require('./buildReactRelayContainer');\n\nvar getRootVariablesForFragments = require('./getRootVariablesForFragments');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('./ReactRelayContainerUtils'),\n    getComponentName = _require.getComponentName,\n    getContainerName = _require.getContainerName;\n\nvar _require2 = require('./RelayContext'),\n    assertRelayContext = _require2.assertRelayContext;\n\nvar _require3 = require('relay-runtime'),\n    ConnectionInterface = _require3.ConnectionInterface,\n    Observable = _require3.Observable,\n    createFragmentSpecResolver = _require3.createFragmentSpecResolver,\n    createOperationDescriptor = _require3.createOperationDescriptor,\n    getDataIDsFromObject = _require3.getDataIDsFromObject,\n    getRequest = _require3.getRequest,\n    getSelector = _require3.getSelector,\n    getVariablesFromObject = _require3.getVariablesFromObject,\n    isScalarAndEqual = _require3.isScalarAndEqual;\n\nvar FORWARD = 'forward';\n/**\n * Extends the functionality of RelayFragmentContainer by providing a mechanism\n * to load more data from a connection.\n *\n * # Configuring a PaginationContainer\n *\n * PaginationContainer accepts the standard FragmentContainer arguments and an\n * additional `connectionConfig` argument:\n *\n * - `Component`: the component to be wrapped/rendered.\n * - `fragments`: an object whose values are `graphql` fragments. The object\n *   keys determine the prop names by which fragment data is available.\n * - `connectionConfig`: an object that determines how to load more connection\n *   data. Details below.\n *\n * # Loading More Data\n *\n * Use `props.relay.hasMore()` to determine if there are more items to load.\n *\n * ```\n * hasMore(): boolean\n * ```\n *\n * Use `props.relay.isLoading()` to determine if a previous call to `loadMore()`\n * is still pending. This is convenient for avoiding duplicate load calls.\n *\n * ```\n * isLoading(): boolean\n * ```\n *\n * Use `props.relay.loadMore()` to load more items. This will return null if\n * there are no more items to fetch, otherwise it will fetch more items and\n * return a Disposable that can be used to cancel the fetch.\n *\n * `pageSize` should be the number of *additional* items to fetch (not the\n * total).\n *\n * ```\n * loadMore(pageSize: number, callback: ?(error: ?Error) => void): ?Disposable\n * ```\n *\n * A complete example:\n *\n * ```\n * class Foo extends React.Component {\n *   ...\n *   _onEndReached() {\n *     if (!this.props.relay.hasMore() || this.props.relay.isLoading()) {\n *       return;\n *     }\n *     this.props.relay.loadMore(10);\n *   }\n *   ...\n * }\n * ```\n *\n * # Connection Config\n *\n * Here's an example, followed by details of each config property:\n *\n * ```\n * ReactRelayPaginationContainer.createContainer(\n *   Component,\n *   {\n *     user: graphql`fragment FriendsFragment on User {\n *       friends(after: $afterCursor first: $count) @connection {\n *         edges { ... }\n *         pageInfo {\n *           startCursor\n *           endCursor\n *           hasNextPage\n *           hasPreviousPage\n *         }\n *       }\n *     }`,\n *   },\n *   {\n *     direction: 'forward',\n *     getConnectionFromProps(props) {\n *       return props.user && props.user.friends;\n *     },\n *     getFragmentVariables(vars, totalCount) {\n *       // The component presumably wants *all* edges, not just those after\n *       // the cursor, so notice that we don't set $afterCursor here.\n *       return {\n *         ...vars,\n *         count: totalCount,\n *       };\n *     },\n *     getVariables(props, {count, cursor}, fragmentVariables) {\n *       return {\n *         id: props.user.id,\n *         afterCursor: cursor,\n *         count,\n *       },\n *     },\n *     query: graphql`\n *       query FriendsQuery($id: ID!, $afterCursor: ID, $count: Int!) {\n *         node(id: $id) {\n *           ...FriendsFragment\n *         }\n *       }\n *     `,\n *   }\n * );\n * ```\n *\n * ## Config Properties\n *\n * - `direction`: Either \"forward\" to indicate forward pagination using\n *   after/first, or \"backward\" to indicate backward pagination using\n *   before/last.\n * - `getConnectionFromProps(props)`: PaginationContainer doesn't magically know\n *   which connection data you mean to fetch more of (a container might fetch\n *   multiple connections, but can only paginate one of them). This function is\n *   given the fragment props only (not full props), and should return the\n *   connection data. See the above example that returns the friends data via\n *   `props.user.friends`.\n * - `getFragmentVariables(previousVars, totalCount)`: Given the previous variables\n *   and the new total number of items, get the variables to use when reading\n *   your fragments. Typically this means setting whatever your local \"count\"\n *   variable is to the value of `totalCount`. See the example.\n * - `getVariables(props, {count, cursor})`: Get the variables to use when\n *   fetching the pagination `query`. You may determine the root object id from\n *   props (see the example that uses `props.user.id`) and may also set whatever\n *   variables you use for the after/first/before/last calls based on the count\n *   and cursor.\n * - `query`: A query to use when fetching more connection data. This should\n *   typically reference one of the container's fragment (as in the example)\n *   to ensure that all the necessary fields for sub-components are fetched.\n */\n\nfunction createGetConnectionFromProps(metadata) {\n  var path = metadata.path;\n  !path ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Unable to synthesize a ' + 'getConnectionFromProps function.') : invariant(false) : void 0;\n  return function (props) {\n    var data = props[metadata.fragmentName];\n\n    for (var i = 0; i < path.length; i++) {\n      if (!data || typeof data !== 'object') {\n        return null;\n      }\n\n      data = data[path[i]];\n    }\n\n    return data;\n  };\n}\n\nfunction createGetFragmentVariables(metadata) {\n  var countVariable = metadata.count;\n  !countVariable ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Unable to synthesize a ' + 'getFragmentVariables function.') : invariant(false) : void 0;\n  return function (prevVars, totalCount) {\n    return _objectSpread({}, prevVars, (0, _defineProperty2[\"default\"])({}, countVariable, totalCount));\n  };\n}\n\nfunction findConnectionMetadata(fragments) {\n  var foundConnectionMetadata = null;\n  var isRelayModern = false;\n\n  for (var fragmentName in fragments) {\n    var fragment = fragments[fragmentName];\n    var connectionMetadata = fragment.metadata && fragment.metadata.connection; // HACK: metadata is always set to `undefined` in classic. In modern, even\n    // if empty, it is set to null (never undefined). We use that knowlege to\n    // check if we're dealing with classic or modern\n\n    if (fragment.metadata !== undefined) {\n      isRelayModern = true;\n    }\n\n    if (connectionMetadata) {\n      !(connectionMetadata.length === 1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Only a single @connection is ' + 'supported, `%s` has %s.', fragmentName, connectionMetadata.length) : invariant(false) : void 0;\n      !!foundConnectionMetadata ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Only a single fragment with ' + '@connection is supported.') : invariant(false) : void 0;\n      foundConnectionMetadata = _objectSpread({}, connectionMetadata[0], {\n        fragmentName: fragmentName\n      });\n    }\n  }\n\n  !(!isRelayModern || foundConnectionMetadata !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: A @connection directive must be present.') : invariant(false) : void 0;\n  return foundConnectionMetadata || {};\n}\n\nfunction toObserver(observerOrCallback) {\n  return typeof observerOrCallback === 'function' ? {\n    error: observerOrCallback,\n    complete: observerOrCallback,\n    unsubscribe: function unsubscribe(subscription) {\n      typeof observerOrCallback === 'function' && observerOrCallback();\n    }\n  } : observerOrCallback || {};\n}\n\nfunction createContainerWithFragments(Component, fragments, connectionConfig) {\n  var _class, _temp;\n\n  var componentName = getComponentName(Component);\n  var containerName = getContainerName(Component);\n  var metadata = findConnectionMetadata(fragments);\n  var getConnectionFromProps = connectionConfig.getConnectionFromProps || createGetConnectionFromProps(metadata);\n  var direction = connectionConfig.direction || metadata.direction;\n  !direction ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Unable to infer direction of the ' + 'connection, possibly because both first and last are provided.') : invariant(false) : void 0;\n  var getFragmentVariables = connectionConfig.getFragmentVariables || createGetFragmentVariables(metadata);\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    (0, _inheritsLoose2[\"default\"])(_class, _React$Component);\n\n    function _class(props) {\n      var _this;\n\n      _this = _React$Component.call(this, props) || this;\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleFragmentDataUpdate\", function () {\n        _this.setState({\n          data: _this._resolver.resolve()\n        });\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_hasMore\", function () {\n        var connectionData = _this._getConnectionData();\n\n        return !!(connectionData && connectionData.hasMore && connectionData.cursor);\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_isLoading\", function () {\n        return !!_this._refetchSubscription;\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_refetchConnection\", function (totalCount, observerOrCallback, refetchVariables) {\n        if (!_this._canFetchPage('refetchConnection')) {\n          return {\n            dispose: function dispose() {}\n          };\n        }\n\n        _this._refetchVariables = refetchVariables;\n        var paginatingVariables = {\n          count: totalCount,\n          cursor: null,\n          totalCount: totalCount\n        };\n\n        var fetch = _this._fetchPage(paginatingVariables, toObserver(observerOrCallback), {\n          force: true\n        });\n\n        return {\n          dispose: fetch.unsubscribe\n        };\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_loadMore\", function (pageSize, observerOrCallback, options) {\n        if (!_this._canFetchPage('loadMore')) {\n          return {\n            dispose: function dispose() {}\n          };\n        }\n\n        var observer = toObserver(observerOrCallback);\n\n        var connectionData = _this._getConnectionData();\n\n        if (!connectionData) {\n          Observable.create(function (sink) {\n            return sink.complete();\n          }).subscribe(observer);\n          return null;\n        }\n\n        var totalCount = connectionData.edgeCount + pageSize;\n\n        if (options && options.force) {\n          return _this._refetchConnection(totalCount, observerOrCallback);\n        }\n\n        var _ConnectionInterface$ = ConnectionInterface.get(),\n            END_CURSOR = _ConnectionInterface$.END_CURSOR,\n            START_CURSOR = _ConnectionInterface$.START_CURSOR;\n\n        var cursor = connectionData.cursor;\n        process.env.NODE_ENV !== \"production\" ? warning(cursor != null && cursor !== '', 'ReactRelayPaginationContainer: Cannot `loadMore` without valid `%s` (got `%s`)', direction === FORWARD ? END_CURSOR : START_CURSOR, cursor) : void 0;\n        var paginatingVariables = {\n          count: pageSize,\n          cursor: cursor,\n          totalCount: totalCount\n        };\n\n        var fetch = _this._fetchPage(paginatingVariables, observer, options);\n\n        return {\n          dispose: fetch.unsubscribe\n        };\n      });\n      var relayContext = assertRelayContext(props.__relayContext);\n      _this._isARequestInFlight = false;\n      _this._refetchSubscription = null;\n      _this._refetchVariables = null;\n      _this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, _this._handleFragmentDataUpdate);\n      _this.state = {\n        data: _this._resolver.resolve(),\n        prevContext: relayContext,\n        contextForChildren: relayContext,\n        relayProp: _this._buildRelayProp(relayContext)\n      };\n      _this._isUnmounted = false;\n      _this._hasFetched = false;\n      return _this;\n    }\n    /**\n     * When new props are received, read data for the new props and subscribe\n     * for updates. Props may be the same in which case previous data and\n     * subscriptions can be reused.\n     */\n\n\n    var _proto = _class.prototype;\n\n    _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n      var relayContext = assertRelayContext(nextProps.__relayContext);\n      var prevIDs = getDataIDsFromObject(fragments, this.props);\n      var nextIDs = getDataIDsFromObject(fragments, nextProps);\n      var prevRootVariables = getRootVariablesForFragments(fragments, this.props);\n      var nextRootVariables = getRootVariablesForFragments(fragments, nextProps); // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n\n      if (relayContext.environment !== this.state.prevContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {\n        this._cleanup(); // Child containers rely on context.relay being mutated (for gDSFP).\n\n\n        this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, this._handleFragmentDataUpdate);\n        this.setState({\n          prevContext: relayContext,\n          contextForChildren: relayContext,\n          relayProp: this._buildRelayProp(relayContext)\n        });\n      } else if (!this._hasFetched) {\n        this._resolver.setProps(nextProps);\n      }\n\n      var data = this._resolver.resolve();\n\n      if (data !== this.state.data) {\n        this.setState({\n          data: data\n        });\n      }\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this._isUnmounted = true;\n\n      this._cleanup();\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      // Short-circuit if any Relay-related data has changed\n      if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp) {\n        return true;\n      } // Otherwise, for convenience short-circuit if all non-Relay props\n      // are scalar and equal\n\n\n      var keys = Object.keys(nextProps);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var _key = keys[ii];\n\n        if (_key === '__relayContext') {\n          if (nextState.prevContext.environment !== this.state.prevContext.environment) {\n            return true;\n          }\n        } else {\n          if (!fragments.hasOwnProperty(_key) && !isScalarAndEqual(nextProps[_key], this.props[_key])) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _proto._buildRelayProp = function _buildRelayProp(relayContext) {\n      return {\n        hasMore: this._hasMore,\n        isLoading: this._isLoading,\n        loadMore: this._loadMore,\n        refetchConnection: this._refetchConnection,\n        environment: relayContext.environment\n      };\n    }\n    /**\n     * Render new data for the existing props/context.\n     */\n    ;\n\n    _proto._getConnectionData = function _getConnectionData() {\n      // Extract connection data and verify there are more edges to fetch\n      var _this$props = this.props,\n          _ = _this$props.componentRef,\n          restProps = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props, [\"componentRef\"]);\n\n      var props = _objectSpread({}, restProps, {}, this.state.data);\n\n      var connectionData = getConnectionFromProps(props);\n\n      if (connectionData == null) {\n        return null;\n      }\n\n      var _ConnectionInterface$2 = ConnectionInterface.get(),\n          EDGES = _ConnectionInterface$2.EDGES,\n          PAGE_INFO = _ConnectionInterface$2.PAGE_INFO,\n          HAS_NEXT_PAGE = _ConnectionInterface$2.HAS_NEXT_PAGE,\n          HAS_PREV_PAGE = _ConnectionInterface$2.HAS_PREV_PAGE,\n          END_CURSOR = _ConnectionInterface$2.END_CURSOR,\n          START_CURSOR = _ConnectionInterface$2.START_CURSOR;\n\n      !(typeof connectionData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return `null` or a plain object with %s and %s properties, got `%s`.', componentName, EDGES, PAGE_INFO, connectionData) : invariant(false) : void 0;\n      var edges = connectionData[EDGES];\n      var pageInfo = connectionData[PAGE_INFO];\n\n      if (edges == null || pageInfo == null) {\n        return null;\n      }\n\n      !Array.isArray(edges) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return an object with %s: Array, got `%s`.', componentName, EDGES, edges) : invariant(false) : void 0;\n      !(typeof pageInfo === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return an object with %s: Object, got `%s`.', componentName, PAGE_INFO, pageInfo) : invariant(false) : void 0;\n      var hasMore = direction === FORWARD ? pageInfo[HAS_NEXT_PAGE] : pageInfo[HAS_PREV_PAGE];\n      var cursor = direction === FORWARD ? pageInfo[END_CURSOR] : pageInfo[START_CURSOR];\n\n      if (typeof hasMore !== 'boolean' || edges.length !== 0 && typeof cursor === 'undefined') {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'ReactRelayPaginationContainer: Cannot paginate without %s fields in `%s`. ' + 'Be sure to fetch %s (got `%s`) and %s (got `%s`).', PAGE_INFO, componentName, direction === FORWARD ? HAS_NEXT_PAGE : HAS_PREV_PAGE, hasMore, direction === FORWARD ? END_CURSOR : START_CURSOR, cursor) : void 0;\n        return null;\n      }\n\n      return {\n        cursor: cursor,\n        edgeCount: edges.length,\n        hasMore: hasMore\n      };\n    };\n\n    _proto._getQueryFetcher = function _getQueryFetcher() {\n      if (!this._queryFetcher) {\n        this._queryFetcher = new ReactRelayQueryFetcher();\n      }\n\n      return this._queryFetcher;\n    };\n\n    _proto._canFetchPage = function _canFetchPage(method) {\n      if (this._isUnmounted) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'ReactRelayPaginationContainer: Unexpected call of `%s` ' + 'on unmounted container `%s`. It looks like some instances ' + 'of your container still trying to fetch data but they already ' + 'unmounted. Please make sure you clear all timers, intervals, async ' + 'calls, etc that may trigger `%s` call.', method, containerName, method) : void 0;\n        return false;\n      }\n\n      return true;\n    };\n\n    _proto._fetchPage = function _fetchPage(paginatingVariables, observer, options) {\n      var _this2 = this;\n\n      var _assertRelayContext = assertRelayContext(this.props.__relayContext),\n          environment = _assertRelayContext.environment;\n\n      var _this$props2 = this.props,\n          _ = _this$props2.componentRef,\n          __relayContext = _this$props2.__relayContext,\n          restProps = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props2, [\"componentRef\", \"__relayContext\"]);\n\n      var props = _objectSpread({}, restProps, {}, this.state.data);\n\n      var fragmentVariables;\n      var rootVariables = getRootVariablesForFragments(fragments, restProps);\n      fragmentVariables = getVariablesFromObject(fragments, restProps);\n      fragmentVariables = _objectSpread({}, rootVariables, {}, fragmentVariables, {}, this._refetchVariables);\n      var fetchVariables = connectionConfig.getVariables(props, {\n        count: paginatingVariables.count,\n        cursor: paginatingVariables.cursor\n      }, fragmentVariables);\n      !(typeof fetchVariables === 'object' && fetchVariables !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Expected `getVariables()` to ' + 'return an object, got `%s` in `%s`.', fetchVariables, componentName) : invariant(false) : void 0;\n      fetchVariables = _objectSpread({}, fetchVariables, {}, this._refetchVariables);\n      fragmentVariables = _objectSpread({}, fetchVariables, {}, fragmentVariables);\n      var cacheConfig = options ? {\n        force: !!options.force\n      } : undefined;\n\n      if (cacheConfig != null && (options === null || options === void 0 ? void 0 : options.metadata) != null) {\n        cacheConfig.metadata = options === null || options === void 0 ? void 0 : options.metadata;\n      }\n\n      var request = getRequest(connectionConfig.query);\n      var operation = createOperationDescriptor(request, fetchVariables);\n      var refetchSubscription = null;\n\n      if (this._refetchSubscription) {\n        this._refetchSubscription.unsubscribe();\n      }\n\n      this._hasFetched = true;\n\n      var onNext = function onNext(payload, complete) {\n        var prevData = _this2._resolver.resolve();\n\n        _this2._resolver.setVariables(getFragmentVariables(fragmentVariables, paginatingVariables.totalCount), operation.request.node);\n\n        var nextData = _this2._resolver.resolve(); // Workaround slightly different handling for connection in different\n        // core implementations:\n        // - Classic core requires the count to be explicitly incremented\n        // - Modern core automatically appends new items, updating the count\n        //   isn't required to see new data.\n        //\n        // `setState` is only required if changing the variables would change the\n        // resolved data.\n        // TODO #14894725: remove PaginationContainer equal check\n\n\n        if (!areEqual(prevData, nextData)) {\n          _this2.setState({\n            data: nextData,\n            contextForChildren: {\n              environment: _this2.props.__relayContext.environment\n            }\n          }, complete);\n        } else {\n          complete();\n        }\n      };\n\n      var cleanup = function cleanup() {\n        if (_this2._refetchSubscription === refetchSubscription) {\n          _this2._refetchSubscription = null;\n          _this2._isARequestInFlight = false;\n        }\n      };\n\n      this._isARequestInFlight = true;\n      refetchSubscription = this._getQueryFetcher().execute({\n        environment: environment,\n        operation: operation,\n        cacheConfig: cacheConfig,\n        preservePreviousReferences: true\n      }).mergeMap(function (payload) {\n        return Observable.create(function (sink) {\n          onNext(payload, function () {\n            sink.next(); // pass void to public observer's `next`\n\n            sink.complete();\n          });\n        });\n      }) // use do instead of finally so that observer's `complete` fires after cleanup\n      [\"do\"]({\n        error: cleanup,\n        complete: cleanup,\n        unsubscribe: cleanup\n      }).subscribe(observer || {});\n      this._refetchSubscription = this._isARequestInFlight ? refetchSubscription : null;\n      return refetchSubscription;\n    };\n\n    _proto._cleanup = function _cleanup() {\n      this._resolver.dispose();\n\n      this._refetchVariables = null;\n      this._hasFetched = false;\n\n      if (this._refetchSubscription) {\n        this._refetchSubscription.unsubscribe();\n\n        this._refetchSubscription = null;\n        this._isARequestInFlight = false;\n      }\n\n      if (this._queryFetcher) {\n        this._queryFetcher.dispose();\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props3 = this.props,\n          componentRef = _this$props3.componentRef,\n          __relayContext = _this$props3.__relayContext,\n          props = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props3, [\"componentRef\", \"__relayContext\"]);\n      return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {\n        value: this.state.contextForChildren\n      }, /*#__PURE__*/React.createElement(Component, (0, _extends2[\"default\"])({}, props, this.state.data, {\n        ref: componentRef,\n        relay: this.state.relayProp\n      })));\n    };\n\n    return _class;\n  }(React.Component), (0, _defineProperty2[\"default\"])(_class, \"displayName\", containerName), _temp;\n}\n/**\n * Wrap the basic `createContainer()` function with logic to adapt to the\n * `context.relay.environment` in which it is rendered. Specifically, the\n * extraction of the environment-specific version of fragments in the\n * `fragmentSpec` is memoized once per environment, rather than once per\n * instance of the container constructed/rendered.\n */\n\n\nfunction createContainer(Component, fragmentSpec, connectionConfig) {\n  return buildReactRelayContainer(Component, fragmentSpec, function (ComponentClass, fragments) {\n    return createContainerWithFragments(ComponentClass, fragments, connectionConfig);\n  });\n}\n\nmodule.exports = {\n  createContainer: createContainer\n};","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/react-relay/lib/ReactRelayPaginationContainer.js"],"names":["_interopRequireDefault","require","_extends2","_objectWithoutPropertiesLoose2","_assertThisInitialized2","_inheritsLoose2","_defineProperty2","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","React","ReactRelayContext","ReactRelayQueryFetcher","areEqual","buildReactRelayContainer","getRootVariablesForFragments","invariant","warning","_require","getComponentName","getContainerName","_require2","assertRelayContext","_require3","ConnectionInterface","Observable","createFragmentSpecResolver","createOperationDescriptor","getDataIDsFromObject","getRequest","getSelector","getVariablesFromObject","isScalarAndEqual","FORWARD","createGetConnectionFromProps","metadata","path","process","env","NODE_ENV","props","data","fragmentName","createGetFragmentVariables","countVariable","count","prevVars","totalCount","findConnectionMetadata","fragments","foundConnectionMetadata","isRelayModern","fragment","connectionMetadata","connection","undefined","toObserver","observerOrCallback","error","complete","unsubscribe","subscription","createContainerWithFragments","Component","connectionConfig","_class","_temp","componentName","containerName","getConnectionFromProps","direction","getFragmentVariables","_React$Component","_this","call","setState","_resolver","resolve","connectionData","_getConnectionData","hasMore","cursor","_refetchSubscription","refetchVariables","_canFetchPage","dispose","_refetchVariables","paginatingVariables","fetch","_fetchPage","force","pageSize","options","observer","create","sink","subscribe","edgeCount","_refetchConnection","_ConnectionInterface$","get","END_CURSOR","START_CURSOR","relayContext","__relayContext","_isARequestInFlight","_handleFragmentDataUpdate","state","prevContext","contextForChildren","relayProp","_buildRelayProp","_isUnmounted","_hasFetched","_proto","prototype","UNSAFE_componentWillReceiveProps","nextProps","prevIDs","nextIDs","prevRootVariables","nextRootVariables","environment","_cleanup","setProps","componentWillUnmount","shouldComponentUpdate","nextState","ii","_key","hasOwnProperty","_hasMore","isLoading","_isLoading","loadMore","_loadMore","refetchConnection","_this$props","_","componentRef","restProps","_ConnectionInterface$2","EDGES","PAGE_INFO","HAS_NEXT_PAGE","HAS_PREV_PAGE","edges","pageInfo","Array","isArray","_getQueryFetcher","_queryFetcher","method","_this2","_assertRelayContext","_this$props2","fragmentVariables","rootVariables","fetchVariables","getVariables","cacheConfig","request","query","operation","refetchSubscription","onNext","payload","prevData","setVariables","node","nextData","cleanup","execute","preservePreviousReferences","mergeMap","next","render","_this$props3","createElement","Provider","value","ref","relay","createContainer","fragmentSpec","ComponentClass","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar React = require('react');\n\nvar ReactRelayContext = require('./ReactRelayContext');\n\nvar ReactRelayQueryFetcher = require('./ReactRelayQueryFetcher');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar buildReactRelayContainer = require('./buildReactRelayContainer');\n\nvar getRootVariablesForFragments = require('./getRootVariablesForFragments');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('./ReactRelayContainerUtils'),\n    getComponentName = _require.getComponentName,\n    getContainerName = _require.getContainerName;\n\nvar _require2 = require('./RelayContext'),\n    assertRelayContext = _require2.assertRelayContext;\n\nvar _require3 = require('relay-runtime'),\n    ConnectionInterface = _require3.ConnectionInterface,\n    Observable = _require3.Observable,\n    createFragmentSpecResolver = _require3.createFragmentSpecResolver,\n    createOperationDescriptor = _require3.createOperationDescriptor,\n    getDataIDsFromObject = _require3.getDataIDsFromObject,\n    getRequest = _require3.getRequest,\n    getSelector = _require3.getSelector,\n    getVariablesFromObject = _require3.getVariablesFromObject,\n    isScalarAndEqual = _require3.isScalarAndEqual;\n\nvar FORWARD = 'forward';\n\n/**\n * Extends the functionality of RelayFragmentContainer by providing a mechanism\n * to load more data from a connection.\n *\n * # Configuring a PaginationContainer\n *\n * PaginationContainer accepts the standard FragmentContainer arguments and an\n * additional `connectionConfig` argument:\n *\n * - `Component`: the component to be wrapped/rendered.\n * - `fragments`: an object whose values are `graphql` fragments. The object\n *   keys determine the prop names by which fragment data is available.\n * - `connectionConfig`: an object that determines how to load more connection\n *   data. Details below.\n *\n * # Loading More Data\n *\n * Use `props.relay.hasMore()` to determine if there are more items to load.\n *\n * ```\n * hasMore(): boolean\n * ```\n *\n * Use `props.relay.isLoading()` to determine if a previous call to `loadMore()`\n * is still pending. This is convenient for avoiding duplicate load calls.\n *\n * ```\n * isLoading(): boolean\n * ```\n *\n * Use `props.relay.loadMore()` to load more items. This will return null if\n * there are no more items to fetch, otherwise it will fetch more items and\n * return a Disposable that can be used to cancel the fetch.\n *\n * `pageSize` should be the number of *additional* items to fetch (not the\n * total).\n *\n * ```\n * loadMore(pageSize: number, callback: ?(error: ?Error) => void): ?Disposable\n * ```\n *\n * A complete example:\n *\n * ```\n * class Foo extends React.Component {\n *   ...\n *   _onEndReached() {\n *     if (!this.props.relay.hasMore() || this.props.relay.isLoading()) {\n *       return;\n *     }\n *     this.props.relay.loadMore(10);\n *   }\n *   ...\n * }\n * ```\n *\n * # Connection Config\n *\n * Here's an example, followed by details of each config property:\n *\n * ```\n * ReactRelayPaginationContainer.createContainer(\n *   Component,\n *   {\n *     user: graphql`fragment FriendsFragment on User {\n *       friends(after: $afterCursor first: $count) @connection {\n *         edges { ... }\n *         pageInfo {\n *           startCursor\n *           endCursor\n *           hasNextPage\n *           hasPreviousPage\n *         }\n *       }\n *     }`,\n *   },\n *   {\n *     direction: 'forward',\n *     getConnectionFromProps(props) {\n *       return props.user && props.user.friends;\n *     },\n *     getFragmentVariables(vars, totalCount) {\n *       // The component presumably wants *all* edges, not just those after\n *       // the cursor, so notice that we don't set $afterCursor here.\n *       return {\n *         ...vars,\n *         count: totalCount,\n *       };\n *     },\n *     getVariables(props, {count, cursor}, fragmentVariables) {\n *       return {\n *         id: props.user.id,\n *         afterCursor: cursor,\n *         count,\n *       },\n *     },\n *     query: graphql`\n *       query FriendsQuery($id: ID!, $afterCursor: ID, $count: Int!) {\n *         node(id: $id) {\n *           ...FriendsFragment\n *         }\n *       }\n *     `,\n *   }\n * );\n * ```\n *\n * ## Config Properties\n *\n * - `direction`: Either \"forward\" to indicate forward pagination using\n *   after/first, or \"backward\" to indicate backward pagination using\n *   before/last.\n * - `getConnectionFromProps(props)`: PaginationContainer doesn't magically know\n *   which connection data you mean to fetch more of (a container might fetch\n *   multiple connections, but can only paginate one of them). This function is\n *   given the fragment props only (not full props), and should return the\n *   connection data. See the above example that returns the friends data via\n *   `props.user.friends`.\n * - `getFragmentVariables(previousVars, totalCount)`: Given the previous variables\n *   and the new total number of items, get the variables to use when reading\n *   your fragments. Typically this means setting whatever your local \"count\"\n *   variable is to the value of `totalCount`. See the example.\n * - `getVariables(props, {count, cursor})`: Get the variables to use when\n *   fetching the pagination `query`. You may determine the root object id from\n *   props (see the example that uses `props.user.id`) and may also set whatever\n *   variables you use for the after/first/before/last calls based on the count\n *   and cursor.\n * - `query`: A query to use when fetching more connection data. This should\n *   typically reference one of the container's fragment (as in the example)\n *   to ensure that all the necessary fields for sub-components are fetched.\n */\nfunction createGetConnectionFromProps(metadata) {\n  var path = metadata.path;\n  !path ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Unable to synthesize a ' + 'getConnectionFromProps function.') : invariant(false) : void 0;\n  return function (props) {\n    var data = props[metadata.fragmentName];\n\n    for (var i = 0; i < path.length; i++) {\n      if (!data || typeof data !== 'object') {\n        return null;\n      }\n\n      data = data[path[i]];\n    }\n\n    return data;\n  };\n}\n\nfunction createGetFragmentVariables(metadata) {\n  var countVariable = metadata.count;\n  !countVariable ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Unable to synthesize a ' + 'getFragmentVariables function.') : invariant(false) : void 0;\n  return function (prevVars, totalCount) {\n    return _objectSpread({}, prevVars, (0, _defineProperty2[\"default\"])({}, countVariable, totalCount));\n  };\n}\n\nfunction findConnectionMetadata(fragments) {\n  var foundConnectionMetadata = null;\n  var isRelayModern = false;\n\n  for (var fragmentName in fragments) {\n    var fragment = fragments[fragmentName];\n    var connectionMetadata = fragment.metadata && fragment.metadata.connection; // HACK: metadata is always set to `undefined` in classic. In modern, even\n    // if empty, it is set to null (never undefined). We use that knowlege to\n    // check if we're dealing with classic or modern\n\n    if (fragment.metadata !== undefined) {\n      isRelayModern = true;\n    }\n\n    if (connectionMetadata) {\n      !(connectionMetadata.length === 1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Only a single @connection is ' + 'supported, `%s` has %s.', fragmentName, connectionMetadata.length) : invariant(false) : void 0;\n      !!foundConnectionMetadata ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Only a single fragment with ' + '@connection is supported.') : invariant(false) : void 0;\n      foundConnectionMetadata = _objectSpread({}, connectionMetadata[0], {\n        fragmentName: fragmentName\n      });\n    }\n  }\n\n  !(!isRelayModern || foundConnectionMetadata !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: A @connection directive must be present.') : invariant(false) : void 0;\n  return foundConnectionMetadata || {};\n}\n\nfunction toObserver(observerOrCallback) {\n  return typeof observerOrCallback === 'function' ? {\n    error: observerOrCallback,\n    complete: observerOrCallback,\n    unsubscribe: function unsubscribe(subscription) {\n      typeof observerOrCallback === 'function' && observerOrCallback();\n    }\n  } : observerOrCallback || {};\n}\n\nfunction createContainerWithFragments(Component, fragments, connectionConfig) {\n  var _class, _temp;\n\n  var componentName = getComponentName(Component);\n  var containerName = getContainerName(Component);\n  var metadata = findConnectionMetadata(fragments);\n  var getConnectionFromProps = connectionConfig.getConnectionFromProps || createGetConnectionFromProps(metadata);\n  var direction = connectionConfig.direction || metadata.direction;\n  !direction ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Unable to infer direction of the ' + 'connection, possibly because both first and last are provided.') : invariant(false) : void 0;\n  var getFragmentVariables = connectionConfig.getFragmentVariables || createGetFragmentVariables(metadata);\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    (0, _inheritsLoose2[\"default\"])(_class, _React$Component);\n\n    function _class(props) {\n      var _this;\n\n      _this = _React$Component.call(this, props) || this;\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleFragmentDataUpdate\", function () {\n        _this.setState({\n          data: _this._resolver.resolve()\n        });\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_hasMore\", function () {\n        var connectionData = _this._getConnectionData();\n\n        return !!(connectionData && connectionData.hasMore && connectionData.cursor);\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_isLoading\", function () {\n        return !!_this._refetchSubscription;\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_refetchConnection\", function (totalCount, observerOrCallback, refetchVariables) {\n        if (!_this._canFetchPage('refetchConnection')) {\n          return {\n            dispose: function dispose() {}\n          };\n        }\n\n        _this._refetchVariables = refetchVariables;\n        var paginatingVariables = {\n          count: totalCount,\n          cursor: null,\n          totalCount: totalCount\n        };\n\n        var fetch = _this._fetchPage(paginatingVariables, toObserver(observerOrCallback), {\n          force: true\n        });\n\n        return {\n          dispose: fetch.unsubscribe\n        };\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_loadMore\", function (pageSize, observerOrCallback, options) {\n        if (!_this._canFetchPage('loadMore')) {\n          return {\n            dispose: function dispose() {}\n          };\n        }\n\n        var observer = toObserver(observerOrCallback);\n\n        var connectionData = _this._getConnectionData();\n\n        if (!connectionData) {\n          Observable.create(function (sink) {\n            return sink.complete();\n          }).subscribe(observer);\n          return null;\n        }\n\n        var totalCount = connectionData.edgeCount + pageSize;\n\n        if (options && options.force) {\n          return _this._refetchConnection(totalCount, observerOrCallback);\n        }\n\n        var _ConnectionInterface$ = ConnectionInterface.get(),\n            END_CURSOR = _ConnectionInterface$.END_CURSOR,\n            START_CURSOR = _ConnectionInterface$.START_CURSOR;\n\n        var cursor = connectionData.cursor;\n        process.env.NODE_ENV !== \"production\" ? warning(cursor != null && cursor !== '', 'ReactRelayPaginationContainer: Cannot `loadMore` without valid `%s` (got `%s`)', direction === FORWARD ? END_CURSOR : START_CURSOR, cursor) : void 0;\n        var paginatingVariables = {\n          count: pageSize,\n          cursor: cursor,\n          totalCount: totalCount\n        };\n\n        var fetch = _this._fetchPage(paginatingVariables, observer, options);\n\n        return {\n          dispose: fetch.unsubscribe\n        };\n      });\n      var relayContext = assertRelayContext(props.__relayContext);\n      _this._isARequestInFlight = false;\n      _this._refetchSubscription = null;\n      _this._refetchVariables = null;\n      _this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, _this._handleFragmentDataUpdate);\n      _this.state = {\n        data: _this._resolver.resolve(),\n        prevContext: relayContext,\n        contextForChildren: relayContext,\n        relayProp: _this._buildRelayProp(relayContext)\n      };\n      _this._isUnmounted = false;\n      _this._hasFetched = false;\n      return _this;\n    }\n    /**\n     * When new props are received, read data for the new props and subscribe\n     * for updates. Props may be the same in which case previous data and\n     * subscriptions can be reused.\n     */\n\n\n    var _proto = _class.prototype;\n\n    _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n      var relayContext = assertRelayContext(nextProps.__relayContext);\n      var prevIDs = getDataIDsFromObject(fragments, this.props);\n      var nextIDs = getDataIDsFromObject(fragments, nextProps);\n      var prevRootVariables = getRootVariablesForFragments(fragments, this.props);\n      var nextRootVariables = getRootVariablesForFragments(fragments, nextProps); // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n\n      if (relayContext.environment !== this.state.prevContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {\n        this._cleanup(); // Child containers rely on context.relay being mutated (for gDSFP).\n\n\n        this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, this._handleFragmentDataUpdate);\n        this.setState({\n          prevContext: relayContext,\n          contextForChildren: relayContext,\n          relayProp: this._buildRelayProp(relayContext)\n        });\n      } else if (!this._hasFetched) {\n        this._resolver.setProps(nextProps);\n      }\n\n      var data = this._resolver.resolve();\n\n      if (data !== this.state.data) {\n        this.setState({\n          data: data\n        });\n      }\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this._isUnmounted = true;\n\n      this._cleanup();\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      // Short-circuit if any Relay-related data has changed\n      if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp) {\n        return true;\n      } // Otherwise, for convenience short-circuit if all non-Relay props\n      // are scalar and equal\n\n\n      var keys = Object.keys(nextProps);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var _key = keys[ii];\n\n        if (_key === '__relayContext') {\n          if (nextState.prevContext.environment !== this.state.prevContext.environment) {\n            return true;\n          }\n        } else {\n          if (!fragments.hasOwnProperty(_key) && !isScalarAndEqual(nextProps[_key], this.props[_key])) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _proto._buildRelayProp = function _buildRelayProp(relayContext) {\n      return {\n        hasMore: this._hasMore,\n        isLoading: this._isLoading,\n        loadMore: this._loadMore,\n        refetchConnection: this._refetchConnection,\n        environment: relayContext.environment\n      };\n    }\n    /**\n     * Render new data for the existing props/context.\n     */\n    ;\n\n    _proto._getConnectionData = function _getConnectionData() {\n      // Extract connection data and verify there are more edges to fetch\n      var _this$props = this.props,\n          _ = _this$props.componentRef,\n          restProps = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props, [\"componentRef\"]);\n\n      var props = _objectSpread({}, restProps, {}, this.state.data);\n\n      var connectionData = getConnectionFromProps(props);\n\n      if (connectionData == null) {\n        return null;\n      }\n\n      var _ConnectionInterface$2 = ConnectionInterface.get(),\n          EDGES = _ConnectionInterface$2.EDGES,\n          PAGE_INFO = _ConnectionInterface$2.PAGE_INFO,\n          HAS_NEXT_PAGE = _ConnectionInterface$2.HAS_NEXT_PAGE,\n          HAS_PREV_PAGE = _ConnectionInterface$2.HAS_PREV_PAGE,\n          END_CURSOR = _ConnectionInterface$2.END_CURSOR,\n          START_CURSOR = _ConnectionInterface$2.START_CURSOR;\n\n      !(typeof connectionData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return `null` or a plain object with %s and %s properties, got `%s`.', componentName, EDGES, PAGE_INFO, connectionData) : invariant(false) : void 0;\n      var edges = connectionData[EDGES];\n      var pageInfo = connectionData[PAGE_INFO];\n\n      if (edges == null || pageInfo == null) {\n        return null;\n      }\n\n      !Array.isArray(edges) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return an object with %s: Array, got `%s`.', componentName, EDGES, edges) : invariant(false) : void 0;\n      !(typeof pageInfo === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`' + 'to return an object with %s: Object, got `%s`.', componentName, PAGE_INFO, pageInfo) : invariant(false) : void 0;\n      var hasMore = direction === FORWARD ? pageInfo[HAS_NEXT_PAGE] : pageInfo[HAS_PREV_PAGE];\n      var cursor = direction === FORWARD ? pageInfo[END_CURSOR] : pageInfo[START_CURSOR];\n\n      if (typeof hasMore !== 'boolean' || edges.length !== 0 && typeof cursor === 'undefined') {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'ReactRelayPaginationContainer: Cannot paginate without %s fields in `%s`. ' + 'Be sure to fetch %s (got `%s`) and %s (got `%s`).', PAGE_INFO, componentName, direction === FORWARD ? HAS_NEXT_PAGE : HAS_PREV_PAGE, hasMore, direction === FORWARD ? END_CURSOR : START_CURSOR, cursor) : void 0;\n        return null;\n      }\n\n      return {\n        cursor: cursor,\n        edgeCount: edges.length,\n        hasMore: hasMore\n      };\n    };\n\n    _proto._getQueryFetcher = function _getQueryFetcher() {\n      if (!this._queryFetcher) {\n        this._queryFetcher = new ReactRelayQueryFetcher();\n      }\n\n      return this._queryFetcher;\n    };\n\n    _proto._canFetchPage = function _canFetchPage(method) {\n      if (this._isUnmounted) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'ReactRelayPaginationContainer: Unexpected call of `%s` ' + 'on unmounted container `%s`. It looks like some instances ' + 'of your container still trying to fetch data but they already ' + 'unmounted. Please make sure you clear all timers, intervals, async ' + 'calls, etc that may trigger `%s` call.', method, containerName, method) : void 0;\n        return false;\n      }\n\n      return true;\n    };\n\n    _proto._fetchPage = function _fetchPage(paginatingVariables, observer, options) {\n      var _this2 = this;\n\n      var _assertRelayContext = assertRelayContext(this.props.__relayContext),\n          environment = _assertRelayContext.environment;\n\n      var _this$props2 = this.props,\n          _ = _this$props2.componentRef,\n          __relayContext = _this$props2.__relayContext,\n          restProps = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props2, [\"componentRef\", \"__relayContext\"]);\n\n      var props = _objectSpread({}, restProps, {}, this.state.data);\n\n      var fragmentVariables;\n      var rootVariables = getRootVariablesForFragments(fragments, restProps);\n      fragmentVariables = getVariablesFromObject(fragments, restProps);\n      fragmentVariables = _objectSpread({}, rootVariables, {}, fragmentVariables, {}, this._refetchVariables);\n      var fetchVariables = connectionConfig.getVariables(props, {\n        count: paginatingVariables.count,\n        cursor: paginatingVariables.cursor\n      }, fragmentVariables);\n      !(typeof fetchVariables === 'object' && fetchVariables !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ReactRelayPaginationContainer: Expected `getVariables()` to ' + 'return an object, got `%s` in `%s`.', fetchVariables, componentName) : invariant(false) : void 0;\n      fetchVariables = _objectSpread({}, fetchVariables, {}, this._refetchVariables);\n      fragmentVariables = _objectSpread({}, fetchVariables, {}, fragmentVariables);\n      var cacheConfig = options ? {\n        force: !!options.force\n      } : undefined;\n\n      if (cacheConfig != null && (options === null || options === void 0 ? void 0 : options.metadata) != null) {\n        cacheConfig.metadata = options === null || options === void 0 ? void 0 : options.metadata;\n      }\n\n      var request = getRequest(connectionConfig.query);\n      var operation = createOperationDescriptor(request, fetchVariables);\n      var refetchSubscription = null;\n\n      if (this._refetchSubscription) {\n        this._refetchSubscription.unsubscribe();\n      }\n\n      this._hasFetched = true;\n\n      var onNext = function onNext(payload, complete) {\n        var prevData = _this2._resolver.resolve();\n\n        _this2._resolver.setVariables(getFragmentVariables(fragmentVariables, paginatingVariables.totalCount), operation.request.node);\n\n        var nextData = _this2._resolver.resolve(); // Workaround slightly different handling for connection in different\n        // core implementations:\n        // - Classic core requires the count to be explicitly incremented\n        // - Modern core automatically appends new items, updating the count\n        //   isn't required to see new data.\n        //\n        // `setState` is only required if changing the variables would change the\n        // resolved data.\n        // TODO #14894725: remove PaginationContainer equal check\n\n\n        if (!areEqual(prevData, nextData)) {\n          _this2.setState({\n            data: nextData,\n            contextForChildren: {\n              environment: _this2.props.__relayContext.environment\n            }\n          }, complete);\n        } else {\n          complete();\n        }\n      };\n\n      var cleanup = function cleanup() {\n        if (_this2._refetchSubscription === refetchSubscription) {\n          _this2._refetchSubscription = null;\n          _this2._isARequestInFlight = false;\n        }\n      };\n\n      this._isARequestInFlight = true;\n      refetchSubscription = this._getQueryFetcher().execute({\n        environment: environment,\n        operation: operation,\n        cacheConfig: cacheConfig,\n        preservePreviousReferences: true\n      }).mergeMap(function (payload) {\n        return Observable.create(function (sink) {\n          onNext(payload, function () {\n            sink.next(); // pass void to public observer's `next`\n\n            sink.complete();\n          });\n        });\n      }) // use do instead of finally so that observer's `complete` fires after cleanup\n      [\"do\"]({\n        error: cleanup,\n        complete: cleanup,\n        unsubscribe: cleanup\n      }).subscribe(observer || {});\n      this._refetchSubscription = this._isARequestInFlight ? refetchSubscription : null;\n      return refetchSubscription;\n    };\n\n    _proto._cleanup = function _cleanup() {\n      this._resolver.dispose();\n\n      this._refetchVariables = null;\n      this._hasFetched = false;\n\n      if (this._refetchSubscription) {\n        this._refetchSubscription.unsubscribe();\n\n        this._refetchSubscription = null;\n        this._isARequestInFlight = false;\n      }\n\n      if (this._queryFetcher) {\n        this._queryFetcher.dispose();\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props3 = this.props,\n          componentRef = _this$props3.componentRef,\n          __relayContext = _this$props3.__relayContext,\n          props = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props3, [\"componentRef\", \"__relayContext\"]);\n      return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {\n        value: this.state.contextForChildren\n      }, /*#__PURE__*/React.createElement(Component, (0, _extends2[\"default\"])({}, props, this.state.data, {\n        ref: componentRef,\n        relay: this.state.relayProp\n      })));\n    };\n\n    return _class;\n  }(React.Component), (0, _defineProperty2[\"default\"])(_class, \"displayName\", containerName), _temp;\n}\n/**\n * Wrap the basic `createContainer()` function with logic to adapt to the\n * `context.relay.environment` in which it is rendered. Specifically, the\n * extraction of the environment-specific version of fragments in the\n * `fragmentSpec` is memoized once per environment, rather than once per\n * instance of the container constructed/rendered.\n */\n\n\nfunction createContainer(Component, fragmentSpec, connectionConfig) {\n  return buildReactRelayContainer(Component, fragmentSpec, function (ComponentClass, fragments) {\n    return createContainerWithFragments(ComponentClass, fragments, connectionConfig);\n  });\n}\n\nmodule.exports = {\n  createContainer: createContainer\n};"]},"metadata":{},"sourceType":"script"}