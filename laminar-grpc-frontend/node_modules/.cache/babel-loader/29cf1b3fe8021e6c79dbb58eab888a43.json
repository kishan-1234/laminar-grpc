{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport { newRowId } from '../const';\nimport { ActionType } from '../enums';\nimport { kaPropsUtils } from '../utils';\nimport { getCopyOfArrayAndInsertOrReplaceItem } from '../Utils/ArrayUtils';\nimport { addItemToEditableCells, removeItemFromEditableCells } from '../Utils/CellUtils';\nimport { getValueByField, replaceValue } from '../Utils/DataUtils';\nimport { getExpandedGroups, updateExpandedGroups } from '../Utils/GroupUtils';\nimport { getSortedColumns } from '../Utils/HeadRowUtils';\nimport { prepareTableOptions } from '../Utils/PropsUtils';\n\nvar addColumnsToRowEditableCells = function (editableCells, columns, rowKeyValue) {\n  var newEditableCells = __spreadArrays(editableCells);\n\n  columns.forEach(function (column) {\n    if (column.isEditable !== false && !newEditableCells.some(function (e) {\n      return e.columnKey === column.key && e.rowKeyValue === rowKeyValue;\n    })) {\n      newEditableCells.push({\n        columnKey: column.key,\n        rowKeyValue: rowKeyValue\n      });\n    }\n  });\n  return newEditableCells;\n};\n\nvar kaReducer = function (props, action) {\n  var columns = props.columns,\n      _a = props.data,\n      data = _a === void 0 ? [] : _a,\n      _b = props.detailsRows,\n      detailsRows = _b === void 0 ? [] : _b,\n      _c = props.editableCells,\n      editableCells = _c === void 0 ? [] : _c,\n      groupsExpanded = props.groupsExpanded,\n      loading = props.loading,\n      paging = props.paging,\n      rowKeyField = props.rowKeyField,\n      _d = props.selectedRows,\n      selectedRows = _d === void 0 ? [] : _d,\n      validation = props.validation,\n      virtualScrolling = props.virtualScrolling;\n\n  switch (action.type) {\n    case ActionType.ReorderRows:\n      {\n        var movedRow_1 = data.find(function (d) {\n          return getValueByField(d, rowKeyField) === action.rowKeyValue;\n        });\n        var newData = data.filter(function (d) {\n          return getValueByField(d, rowKeyField) !== getValueByField(movedRow_1, rowKeyField);\n        });\n        var targetRowIndex = data.findIndex(function (d) {\n          return getValueByField(d, rowKeyField) === action.targetRowKeyValue;\n        });\n        newData.splice(targetRowIndex, 0, movedRow_1);\n        return __assign(__assign({}, props), {\n          data: newData\n        });\n      }\n\n    case ActionType.ResizeColumn:\n      {\n        var columnKey_1 = action.columnKey,\n            width = action.width;\n        var column = columns.find(function (c) {\n          return c.key === columnKey_1;\n        });\n\n        var newColumn = __assign(__assign({}, column), {\n          style: __assign(__assign({}, column.style), {\n            width: width\n          })\n        });\n\n        var newColumns = getCopyOfArrayAndInsertOrReplaceItem(newColumn, 'key', columns);\n        return __assign(__assign({}, props), {\n          columns: newColumns\n        });\n      }\n\n    case ActionType.UpdatePageIndex:\n      {\n        return __assign(__assign({}, props), {\n          paging: __assign(__assign({}, paging), {\n            pageIndex: action.pageIndex\n          })\n        });\n      }\n\n    case ActionType.UpdatePagesCount:\n      {\n        return __assign(__assign({}, props), {\n          paging: __assign(__assign({}, paging), {\n            pagesCount: action.pagesCount\n          })\n        });\n      }\n\n    case ActionType.HideLoading:\n      {\n        return __assign(__assign({}, props), {\n          loading: __assign(__assign({}, loading), {\n            enabled: false\n          })\n        });\n      }\n\n    case ActionType.ShowLoading:\n      {\n        var newLoading = __assign(__assign({}, loading), {\n          enabled: true\n        });\n\n        if (action.text !== undefined) {\n          newLoading.text = action.text;\n        }\n\n        return __assign(__assign({}, props), {\n          loading: newLoading\n        });\n      }\n\n    case ActionType.ShowDetailsRow:\n      {\n        var newDetailsRows = __spreadArrays(detailsRows);\n\n        newDetailsRows.push(action.rowKeyValue);\n        return __assign(__assign({}, props), {\n          detailsRows: newDetailsRows\n        });\n      }\n\n    case ActionType.HideDetailsRow:\n      {\n        var newDetailsRows = detailsRows.filter(function (row) {\n          return row !== action.rowKeyValue;\n        });\n        return __assign(__assign({}, props), {\n          detailsRows: newDetailsRows\n        });\n      }\n\n    case ActionType.OpenEditor:\n      {\n        var newEditableCells = addItemToEditableCells(action, editableCells);\n        return __assign(__assign({}, props), {\n          editableCells: newEditableCells\n        });\n      }\n\n    case ActionType.CloseEditor:\n      {\n        var newEditableCells = removeItemFromEditableCells(action, editableCells);\n        return __assign(__assign({}, props), {\n          editableCells: newEditableCells\n        });\n      }\n\n    case ActionType.UpdateFilterRowValue:\n      {\n        var column = columns.find(function (c) {\n          return c.key === action.columnKey;\n        });\n\n        var newColumn = __assign(__assign({}, column), {\n          filterRowValue: action.filterRowValue\n        });\n\n        var newColumns = getCopyOfArrayAndInsertOrReplaceItem(newColumn, 'key', columns);\n        return __assign(__assign({}, props), {\n          columns: newColumns\n        });\n      }\n\n    case ActionType.UpdateFilterRowOperator:\n      {\n        var column = columns.find(function (c) {\n          return c.key === action.columnKey;\n        });\n\n        var newColumn = __assign(__assign({}, column), {\n          filterRowOperator: action.filterRowOperator\n        });\n\n        var newColumns = getCopyOfArrayAndInsertOrReplaceItem(newColumn, 'key', columns);\n        return __assign(__assign({}, props), {\n          columns: newColumns\n        });\n      }\n\n    case ActionType.UpdateEditorValue:\n      {\n        var newEditableCells = __spreadArrays(editableCells);\n\n        var editableCellIndex = newEditableCells.findIndex(function (c) {\n          return c.columnKey === action.columnKey && c.rowKeyValue === action.rowKeyValue;\n        });\n\n        var editableCell = __assign(__assign({}, newEditableCells[editableCellIndex]), {\n          editorValue: action.value\n        });\n\n        newEditableCells[editableCellIndex] = editableCell;\n        return __assign(__assign({}, props), {\n          editableCells: newEditableCells\n        });\n      }\n\n    case ActionType.UpdateCellValue:\n      {\n        var row = data.find(function (d) {\n          return getValueByField(d, rowKeyField) === action.rowKeyValue;\n        });\n        var column = columns.find(function (c) {\n          return c.key === action.columnKey;\n        });\n        var updatedRowData = replaceValue(row, column, action.value);\n        var newData = getCopyOfArrayAndInsertOrReplaceItem(updatedRowData, rowKeyField, data);\n        return __assign(__assign({}, props), {\n          data: newData\n        });\n      }\n\n    case ActionType.DeleteRow:\n      {\n        var newData = data.filter(function (d) {\n          return getValueByField(d, rowKeyField) !== action.rowKeyValue;\n        });\n        return __assign(__assign({}, props), {\n          data: newData\n        });\n      }\n\n    case ActionType.SelectAllRows:\n      {\n        var newSelectedRows = data.map(function (d) {\n          return getValueByField(d, rowKeyField);\n        });\n        return __assign(__assign({}, props), {\n          selectedRows: newSelectedRows\n        });\n      }\n\n    case ActionType.Search:\n      {\n        return __assign(__assign({}, props), {\n          searchText: action.searchText\n        });\n      }\n\n    case ActionType.SelectSingleRow:\n      {\n        var newSelectedRows = [action.rowKeyValue];\n        return __assign(__assign({}, props), {\n          selectedRows: newSelectedRows\n        });\n      }\n\n    case ActionType.DeselectAllRows:\n      return __assign(__assign({}, props), {\n        selectedRows: []\n      });\n\n    case ActionType.SelectRow:\n      return __assign(__assign({}, props), {\n        selectedRows: __spreadArrays(selectedRows, [action.rowKeyValue])\n      });\n\n    case ActionType.SelectRowsRange:\n      {\n        var rowKeyValueTo_1 = action.rowKeyValueTo;\n\n        if (rowKeyValueTo_1) {\n          var shownData = kaPropsUtils.getData(props);\n          var rowKeyValueToIndex = shownData.findIndex(function (d) {\n            return getValueByField(d, rowKeyField) === rowKeyValueTo_1;\n          });\n          var rowKeyValueFromIndex = shownData.findIndex(function (d) {\n            return getValueByField(d, rowKeyField) === action.rowKeyValueFrom;\n          });\n\n          if (rowKeyValueToIndex != null && rowKeyValueFromIndex != null) {\n            var _e = rowKeyValueToIndex > rowKeyValueFromIndex ? [rowKeyValueFromIndex, rowKeyValueToIndex] : [rowKeyValueToIndex, rowKeyValueFromIndex],\n                start = _e[0],\n                end = _e[1];\n\n            var rowsToSelect = [];\n\n            for (var i = start; i <= end; i++) {\n              var value = getValueByField(shownData[i], rowKeyField);\n\n              if (!selectedRows.includes(value)) {\n                rowsToSelect.push(value);\n              }\n            }\n\n            return __assign(__assign({}, props), {\n              selectedRows: __spreadArrays(selectedRows, rowsToSelect)\n            });\n          }\n        }\n\n        return __assign(__assign({}, props), {\n          selectedRows: __spreadArrays(selectedRows, [action.rowKeyValueFrom])\n        });\n      }\n\n    case ActionType.DeselectRow:\n      {\n        var newSelectedRows = __spreadArrays(selectedRows).filter(function (s) {\n          return s !== action.rowKeyValue;\n        });\n\n        return __assign(__assign({}, props), {\n          selectedRows: newSelectedRows\n        });\n      }\n\n    case ActionType.UpdateSortDirection:\n      var sortedColumns = getSortedColumns(columns, action.columnKey);\n      return __assign(__assign({}, props), {\n        columns: sortedColumns\n      });\n\n    case ActionType.UpdateVirtualScrolling:\n      return __assign(__assign({}, props), {\n        virtualScrolling: action.virtualScrolling\n      });\n\n    case ActionType.UpdateData:\n      return __assign(__assign({}, props), {\n        data: action.data\n      });\n\n    case ActionType.ScrollTable:\n      if (virtualScrolling) {\n        var scrollTop = action.scrollTop;\n        return __assign(__assign({}, props), {\n          virtualScrolling: __assign(__assign({}, virtualScrolling), {\n            scrollTop: scrollTop\n          })\n        });\n      }\n\n      break;\n\n    case ActionType.UpdateGroupsExpanded:\n      {\n        var currentGroupsExpanded = groupsExpanded;\n\n        if (!currentGroupsExpanded) {\n          var preparedOptions = prepareTableOptions(props);\n          currentGroupsExpanded = getExpandedGroups(preparedOptions.groupedData);\n        }\n\n        var newGroupsExpanded = updateExpandedGroups(currentGroupsExpanded, action.groupKey);\n        return __assign(__assign({}, props), {\n          groupsExpanded: newGroupsExpanded\n        });\n      }\n\n    case ActionType.ShowNewRow:\n    case ActionType.OpenRowEditors:\n      {\n        var rowKeyValue = action.type === ActionType.ShowNewRow ? newRowId : action.rowKeyValue;\n        var newEditableCells = addColumnsToRowEditableCells(editableCells, columns, rowKeyValue);\n        return __assign(__assign({}, props), {\n          editableCells: newEditableCells\n        });\n      }\n\n    case ActionType.HideNewRow:\n    case ActionType.CloseRowEditors:\n      {\n        var rowKeyValue_1 = action.type === ActionType.HideNewRow ? newRowId : action.rowKeyValue;\n        var newEditableCells = editableCells.filter(function (e) {\n          return e.rowKeyValue !== rowKeyValue_1;\n        });\n        return __assign(__assign({}, props), {\n          editableCells: newEditableCells\n        });\n      }\n\n    case ActionType.SaveRowEditors:\n    case ActionType.SaveNewRow:\n      {\n        var isNewRow_1 = action.type === ActionType.SaveNewRow;\n        var rowEditorKeyValue_1 = isNewRow_1 ? newRowId : action.rowKeyValue;\n        var updatedRowData_1 = data.find(function (d) {\n          return getValueByField(d, rowKeyField) === rowEditorKeyValue_1;\n        });\n        var rowEditableCells = editableCells.filter(function (editableCell) {\n          return editableCell.rowKeyValue === rowEditorKeyValue_1 && (isNewRow_1 || editableCell.hasOwnProperty('editorValue'));\n        });\n\n        if (action.validate) {\n          var validationPassed_1 = true;\n          rowEditableCells.forEach(function (cell) {\n            var column = columns.find(function (c) {\n              return c.key === cell.columnKey;\n            });\n            cell.validationMessage = validation && validation({\n              column: column,\n              value: cell.editorValue,\n              rowData: updatedRowData_1\n            });\n            validationPassed_1 = validationPassed_1 && !cell.validationMessage;\n          });\n\n          if (!validationPassed_1) {\n            return __assign(__assign({}, props), {\n              editableCells: __spreadArrays(editableCells)\n            });\n          }\n        }\n\n        var newEditableCells = editableCells.filter(function (e) {\n          return e.rowKeyValue !== rowEditorKeyValue_1;\n        });\n        rowEditableCells.forEach(function (cell) {\n          var column = columns.find(function (c) {\n            return c.key === cell.columnKey;\n          });\n          updatedRowData_1 = replaceValue(updatedRowData_1, column, cell.editorValue);\n        });\n        var newData = void 0;\n\n        if (isNewRow_1) {\n          updatedRowData_1[rowKeyField] = action.rowKeyValue;\n          newData = __spreadArrays([updatedRowData_1], data);\n        } else {\n          newData = getCopyOfArrayAndInsertOrReplaceItem(updatedRowData_1, rowKeyField, data);\n        }\n\n        return __assign(__assign({}, props), {\n          data: newData,\n          editableCells: newEditableCells\n        });\n      }\n\n    case ActionType.UpdateRow:\n      {\n        var newData = getCopyOfArrayAndInsertOrReplaceItem(action.rowData, rowKeyField, data);\n        return __assign(__assign({}, props), {\n          data: newData\n        });\n      }\n  }\n\n  return props;\n};\n\nexport { kaReducer };","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/ka-table/Reducers/kaReducer.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArrays","il","r","Array","k","a","j","jl","newRowId","ActionType","kaPropsUtils","getCopyOfArrayAndInsertOrReplaceItem","addItemToEditableCells","removeItemFromEditableCells","getValueByField","replaceValue","getExpandedGroups","updateExpandedGroups","getSortedColumns","prepareTableOptions","addColumnsToRowEditableCells","editableCells","columns","rowKeyValue","newEditableCells","forEach","column","isEditable","some","e","columnKey","key","push","kaReducer","props","action","_a","data","_b","detailsRows","_c","groupsExpanded","loading","paging","rowKeyField","_d","selectedRows","validation","virtualScrolling","type","ReorderRows","movedRow_1","find","d","newData","filter","targetRowIndex","findIndex","targetRowKeyValue","splice","ResizeColumn","columnKey_1","width","c","newColumn","style","newColumns","UpdatePageIndex","pageIndex","UpdatePagesCount","pagesCount","HideLoading","enabled","ShowLoading","newLoading","text","undefined","ShowDetailsRow","newDetailsRows","HideDetailsRow","row","OpenEditor","CloseEditor","UpdateFilterRowValue","filterRowValue","UpdateFilterRowOperator","filterRowOperator","UpdateEditorValue","editableCellIndex","editableCell","editorValue","value","UpdateCellValue","updatedRowData","DeleteRow","SelectAllRows","newSelectedRows","map","Search","searchText","SelectSingleRow","DeselectAllRows","SelectRow","SelectRowsRange","rowKeyValueTo_1","rowKeyValueTo","shownData","getData","rowKeyValueToIndex","rowKeyValueFromIndex","rowKeyValueFrom","_e","start","end","rowsToSelect","includes","DeselectRow","UpdateSortDirection","sortedColumns","UpdateVirtualScrolling","UpdateData","ScrollTable","scrollTop","UpdateGroupsExpanded","currentGroupsExpanded","preparedOptions","groupedData","newGroupsExpanded","groupKey","ShowNewRow","OpenRowEditors","HideNewRow","CloseRowEditors","rowKeyValue_1","SaveRowEditors","SaveNewRow","isNewRow_1","rowEditorKeyValue_1","updatedRowData_1","rowEditableCells","validate","validationPassed_1","cell","validationMessage","rowData","UpdateRow"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { newRowId } from '../const';\nimport { ActionType } from '../enums';\nimport { kaPropsUtils } from '../utils';\nimport { getCopyOfArrayAndInsertOrReplaceItem } from '../Utils/ArrayUtils';\nimport { addItemToEditableCells, removeItemFromEditableCells } from '../Utils/CellUtils';\nimport { getValueByField, replaceValue } from '../Utils/DataUtils';\nimport { getExpandedGroups, updateExpandedGroups } from '../Utils/GroupUtils';\nimport { getSortedColumns } from '../Utils/HeadRowUtils';\nimport { prepareTableOptions } from '../Utils/PropsUtils';\nvar addColumnsToRowEditableCells = function (editableCells, columns, rowKeyValue) {\n    var newEditableCells = __spreadArrays(editableCells);\n    columns.forEach(function (column) {\n        if (column.isEditable !== false\n            && !newEditableCells.some(function (e) { return e.columnKey === column.key && e.rowKeyValue === rowKeyValue; })) {\n            newEditableCells.push({\n                columnKey: column.key,\n                rowKeyValue: rowKeyValue\n            });\n        }\n    });\n    return newEditableCells;\n};\nvar kaReducer = function (props, action) {\n    var columns = props.columns, _a = props.data, data = _a === void 0 ? [] : _a, _b = props.detailsRows, detailsRows = _b === void 0 ? [] : _b, _c = props.editableCells, editableCells = _c === void 0 ? [] : _c, groupsExpanded = props.groupsExpanded, loading = props.loading, paging = props.paging, rowKeyField = props.rowKeyField, _d = props.selectedRows, selectedRows = _d === void 0 ? [] : _d, validation = props.validation, virtualScrolling = props.virtualScrolling;\n    switch (action.type) {\n        case ActionType.ReorderRows: {\n            var movedRow_1 = data.find(function (d) { return getValueByField(d, rowKeyField) === action.rowKeyValue; });\n            var newData = data.filter(function (d) { return getValueByField(d, rowKeyField) !== getValueByField(movedRow_1, rowKeyField); });\n            var targetRowIndex = data.findIndex(function (d) { return getValueByField(d, rowKeyField) === action.targetRowKeyValue; });\n            newData.splice(targetRowIndex, 0, movedRow_1);\n            return __assign(__assign({}, props), { data: newData });\n        }\n        case ActionType.ResizeColumn: {\n            var columnKey_1 = action.columnKey, width = action.width;\n            var column = columns.find(function (c) { return c.key === columnKey_1; });\n            var newColumn = __assign(__assign({}, column), { style: __assign(__assign({}, column.style), { width: width }) });\n            var newColumns = getCopyOfArrayAndInsertOrReplaceItem(newColumn, 'key', columns);\n            return __assign(__assign({}, props), { columns: newColumns });\n        }\n        case ActionType.UpdatePageIndex: {\n            return __assign(__assign({}, props), { paging: __assign(__assign({}, paging), { pageIndex: action.pageIndex }) });\n        }\n        case ActionType.UpdatePagesCount: {\n            return __assign(__assign({}, props), { paging: __assign(__assign({}, paging), { pagesCount: action.pagesCount }) });\n        }\n        case ActionType.HideLoading: {\n            return __assign(__assign({}, props), { loading: __assign(__assign({}, loading), { enabled: false }) });\n        }\n        case ActionType.ShowLoading: {\n            var newLoading = __assign(__assign({}, loading), { enabled: true });\n            if (action.text !== undefined) {\n                newLoading.text = action.text;\n            }\n            return __assign(__assign({}, props), { loading: newLoading });\n        }\n        case ActionType.ShowDetailsRow: {\n            var newDetailsRows = __spreadArrays(detailsRows);\n            newDetailsRows.push(action.rowKeyValue);\n            return __assign(__assign({}, props), { detailsRows: newDetailsRows });\n        }\n        case ActionType.HideDetailsRow: {\n            var newDetailsRows = detailsRows.filter(function (row) { return row !== action.rowKeyValue; });\n            return __assign(__assign({}, props), { detailsRows: newDetailsRows });\n        }\n        case ActionType.OpenEditor: {\n            var newEditableCells = addItemToEditableCells(action, editableCells);\n            return __assign(__assign({}, props), { editableCells: newEditableCells });\n        }\n        case ActionType.CloseEditor: {\n            var newEditableCells = removeItemFromEditableCells(action, editableCells);\n            return __assign(__assign({}, props), { editableCells: newEditableCells });\n        }\n        case ActionType.UpdateFilterRowValue: {\n            var column = columns.find(function (c) { return c.key === action.columnKey; });\n            var newColumn = __assign(__assign({}, column), { filterRowValue: action.filterRowValue });\n            var newColumns = getCopyOfArrayAndInsertOrReplaceItem(newColumn, 'key', columns);\n            return __assign(__assign({}, props), { columns: newColumns });\n        }\n        case ActionType.UpdateFilterRowOperator: {\n            var column = columns.find(function (c) { return c.key === action.columnKey; });\n            var newColumn = __assign(__assign({}, column), { filterRowOperator: action.filterRowOperator });\n            var newColumns = getCopyOfArrayAndInsertOrReplaceItem(newColumn, 'key', columns);\n            return __assign(__assign({}, props), { columns: newColumns });\n        }\n        case ActionType.UpdateEditorValue: {\n            var newEditableCells = __spreadArrays(editableCells);\n            var editableCellIndex = newEditableCells.findIndex(function (c) { return c.columnKey === action.columnKey && c.rowKeyValue === action.rowKeyValue; });\n            var editableCell = __assign(__assign({}, newEditableCells[editableCellIndex]), { editorValue: action.value });\n            newEditableCells[editableCellIndex] = editableCell;\n            return __assign(__assign({}, props), { editableCells: newEditableCells });\n        }\n        case ActionType.UpdateCellValue: {\n            var row = data.find(function (d) { return getValueByField(d, rowKeyField) === action.rowKeyValue; });\n            var column = columns.find(function (c) { return c.key === action.columnKey; });\n            var updatedRowData = replaceValue(row, column, action.value);\n            var newData = getCopyOfArrayAndInsertOrReplaceItem(updatedRowData, rowKeyField, data);\n            return __assign(__assign({}, props), { data: newData });\n        }\n        case ActionType.DeleteRow: {\n            var newData = data.filter(function (d) { return getValueByField(d, rowKeyField) !== action.rowKeyValue; });\n            return __assign(__assign({}, props), { data: newData });\n        }\n        case ActionType.SelectAllRows: {\n            var newSelectedRows = data.map(function (d) { return getValueByField(d, rowKeyField); });\n            return __assign(__assign({}, props), { selectedRows: newSelectedRows });\n        }\n        case ActionType.Search: {\n            return __assign(__assign({}, props), { searchText: action.searchText });\n        }\n        case ActionType.SelectSingleRow: {\n            var newSelectedRows = [action.rowKeyValue];\n            return __assign(__assign({}, props), { selectedRows: newSelectedRows });\n        }\n        case ActionType.DeselectAllRows:\n            return __assign(__assign({}, props), { selectedRows: [] });\n        case ActionType.SelectRow:\n            return __assign(__assign({}, props), { selectedRows: __spreadArrays(selectedRows, [action.rowKeyValue]) });\n        case ActionType.SelectRowsRange: {\n            var rowKeyValueTo_1 = action.rowKeyValueTo;\n            if (rowKeyValueTo_1) {\n                var shownData = kaPropsUtils.getData(props);\n                var rowKeyValueToIndex = shownData.findIndex(function (d) { return getValueByField(d, rowKeyField) === rowKeyValueTo_1; });\n                var rowKeyValueFromIndex = shownData.findIndex(function (d) { return getValueByField(d, rowKeyField) === action.rowKeyValueFrom; });\n                if (rowKeyValueToIndex != null && rowKeyValueFromIndex != null) {\n                    var _e = rowKeyValueToIndex > rowKeyValueFromIndex ? [rowKeyValueFromIndex, rowKeyValueToIndex] : [rowKeyValueToIndex, rowKeyValueFromIndex], start = _e[0], end = _e[1];\n                    var rowsToSelect = [];\n                    for (var i = start; i <= end; i++) {\n                        var value = getValueByField(shownData[i], rowKeyField);\n                        if (!selectedRows.includes(value)) {\n                            rowsToSelect.push(value);\n                        }\n                    }\n                    return __assign(__assign({}, props), { selectedRows: __spreadArrays(selectedRows, rowsToSelect) });\n                }\n            }\n            return __assign(__assign({}, props), { selectedRows: __spreadArrays(selectedRows, [action.rowKeyValueFrom]) });\n        }\n        case ActionType.DeselectRow: {\n            var newSelectedRows = __spreadArrays(selectedRows).filter(function (s) { return s !== action.rowKeyValue; });\n            return __assign(__assign({}, props), { selectedRows: newSelectedRows });\n        }\n        case ActionType.UpdateSortDirection:\n            var sortedColumns = getSortedColumns(columns, action.columnKey);\n            return __assign(__assign({}, props), { columns: sortedColumns });\n        case ActionType.UpdateVirtualScrolling:\n            return __assign(__assign({}, props), { virtualScrolling: action.virtualScrolling });\n        case ActionType.UpdateData:\n            return __assign(__assign({}, props), { data: action.data });\n        case ActionType.ScrollTable:\n            if (virtualScrolling) {\n                var scrollTop = action.scrollTop;\n                return __assign(__assign({}, props), { virtualScrolling: __assign(__assign({}, virtualScrolling), { scrollTop: scrollTop }) });\n            }\n            break;\n        case ActionType.UpdateGroupsExpanded: {\n            var currentGroupsExpanded = groupsExpanded;\n            if (!currentGroupsExpanded) {\n                var preparedOptions = prepareTableOptions(props);\n                currentGroupsExpanded = getExpandedGroups(preparedOptions.groupedData);\n            }\n            var newGroupsExpanded = updateExpandedGroups(currentGroupsExpanded, action.groupKey);\n            return __assign(__assign({}, props), { groupsExpanded: newGroupsExpanded });\n        }\n        case ActionType.ShowNewRow:\n        case ActionType.OpenRowEditors: {\n            var rowKeyValue = action.type === ActionType.ShowNewRow ? newRowId : action.rowKeyValue;\n            var newEditableCells = addColumnsToRowEditableCells(editableCells, columns, rowKeyValue);\n            return __assign(__assign({}, props), { editableCells: newEditableCells });\n        }\n        case ActionType.HideNewRow:\n        case ActionType.CloseRowEditors: {\n            var rowKeyValue_1 = action.type === ActionType.HideNewRow ? newRowId : action.rowKeyValue;\n            var newEditableCells = editableCells.filter(function (e) { return e.rowKeyValue !== rowKeyValue_1; });\n            return __assign(__assign({}, props), { editableCells: newEditableCells });\n        }\n        case ActionType.SaveRowEditors:\n        case ActionType.SaveNewRow: {\n            var isNewRow_1 = action.type === ActionType.SaveNewRow;\n            var rowEditorKeyValue_1 = isNewRow_1 ? newRowId : action.rowKeyValue;\n            var updatedRowData_1 = data.find(function (d) { return getValueByField(d, rowKeyField) === rowEditorKeyValue_1; });\n            var rowEditableCells = editableCells.filter(function (editableCell) { return editableCell.rowKeyValue === rowEditorKeyValue_1\n                && (isNewRow_1 || editableCell.hasOwnProperty('editorValue')); });\n            if (action.validate) {\n                var validationPassed_1 = true;\n                rowEditableCells.forEach(function (cell) {\n                    var column = columns.find(function (c) { return c.key === cell.columnKey; });\n                    cell.validationMessage = validation && validation({\n                        column: column,\n                        value: cell.editorValue,\n                        rowData: updatedRowData_1\n                    });\n                    validationPassed_1 = validationPassed_1 && !cell.validationMessage;\n                });\n                if (!validationPassed_1) {\n                    return __assign(__assign({}, props), { editableCells: __spreadArrays(editableCells) });\n                }\n            }\n            var newEditableCells = editableCells.filter(function (e) { return e.rowKeyValue !== rowEditorKeyValue_1; });\n            rowEditableCells.forEach(function (cell) {\n                var column = columns.find(function (c) { return c.key === cell.columnKey; });\n                updatedRowData_1 = replaceValue(updatedRowData_1, column, cell.editorValue);\n            });\n            var newData = void 0;\n            if (isNewRow_1) {\n                updatedRowData_1[rowKeyField] = action.rowKeyValue;\n                newData = __spreadArrays([updatedRowData_1], data);\n            }\n            else {\n                newData = getCopyOfArrayAndInsertOrReplaceItem(updatedRowData_1, rowKeyField, data);\n            }\n            return __assign(__assign({}, props), { data: newData, editableCells: newEditableCells });\n        }\n        case ActionType.UpdateRow: {\n            var newData = getCopyOfArrayAndInsertOrReplaceItem(action.rowData, rowKeyField, data);\n            return __assign(__assign({}, props), { data: newData });\n        }\n    }\n    return props;\n};\nexport { kaReducer, };"]},"metadata":{},"sourceType":"module"}