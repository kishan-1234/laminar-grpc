{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayDeclarativeMutationConfig = require('../mutations/RelayDeclarativeMutationConfig');\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('../query/GraphQLTag'),\n    getRequest = _require.getRequest;\n\nvar _require2 = require('../store/RelayModernOperationDescriptor'),\n    createOperationDescriptor = _require2.createOperationDescriptor;\n\nfunction requestSubscription(environment, config) {\n  var subscription = getRequest(config.subscription);\n\n  if (subscription.params.operationKind !== 'subscription') {\n    throw new Error('requestSubscription: Must use Subscription operation');\n  }\n\n  var configs = config.configs,\n      onCompleted = config.onCompleted,\n      onError = config.onError,\n      onNext = config.onNext,\n      variables = config.variables,\n      cacheConfig = config.cacheConfig;\n  var operation = createOperationDescriptor(subscription, variables);\n  process.env.NODE_ENV !== \"production\" ? warning(!(config.updater && configs), 'requestSubscription: Expected only one of `updater` and `configs` to be provided') : void 0;\n\n  var _ref = configs ? RelayDeclarativeMutationConfig.convert(configs, subscription, null\n  /* optimisticUpdater */\n  , config.updater) : config,\n      updater = _ref.updater;\n\n  var sub = environment.execute({\n    operation: operation,\n    updater: updater,\n    cacheConfig: cacheConfig\n  }).map(function () {\n    var data = environment.lookup(operation.fragment).data; // $FlowFixMe[incompatible-cast]\n\n    return data;\n  }).subscribe({\n    next: onNext,\n    error: onError,\n    complete: onCompleted\n  });\n  return {\n    dispose: sub.unsubscribe\n  };\n}\n\nmodule.exports = requestSubscription;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/relay-runtime/lib/subscription/requestSubscription.js"],"names":["RelayDeclarativeMutationConfig","require","warning","_require","getRequest","_require2","createOperationDescriptor","requestSubscription","environment","config","subscription","params","operationKind","Error","configs","onCompleted","onError","onNext","variables","cacheConfig","operation","process","env","NODE_ENV","updater","_ref","convert","sub","execute","map","data","lookup","fragment","subscribe","next","error","complete","dispose","unsubscribe","module","exports"],"mappings":"AAAA;;;;;;;;;AASA;AACA;;AAEA,IAAIA,8BAA8B,GAAGC,OAAO,CAAC,6CAAD,CAA5C;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAArB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,qBAAD,CAAtB;AAAA,IACIG,UAAU,GAAGD,QAAQ,CAACC,UAD1B;;AAGA,IAAIC,SAAS,GAAGJ,OAAO,CAAC,yCAAD,CAAvB;AAAA,IACIK,yBAAyB,GAAGD,SAAS,CAACC,yBAD1C;;AAGA,SAASC,mBAAT,CAA6BC,WAA7B,EAA0CC,MAA1C,EAAkD;AAChD,MAAIC,YAAY,GAAGN,UAAU,CAACK,MAAM,CAACC,YAAR,CAA7B;;AAEA,MAAIA,YAAY,CAACC,MAAb,CAAoBC,aAApB,KAAsC,cAA1C,EAA0D;AACxD,UAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,MAAIC,OAAO,GAAGL,MAAM,CAACK,OAArB;AAAA,MACIC,WAAW,GAAGN,MAAM,CAACM,WADzB;AAAA,MAEIC,OAAO,GAAGP,MAAM,CAACO,OAFrB;AAAA,MAGIC,MAAM,GAAGR,MAAM,CAACQ,MAHpB;AAAA,MAIIC,SAAS,GAAGT,MAAM,CAACS,SAJvB;AAAA,MAKIC,WAAW,GAAGV,MAAM,CAACU,WALzB;AAMA,MAAIC,SAAS,GAAGd,yBAAyB,CAACI,YAAD,EAAeQ,SAAf,CAAzC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCrB,OAAO,CAAC,EAAEO,MAAM,CAACe,OAAP,IAAkBV,OAApB,CAAD,EAA+B,kFAA/B,CAA/C,GAAoK,KAAK,CAAzK;;AAEA,MAAIW,IAAI,GAAGX,OAAO,GAAGd,8BAA8B,CAAC0B,OAA/B,CAAuCZ,OAAvC,EAAgDJ,YAAhD,EAA8D;AACnF;AADqB,IAEnBD,MAAM,CAACe,OAFY,CAAH,GAEEf,MAFpB;AAAA,MAGIe,OAAO,GAAGC,IAAI,CAACD,OAHnB;;AAKA,MAAIG,GAAG,GAAGnB,WAAW,CAACoB,OAAZ,CAAoB;AAC5BR,IAAAA,SAAS,EAAEA,SADiB;AAE5BI,IAAAA,OAAO,EAAEA,OAFmB;AAG5BL,IAAAA,WAAW,EAAEA;AAHe,GAApB,EAIPU,GAJO,CAIH,YAAY;AACjB,QAAIC,IAAI,GAAGtB,WAAW,CAACuB,MAAZ,CAAmBX,SAAS,CAACY,QAA7B,EAAuCF,IAAlD,CADiB,CACuC;;AAExD,WAAOA,IAAP;AACD,GARS,EAQPG,SARO,CAQG;AACXC,IAAAA,IAAI,EAAEjB,MADK;AAEXkB,IAAAA,KAAK,EAAEnB,OAFI;AAGXoB,IAAAA,QAAQ,EAAErB;AAHC,GARH,CAAV;AAaA,SAAO;AACLsB,IAAAA,OAAO,EAAEV,GAAG,CAACW;AADR,GAAP;AAGD;;AAEDC,MAAM,CAACC,OAAP,GAAiBjC,mBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayDeclarativeMutationConfig = require('../mutations/RelayDeclarativeMutationConfig');\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('../query/GraphQLTag'),\n    getRequest = _require.getRequest;\n\nvar _require2 = require('../store/RelayModernOperationDescriptor'),\n    createOperationDescriptor = _require2.createOperationDescriptor;\n\nfunction requestSubscription(environment, config) {\n  var subscription = getRequest(config.subscription);\n\n  if (subscription.params.operationKind !== 'subscription') {\n    throw new Error('requestSubscription: Must use Subscription operation');\n  }\n\n  var configs = config.configs,\n      onCompleted = config.onCompleted,\n      onError = config.onError,\n      onNext = config.onNext,\n      variables = config.variables,\n      cacheConfig = config.cacheConfig;\n  var operation = createOperationDescriptor(subscription, variables);\n  process.env.NODE_ENV !== \"production\" ? warning(!(config.updater && configs), 'requestSubscription: Expected only one of `updater` and `configs` to be provided') : void 0;\n\n  var _ref = configs ? RelayDeclarativeMutationConfig.convert(configs, subscription, null\n  /* optimisticUpdater */\n  , config.updater) : config,\n      updater = _ref.updater;\n\n  var sub = environment.execute({\n    operation: operation,\n    updater: updater,\n    cacheConfig: cacheConfig\n  }).map(function () {\n    var data = environment.lookup(operation.fragment).data; // $FlowFixMe[incompatible-cast]\n\n    return data;\n  }).subscribe({\n    next: onNext,\n    error: onError,\n    complete: onCompleted\n  });\n  return {\n    dispose: sub.unsubscribe\n  };\n}\n\nmodule.exports = requestSubscription;"]},"metadata":{},"sourceType":"script"}