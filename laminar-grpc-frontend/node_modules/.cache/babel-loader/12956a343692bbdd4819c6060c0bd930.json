{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport { getValueByColumn } from './DataUtils';\nvar groupMark = {};\nexport var updateExpandedGroups = function (groupsExpanded, groupKey) {\n  var newGroupsExpanded = groupsExpanded.filter(function (ge) {\n    return JSON.stringify(ge) !== JSON.stringify(groupKey);\n  });\n\n  if (newGroupsExpanded.length === groupsExpanded.length) {\n    newGroupsExpanded.push(groupKey);\n  }\n\n  return newGroupsExpanded;\n};\nexport var getExpandedGroups = function (groupedData) {\n  return groupedData.filter(function (g) {\n    return g.groupMark === groupMark;\n  }).map(function (g) {\n    return g.key;\n  });\n};\nexport var getGroupedData = function (data, groups, groupedColumns, groupsExpanded) {\n  var grouped = getGroupedStructure(data, groups, groupedColumns, 0, groupsExpanded);\n  return convertToFlat(grouped);\n};\nexport var convertToFlat = function (grouped, key) {\n  if (key === void 0) {\n    key = [];\n  }\n\n  var result = [];\n  grouped.forEach(function (value, groupValue) {\n    var groupKey = __spreadArrays(key);\n\n    groupKey.push(groupValue);\n    result.push({\n      groupMark: groupMark,\n      key: groupKey,\n      value: groupValue\n    });\n    result = __spreadArrays(result, Array.isArray(value) ? value : convertToFlat(value, groupKey));\n  });\n  return result;\n};\nexport var getGroupedStructure = function (data, groups, groupedColumns, expandedDeep, groupsExpanded) {\n  if (expandedDeep === void 0) {\n    expandedDeep = 0;\n  }\n\n  groups = __spreadArrays(groups);\n  var group = groups.shift();\n\n  if (group) {\n    var column_1 = groupedColumns && groupedColumns.find(function (g) {\n      return g.key === group.columnKey;\n    });\n\n    if (column_1) {\n      var grouped_1 = groupBy(data, function (item) {\n        return getValueByColumn(item, column_1);\n      });\n      grouped_1.forEach(function (value, key) {\n        var groupExpandedItems = groupsExpanded && groupsExpanded.filter(function (ge) {\n          return ge[expandedDeep] === key;\n        });\n        var isThisGroupExpanded = !groupExpandedItems || groupExpandedItems.some(function (ge) {\n          return ge.length === expandedDeep + 1;\n        });\n\n        if (isThisGroupExpanded) {\n          var newStructure = getGroupedStructure(value, groups, groupedColumns, expandedDeep + 1, groupExpandedItems && groupExpandedItems.filter(function (ge) {\n            return ge.length > expandedDeep + 1;\n          }));\n\n          if (newStructure) {\n            grouped_1.set(key, newStructure);\n          }\n        } else {\n          grouped_1.set(key, []);\n        }\n      });\n      return grouped_1;\n    }\n  }\n};\nexport var groupBy = function (data, keyGetter, isEmptyValue) {\n  if (isEmptyValue === void 0) {\n    isEmptyValue = false;\n  }\n\n  var map = new Map();\n  data.forEach(function (item) {\n    var key = keyGetter(item);\n\n    if (isEmptyValue) {\n      map.set(key, []);\n    } else {\n      var collection = map.get(key);\n\n      if (!collection) {\n        map.set(key, [item]);\n      } else {\n        collection.push(item);\n      }\n    }\n  });\n  return map;\n};\nexport var getGroupMark = function () {\n  return groupMark;\n};\nexport var getGroupText = function (value, column, format) {\n  return format ? format({\n    column: column,\n    value: value\n  }) : \"\" + (column && column.title ? column.title + ': ' : '') + value;\n};","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/ka-table/Utils/GroupUtils.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","getValueByColumn","groupMark","updateExpandedGroups","groupsExpanded","groupKey","newGroupsExpanded","filter","ge","JSON","stringify","push","getExpandedGroups","groupedData","g","map","key","getGroupedData","data","groups","groupedColumns","grouped","getGroupedStructure","convertToFlat","result","forEach","value","groupValue","isArray","expandedDeep","group","shift","column_1","find","columnKey","grouped_1","groupBy","item","groupExpandedItems","isThisGroupExpanded","some","newStructure","set","keyGetter","isEmptyValue","Map","collection","get","getGroupMark","getGroupText","column","format","title"],"mappings":"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","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { getValueByColumn } from './DataUtils';\nvar groupMark = {};\nexport var updateExpandedGroups = function (groupsExpanded, groupKey) {\n    var newGroupsExpanded = groupsExpanded.filter(function (ge) { return JSON.stringify(ge) !== JSON.stringify(groupKey); });\n    if (newGroupsExpanded.length === groupsExpanded.length) {\n        newGroupsExpanded.push(groupKey);\n    }\n    return newGroupsExpanded;\n};\nexport var getExpandedGroups = function (groupedData) {\n    return groupedData\n        .filter(function (g) { return g.groupMark === groupMark; })\n        .map(function (g) { return g.key; });\n};\nexport var getGroupedData = function (data, groups, groupedColumns, groupsExpanded) {\n    var grouped = getGroupedStructure(data, groups, groupedColumns, 0, groupsExpanded);\n    return convertToFlat(grouped);\n};\nexport var convertToFlat = function (grouped, key) {\n    if (key === void 0) { key = []; }\n    var result = [];\n    grouped.forEach(function (value, groupValue) {\n        var groupKey = __spreadArrays(key);\n        groupKey.push(groupValue);\n        result.push({ groupMark: groupMark, key: groupKey, value: groupValue });\n        result = __spreadArrays(result, (Array.isArray(value) ? value : convertToFlat(value, groupKey)));\n    });\n    return result;\n};\nexport var getGroupedStructure = function (data, groups, groupedColumns, expandedDeep, groupsExpanded) {\n    if (expandedDeep === void 0) { expandedDeep = 0; }\n    groups = __spreadArrays(groups);\n    var group = groups.shift();\n    if (group) {\n        var column_1 = groupedColumns && groupedColumns.find(function (g) { return g.key === group.columnKey; });\n        if (column_1) {\n            var grouped_1 = groupBy(data, function (item) { return getValueByColumn(item, column_1); });\n            grouped_1.forEach(function (value, key) {\n                var groupExpandedItems = groupsExpanded && groupsExpanded.filter(function (ge) { return ge[expandedDeep] === key; });\n                var isThisGroupExpanded = !groupExpandedItems\n                    || groupExpandedItems.some(function (ge) { return ge.length === expandedDeep + 1; });\n                if (isThisGroupExpanded) {\n                    var newStructure = getGroupedStructure(value, groups, groupedColumns, expandedDeep + 1, groupExpandedItems && groupExpandedItems.filter(function (ge) { return ge.length > expandedDeep + 1; }));\n                    if (newStructure) {\n                        grouped_1.set(key, newStructure);\n                    }\n                }\n                else {\n                    grouped_1.set(key, []);\n                }\n            });\n            return grouped_1;\n        }\n    }\n};\nexport var groupBy = function (data, keyGetter, isEmptyValue) {\n    if (isEmptyValue === void 0) { isEmptyValue = false; }\n    var map = new Map();\n    data.forEach(function (item) {\n        var key = keyGetter(item);\n        if (isEmptyValue) {\n            map.set(key, []);\n        }\n        else {\n            var collection = map.get(key);\n            if (!collection) {\n                map.set(key, [item]);\n            }\n            else {\n                collection.push(item);\n            }\n        }\n    });\n    return map;\n};\nexport var getGroupMark = function () { return groupMark; };\nexport var getGroupText = function (value, column, format) {\n    return format ? format({ column: column, value: value }) : \"\" + (column && column.title ? column.title + ': ' : '') + value;\n};"]},"metadata":{},"sourceType":"module"}