{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar warning = require(\"fbjs/lib/warning\");\n/**\n * Runtime function to correspond to the `graphql` tagged template function.\n * All calls to this function should be transformed by the plugin.\n */\n\n\nfunction graphql(strings) {\n  !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'graphql: Unexpected invocation at runtime. Either the Babel transform ' + 'was not set up, or it failed to identify this call site. Make sure it ' + 'is being used verbatim as `graphql`.') : invariant(false) : void 0;\n}\n\nfunction getNode(taggedNode) {\n  var node = taggedNode;\n\n  if (typeof node === 'function') {\n    node = node();\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayGraphQLTag: node `%s` unexpectedly wrapped in a function.', node.kind === 'Fragment' ? node.name : node.operation.name) : void 0;\n  } else if (node[\"default\"]) {\n    // Support for languages that work (best) with ES6 modules, such as TypeScript.\n    node = node[\"default\"];\n  }\n\n  return node;\n}\n\nfunction isFragment(node) {\n  var fragment = getNode(node);\n  return typeof fragment === 'object' && fragment !== null && fragment.kind === RelayConcreteNode.FRAGMENT;\n}\n\nfunction isRequest(node) {\n  var request = getNode(node);\n  return typeof request === 'object' && request !== null && request.kind === RelayConcreteNode.REQUEST;\n}\n\nfunction isInlineDataFragment(node) {\n  var fragment = getNode(node);\n  return typeof fragment === 'object' && fragment !== null && fragment.kind === RelayConcreteNode.INLINE_DATA_FRAGMENT;\n}\n\nfunction getFragment(taggedNode) {\n  var fragment = getNode(taggedNode);\n  !isFragment(fragment) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'GraphQLTag: Expected a fragment, got `%s`.', JSON.stringify(fragment)) : invariant(false) : void 0;\n  return fragment;\n}\n\nfunction getPaginationFragment(taggedNode) {\n  var _fragment$metadata;\n\n  var fragment = getFragment(taggedNode);\n  var refetch = (_fragment$metadata = fragment.metadata) === null || _fragment$metadata === void 0 ? void 0 : _fragment$metadata.refetch;\n  var connection = refetch === null || refetch === void 0 ? void 0 : refetch.connection;\n\n  if (refetch === null || typeof refetch !== 'object' || connection === null || typeof connection !== 'object') {\n    return null;\n  }\n\n  return fragment;\n}\n\nfunction getRefetchableFragment(taggedNode) {\n  var _fragment$metadata2;\n\n  var fragment = getFragment(taggedNode);\n  var refetch = (_fragment$metadata2 = fragment.metadata) === null || _fragment$metadata2 === void 0 ? void 0 : _fragment$metadata2.refetch;\n\n  if (refetch === null || typeof refetch !== 'object') {\n    return null;\n  }\n\n  return fragment;\n}\n\nfunction getRequest(taggedNode) {\n  var request = getNode(taggedNode);\n  !isRequest(request) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'GraphQLTag: Expected a request, got `%s`.', JSON.stringify(request)) : invariant(false) : void 0;\n  return request;\n}\n\nfunction getInlineDataFragment(taggedNode) {\n  var fragment = getNode(taggedNode);\n  !isInlineDataFragment(fragment) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'GraphQLTag: Expected an inline data fragment, got `%s`.', JSON.stringify(fragment)) : invariant(false) : void 0;\n  return fragment;\n}\n\nmodule.exports = {\n  getFragment: getFragment,\n  getPaginationFragment: getPaginationFragment,\n  getRefetchableFragment: getRefetchableFragment,\n  getRequest: getRequest,\n  getInlineDataFragment: getInlineDataFragment,\n  graphql: graphql,\n  isFragment: isFragment,\n  isRequest: isRequest,\n  isInlineDataFragment: isInlineDataFragment\n};","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/relay-runtime/lib/query/GraphQLTag.js"],"names":["RelayConcreteNode","require","invariant","warning","graphql","strings","process","env","NODE_ENV","getNode","taggedNode","node","kind","name","operation","isFragment","fragment","FRAGMENT","isRequest","request","REQUEST","isInlineDataFragment","INLINE_DATA_FRAGMENT","getFragment","JSON","stringify","getPaginationFragment","_fragment$metadata","refetch","metadata","connection","getRefetchableFragment","_fragment$metadata2","getRequest","getInlineDataFragment","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar warning = require(\"fbjs/lib/warning\");\n\n/**\n * Runtime function to correspond to the `graphql` tagged template function.\n * All calls to this function should be transformed by the plugin.\n */\nfunction graphql(strings) {\n  !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'graphql: Unexpected invocation at runtime. Either the Babel transform ' + 'was not set up, or it failed to identify this call site. Make sure it ' + 'is being used verbatim as `graphql`.') : invariant(false) : void 0;\n}\n\nfunction getNode(taggedNode) {\n  var node = taggedNode;\n\n  if (typeof node === 'function') {\n    node = node();\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayGraphQLTag: node `%s` unexpectedly wrapped in a function.', node.kind === 'Fragment' ? node.name : node.operation.name) : void 0;\n  } else if (node[\"default\"]) {\n    // Support for languages that work (best) with ES6 modules, such as TypeScript.\n    node = node[\"default\"];\n  }\n\n  return node;\n}\n\nfunction isFragment(node) {\n  var fragment = getNode(node);\n  return typeof fragment === 'object' && fragment !== null && fragment.kind === RelayConcreteNode.FRAGMENT;\n}\n\nfunction isRequest(node) {\n  var request = getNode(node);\n  return typeof request === 'object' && request !== null && request.kind === RelayConcreteNode.REQUEST;\n}\n\nfunction isInlineDataFragment(node) {\n  var fragment = getNode(node);\n  return typeof fragment === 'object' && fragment !== null && fragment.kind === RelayConcreteNode.INLINE_DATA_FRAGMENT;\n}\n\nfunction getFragment(taggedNode) {\n  var fragment = getNode(taggedNode);\n  !isFragment(fragment) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'GraphQLTag: Expected a fragment, got `%s`.', JSON.stringify(fragment)) : invariant(false) : void 0;\n  return fragment;\n}\n\nfunction getPaginationFragment(taggedNode) {\n  var _fragment$metadata;\n\n  var fragment = getFragment(taggedNode);\n  var refetch = (_fragment$metadata = fragment.metadata) === null || _fragment$metadata === void 0 ? void 0 : _fragment$metadata.refetch;\n  var connection = refetch === null || refetch === void 0 ? void 0 : refetch.connection;\n\n  if (refetch === null || typeof refetch !== 'object' || connection === null || typeof connection !== 'object') {\n    return null;\n  }\n\n  return fragment;\n}\n\nfunction getRefetchableFragment(taggedNode) {\n  var _fragment$metadata2;\n\n  var fragment = getFragment(taggedNode);\n  var refetch = (_fragment$metadata2 = fragment.metadata) === null || _fragment$metadata2 === void 0 ? void 0 : _fragment$metadata2.refetch;\n\n  if (refetch === null || typeof refetch !== 'object') {\n    return null;\n  }\n\n  return fragment;\n}\n\nfunction getRequest(taggedNode) {\n  var request = getNode(taggedNode);\n  !isRequest(request) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'GraphQLTag: Expected a request, got `%s`.', JSON.stringify(request)) : invariant(false) : void 0;\n  return request;\n}\n\nfunction getInlineDataFragment(taggedNode) {\n  var fragment = getNode(taggedNode);\n  !isInlineDataFragment(fragment) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'GraphQLTag: Expected an inline data fragment, got `%s`.', JSON.stringify(fragment)) : invariant(false) : void 0;\n  return fragment;\n}\n\nmodule.exports = {\n  getFragment: getFragment,\n  getPaginationFragment: getPaginationFragment,\n  getRefetchableFragment: getRefetchableFragment,\n  getRequest: getRequest,\n  getInlineDataFragment: getInlineDataFragment,\n  graphql: graphql,\n  isFragment: isFragment,\n  isRequest: isRequest,\n  isInlineDataFragment: isInlineDataFragment\n};"]},"metadata":{},"sourceType":"script"}