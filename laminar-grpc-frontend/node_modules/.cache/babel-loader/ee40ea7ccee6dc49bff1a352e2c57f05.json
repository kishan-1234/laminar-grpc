{"ast":null,"code":"import { updateCellValue } from '../actionCreators';\nimport { ActionType } from '../enums';\nimport { getCopyOfArrayAndAddItem } from './ArrayUtils';\nexport var isEditableCell = function (editingMode, column, rowEditableCells) {\n  if (column.isEditable !== undefined) {\n    return column.isEditable;\n  }\n\n  return !!rowEditableCells.find(function (c) {\n    return c.columnKey === column.key;\n  });\n};\nexport var getEditableCell = function (column, rowEditableCells) {\n  if (column.isEditable === false) {\n    return undefined;\n  }\n\n  return rowEditableCells.find(function (c) {\n    return c.columnKey === column.key;\n  });\n};\nexport var addItemToEditableCells = function (item, editableCells) {\n  return getCopyOfArrayAndAddItem(item, editableCells);\n};\nexport var getCellEditorDispatchHandler = function (dispatch) {\n  return function (action) {\n    if (action.type === ActionType.UpdateEditorValue) {\n      dispatch(updateCellValue(action.rowKeyValue, action.columnKey, action.value));\n    } else {\n      dispatch(action);\n    }\n  };\n};\nexport var removeItemFromEditableCells = function (item, editableCells) {\n  return editableCells.filter(function (c) {\n    return c.columnKey !== item.columnKey || c.rowKeyValue !== item.rowKeyValue;\n  });\n};","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/ka-table/Utils/CellUtils.js"],"names":["updateCellValue","ActionType","getCopyOfArrayAndAddItem","isEditableCell","editingMode","column","rowEditableCells","isEditable","undefined","find","c","columnKey","key","getEditableCell","addItemToEditableCells","item","editableCells","getCellEditorDispatchHandler","dispatch","action","type","UpdateEditorValue","rowKeyValue","value","removeItemFromEditableCells","filter"],"mappings":"AAAA,SAASA,eAAT,QAAgC,mBAAhC;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,wBAAT,QAAyC,cAAzC;AACA,OAAO,IAAIC,cAAc,GAAG,UAAUC,WAAV,EAAuBC,MAAvB,EAA+BC,gBAA/B,EAAiD;AACzE,MAAID,MAAM,CAACE,UAAP,KAAsBC,SAA1B,EAAqC;AACjC,WAAOH,MAAM,CAACE,UAAd;AACH;;AACD,SAAO,CAAC,CAACD,gBAAgB,CAACG,IAAjB,CAAsB,UAAUC,CAAV,EAAa;AAAE,WAAOA,CAAC,CAACC,SAAF,KAAgBN,MAAM,CAACO,GAA9B;AAAoC,GAAzE,CAAT;AACH,CALM;AAMP,OAAO,IAAIC,eAAe,GAAG,UAAUR,MAAV,EAAkBC,gBAAlB,EAAoC;AAC7D,MAAID,MAAM,CAACE,UAAP,KAAsB,KAA1B,EAAiC;AAC7B,WAAOC,SAAP;AACH;;AACD,SAAOF,gBAAgB,CAACG,IAAjB,CAAsB,UAAUC,CAAV,EAAa;AAAE,WAAOA,CAAC,CAACC,SAAF,KAAgBN,MAAM,CAACO,GAA9B;AAAoC,GAAzE,CAAP;AACH,CALM;AAMP,OAAO,IAAIE,sBAAsB,GAAG,UAAUC,IAAV,EAAgBC,aAAhB,EAA+B;AAC/D,SAAOd,wBAAwB,CAACa,IAAD,EAAOC,aAAP,CAA/B;AACH,CAFM;AAGP,OAAO,IAAIC,4BAA4B,GAAG,UAAUC,QAAV,EAAoB;AAC1D,SAAO,UAAUC,MAAV,EAAkB;AACrB,QAAIA,MAAM,CAACC,IAAP,KAAgBnB,UAAU,CAACoB,iBAA/B,EAAkD;AAC9CH,MAAAA,QAAQ,CAAClB,eAAe,CAACmB,MAAM,CAACG,WAAR,EAAqBH,MAAM,CAACR,SAA5B,EAAuCQ,MAAM,CAACI,KAA9C,CAAhB,CAAR;AACH,KAFD,MAGK;AACDL,MAAAA,QAAQ,CAACC,MAAD,CAAR;AACH;AACJ,GAPD;AAQH,CATM;AAUP,OAAO,IAAIK,2BAA2B,GAAG,UAAUT,IAAV,EAAgBC,aAAhB,EAA+B;AACpE,SAAOA,aAAa,CAACS,MAAd,CAAqB,UAAUf,CAAV,EAAa;AAAE,WAAOA,CAAC,CAACC,SAAF,KAAgBI,IAAI,CAACJ,SAArB,IAAkCD,CAAC,CAACY,WAAF,KAAkBP,IAAI,CAACO,WAAhE;AAA8E,GAAlH,CAAP;AACH,CAFM","sourcesContent":["import { updateCellValue } from '../actionCreators';\nimport { ActionType } from '../enums';\nimport { getCopyOfArrayAndAddItem } from './ArrayUtils';\nexport var isEditableCell = function (editingMode, column, rowEditableCells) {\n    if (column.isEditable !== undefined) {\n        return column.isEditable;\n    }\n    return !!rowEditableCells.find(function (c) { return c.columnKey === column.key; });\n};\nexport var getEditableCell = function (column, rowEditableCells) {\n    if (column.isEditable === false) {\n        return undefined;\n    }\n    return rowEditableCells.find(function (c) { return c.columnKey === column.key; });\n};\nexport var addItemToEditableCells = function (item, editableCells) {\n    return getCopyOfArrayAndAddItem(item, editableCells);\n};\nexport var getCellEditorDispatchHandler = function (dispatch) {\n    return function (action) {\n        if (action.type === ActionType.UpdateEditorValue) {\n            dispatch(updateCellValue(action.rowKeyValue, action.columnKey, action.value));\n        }\n        else {\n            dispatch(action);\n        }\n    };\n};\nexport var removeItemFromEditableCells = function (item, editableCells) {\n    return editableCells.filter(function (c) { return c.columnKey !== item.columnKey || c.rowKeyValue !== item.rowKeyValue; });\n};"]},"metadata":{},"sourceType":"module"}