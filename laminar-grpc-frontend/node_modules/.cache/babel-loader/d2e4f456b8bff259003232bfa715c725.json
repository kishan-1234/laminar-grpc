{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar React = require('react');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar buildReactRelayContainer = require('./buildReactRelayContainer');\n\nvar getRootVariablesForFragments = require('./getRootVariablesForFragments');\n\nvar _require = require('./ReactRelayContainerUtils'),\n    getContainerName = _require.getContainerName;\n\nvar _require2 = require('./RelayContext'),\n    assertRelayContext = _require2.assertRelayContext;\n\nvar _require3 = require('relay-runtime'),\n    createFragmentSpecResolver = _require3.createFragmentSpecResolver,\n    getDataIDsFromObject = _require3.getDataIDsFromObject,\n    isScalarAndEqual = _require3.isScalarAndEqual;\n/**\n * Composes a React component class, returning a new class that intercepts\n * props, resolving them with the provided fragments and subscribing for\n * updates.\n */\n\n\nfunction createContainerWithFragments(Component, fragments) {\n  var _class, _temp;\n\n  var containerName = getContainerName(Component);\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    (0, _inheritsLoose2[\"default\"])(_class, _React$Component);\n\n    function _class(props) {\n      var _this;\n\n      _this = _React$Component.call(this, props) || this;\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleFragmentDataUpdate\", function () {\n        var resolverFromThisUpdate = _this.state.resolver;\n\n        _this.setState(function (updatedState) {\n          return (// If this event belongs to the current data source, update.\n            // Otherwise we should ignore it.\n            resolverFromThisUpdate === updatedState.resolver ? {\n              data: updatedState.resolver.resolve(),\n              relayProp: getRelayProp(updatedState.relayProp.environment)\n            } : null\n          );\n        });\n      });\n      var relayContext = assertRelayContext(props.__relayContext); // Do not provide a subscription/callback here.\n      // It is possible for this render to be interrupted or aborted,\n      // In which case the subscription would cause a leak.\n      // We will add the subscription in componentDidMount().\n\n      var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props);\n      _this.state = {\n        data: resolver.resolve(),\n        prevProps: props,\n        prevPropsContext: relayContext,\n        relayProp: getRelayProp(relayContext.environment),\n        resolver: resolver\n      };\n      return _this;\n    }\n    /**\n     * When new props are received, read data for the new props and subscribe\n     * for updates. Props may be the same in which case previous data and\n     * subscriptions can be reused.\n     */\n\n\n    _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      // Any props change could impact the query, so we mirror props in state.\n      // This is an unusual pattern, but necessary for this container usecase.\n      var prevProps = prevState.prevProps;\n      var relayContext = assertRelayContext(nextProps.__relayContext);\n      var prevIDs = getDataIDsFromObject(fragments, prevProps);\n      var nextIDs = getDataIDsFromObject(fragments, nextProps);\n      var resolver = prevState.resolver; // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n\n      if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevIDs, nextIDs)) {\n        // Do not provide a subscription/callback here.\n        // It is possible for this render to be interrupted or aborted,\n        // In which case the subscription would cause a leak.\n        // We will add the subscription in componentDidUpdate().\n        resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps);\n        return {\n          data: resolver.resolve(),\n          prevPropsContext: relayContext,\n          prevProps: nextProps,\n          relayProp: getRelayProp(relayContext.environment),\n          resolver: resolver\n        };\n      } else {\n        resolver.setProps(nextProps);\n        var data = resolver.resolve();\n\n        if (data !== prevState.data) {\n          return {\n            data: data,\n            prevProps: nextProps,\n            prevPropsContext: relayContext,\n            relayProp: getRelayProp(relayContext.environment)\n          };\n        }\n      }\n\n      return null;\n    };\n\n    var _proto = _class.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      this._subscribeToNewResolver();\n\n      this._rerenderIfStoreHasChanged();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      if (this.state.resolver !== prevState.resolver) {\n        prevState.resolver.dispose();\n\n        this._subscribeToNewResolver();\n      }\n\n      this._rerenderIfStoreHasChanged();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this.state.resolver.dispose();\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      // Short-circuit if any Relay-related data has changed\n      if (nextState.data !== this.state.data) {\n        return true;\n      } // Otherwise, for convenience short-circuit if all non-Relay props\n      // are scalar and equal\n\n\n      var keys = Object.keys(nextProps);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var _key = keys[ii];\n\n        if (_key === '__relayContext') {\n          if (nextState.prevPropsContext.environment !== this.state.prevPropsContext.environment) {\n            return true;\n          }\n        } else {\n          if (!fragments.hasOwnProperty(_key) && !isScalarAndEqual(nextProps[_key], this.props[_key])) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Render new data for the existing props/context.\n     */\n    ;\n\n    _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          resolver = _this$state.resolver; // External values could change between render and commit.\n      // Check for this case, even though it requires an extra store read.\n\n      var maybeNewData = resolver.resolve();\n\n      if (data !== maybeNewData) {\n        this.setState({\n          data: maybeNewData\n        });\n      }\n    };\n\n    _proto._subscribeToNewResolver = function _subscribeToNewResolver() {\n      var resolver = this.state.resolver; // Event listeners are only safe to add during the commit phase,\n      // So they won't leak if render is interrupted or errors.\n\n      resolver.setCallback(this._handleFragmentDataUpdate);\n    };\n\n    _proto.render = function render() {\n      var _this$props = this.props,\n          componentRef = _this$props.componentRef,\n          _ = _this$props.__relayContext,\n          props = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props, [\"componentRef\", \"__relayContext\"]);\n      return React.createElement(Component, _objectSpread({}, props, {}, this.state.data, {\n        ref: componentRef,\n        relay: this.state.relayProp\n      }));\n    };\n\n    return _class;\n  }(React.Component), (0, _defineProperty2[\"default\"])(_class, \"displayName\", containerName), _temp;\n}\n\nfunction getRelayProp(environment) {\n  return {\n    environment: environment\n  };\n}\n/**\n * Wrap the basic `createContainer()` function with logic to adapt to the\n * `context.relay.environment` in which it is rendered. Specifically, the\n * extraction of the environment-specific version of fragments in the\n * `fragmentSpec` is memoized once per environment, rather than once per\n * instance of the container constructed/rendered.\n */\n\n\nfunction createContainer(Component, fragmentSpec) {\n  return buildReactRelayContainer(Component, fragmentSpec, createContainerWithFragments);\n}\n\nmodule.exports = {\n  createContainer: createContainer\n};","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/react-relay/lib/ReactRelayFragmentContainer.js"],"names":["_interopRequireDefault","require","_objectWithoutPropertiesLoose2","_assertThisInitialized2","_inheritsLoose2","_defineProperty2","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","React","areEqual","buildReactRelayContainer","getRootVariablesForFragments","_require","getContainerName","_require2","assertRelayContext","_require3","createFragmentSpecResolver","getDataIDsFromObject","isScalarAndEqual","createContainerWithFragments","Component","fragments","_class","_temp","containerName","_React$Component","props","_this","call","resolverFromThisUpdate","state","resolver","setState","updatedState","data","resolve","relayProp","getRelayProp","environment","relayContext","__relayContext","prevProps","prevPropsContext","getDerivedStateFromProps","nextProps","prevState","prevIDs","nextIDs","setProps","_proto","prototype","componentDidMount","_subscribeToNewResolver","_rerenderIfStoreHasChanged","componentDidUpdate","dispose","componentWillUnmount","shouldComponentUpdate","nextState","ii","_key","hasOwnProperty","_this$state","maybeNewData","setCallback","_handleFragmentDataUpdate","render","_this$props","componentRef","_","createElement","ref","relay","createContainer","fragmentSpec","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar React = require('react');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar buildReactRelayContainer = require('./buildReactRelayContainer');\n\nvar getRootVariablesForFragments = require('./getRootVariablesForFragments');\n\nvar _require = require('./ReactRelayContainerUtils'),\n    getContainerName = _require.getContainerName;\n\nvar _require2 = require('./RelayContext'),\n    assertRelayContext = _require2.assertRelayContext;\n\nvar _require3 = require('relay-runtime'),\n    createFragmentSpecResolver = _require3.createFragmentSpecResolver,\n    getDataIDsFromObject = _require3.getDataIDsFromObject,\n    isScalarAndEqual = _require3.isScalarAndEqual;\n\n/**\n * Composes a React component class, returning a new class that intercepts\n * props, resolving them with the provided fragments and subscribing for\n * updates.\n */\nfunction createContainerWithFragments(Component, fragments) {\n  var _class, _temp;\n\n  var containerName = getContainerName(Component);\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    (0, _inheritsLoose2[\"default\"])(_class, _React$Component);\n\n    function _class(props) {\n      var _this;\n\n      _this = _React$Component.call(this, props) || this;\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleFragmentDataUpdate\", function () {\n        var resolverFromThisUpdate = _this.state.resolver;\n\n        _this.setState(function (updatedState) {\n          return (// If this event belongs to the current data source, update.\n            // Otherwise we should ignore it.\n            resolverFromThisUpdate === updatedState.resolver ? {\n              data: updatedState.resolver.resolve(),\n              relayProp: getRelayProp(updatedState.relayProp.environment)\n            } : null\n          );\n        });\n      });\n      var relayContext = assertRelayContext(props.__relayContext); // Do not provide a subscription/callback here.\n      // It is possible for this render to be interrupted or aborted,\n      // In which case the subscription would cause a leak.\n      // We will add the subscription in componentDidMount().\n\n      var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props);\n      _this.state = {\n        data: resolver.resolve(),\n        prevProps: props,\n        prevPropsContext: relayContext,\n        relayProp: getRelayProp(relayContext.environment),\n        resolver: resolver\n      };\n      return _this;\n    }\n    /**\n     * When new props are received, read data for the new props and subscribe\n     * for updates. Props may be the same in which case previous data and\n     * subscriptions can be reused.\n     */\n\n\n    _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      // Any props change could impact the query, so we mirror props in state.\n      // This is an unusual pattern, but necessary for this container usecase.\n      var prevProps = prevState.prevProps;\n      var relayContext = assertRelayContext(nextProps.__relayContext);\n      var prevIDs = getDataIDsFromObject(fragments, prevProps);\n      var nextIDs = getDataIDsFromObject(fragments, nextProps);\n      var resolver = prevState.resolver; // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n\n      if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevIDs, nextIDs)) {\n        // Do not provide a subscription/callback here.\n        // It is possible for this render to be interrupted or aborted,\n        // In which case the subscription would cause a leak.\n        // We will add the subscription in componentDidUpdate().\n        resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps);\n        return {\n          data: resolver.resolve(),\n          prevPropsContext: relayContext,\n          prevProps: nextProps,\n          relayProp: getRelayProp(relayContext.environment),\n          resolver: resolver\n        };\n      } else {\n        resolver.setProps(nextProps);\n        var data = resolver.resolve();\n\n        if (data !== prevState.data) {\n          return {\n            data: data,\n            prevProps: nextProps,\n            prevPropsContext: relayContext,\n            relayProp: getRelayProp(relayContext.environment)\n          };\n        }\n      }\n\n      return null;\n    };\n\n    var _proto = _class.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      this._subscribeToNewResolver();\n\n      this._rerenderIfStoreHasChanged();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      if (this.state.resolver !== prevState.resolver) {\n        prevState.resolver.dispose();\n\n        this._subscribeToNewResolver();\n      }\n\n      this._rerenderIfStoreHasChanged();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this.state.resolver.dispose();\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      // Short-circuit if any Relay-related data has changed\n      if (nextState.data !== this.state.data) {\n        return true;\n      } // Otherwise, for convenience short-circuit if all non-Relay props\n      // are scalar and equal\n\n\n      var keys = Object.keys(nextProps);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var _key = keys[ii];\n\n        if (_key === '__relayContext') {\n          if (nextState.prevPropsContext.environment !== this.state.prevPropsContext.environment) {\n            return true;\n          }\n        } else {\n          if (!fragments.hasOwnProperty(_key) && !isScalarAndEqual(nextProps[_key], this.props[_key])) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Render new data for the existing props/context.\n     */\n    ;\n\n    _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          resolver = _this$state.resolver; // External values could change between render and commit.\n      // Check for this case, even though it requires an extra store read.\n\n      var maybeNewData = resolver.resolve();\n\n      if (data !== maybeNewData) {\n        this.setState({\n          data: maybeNewData\n        });\n      }\n    };\n\n    _proto._subscribeToNewResolver = function _subscribeToNewResolver() {\n      var resolver = this.state.resolver; // Event listeners are only safe to add during the commit phase,\n      // So they won't leak if render is interrupted or errors.\n\n      resolver.setCallback(this._handleFragmentDataUpdate);\n    };\n\n    _proto.render = function render() {\n      var _this$props = this.props,\n          componentRef = _this$props.componentRef,\n          _ = _this$props.__relayContext,\n          props = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props, [\"componentRef\", \"__relayContext\"]);\n      return React.createElement(Component, _objectSpread({}, props, {}, this.state.data, {\n        ref: componentRef,\n        relay: this.state.relayProp\n      }));\n    };\n\n    return _class;\n  }(React.Component), (0, _defineProperty2[\"default\"])(_class, \"displayName\", containerName), _temp;\n}\n\nfunction getRelayProp(environment) {\n  return {\n    environment: environment\n  };\n}\n/**\n * Wrap the basic `createContainer()` function with logic to adapt to the\n * `context.relay.environment` in which it is rendered. Specifically, the\n * extraction of the environment-specific version of fragments in the\n * `fragmentSpec` is memoized once per environment, rather than once per\n * instance of the container constructed/rendered.\n */\n\n\nfunction createContainer(Component, fragmentSpec) {\n  return buildReactRelayContainer(Component, fragmentSpec, createContainerWithFragments);\n}\n\nmodule.exports = {\n  createContainer: createContainer\n};"]},"metadata":{},"sourceType":"script"}