{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('../util/RelayConcreteNode'),\n    LINKED_FIELD = _require.LINKED_FIELD;\n\nvar _require2 = require('./RelayStoreUtils'),\n    getHandleStorageKey = _require2.getHandleStorageKey;\n/**\n * @private\n *\n * Creates a clone of the supplied `handleField` by finding the original linked\n * field (on which the handle was declared) among the sibling `selections`, and\n * copying its selections into the clone.\n */\n\n\nfunction cloneRelayHandleSourceField(handleField, selections, variables) {\n  var sourceField = selections.find(function (source) {\n    return source.kind === LINKED_FIELD && source.name === handleField.name && source.alias === handleField.alias && areEqual(source.args, handleField.args);\n  });\n  !(sourceField && sourceField.kind === LINKED_FIELD) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'cloneRelayHandleSourceField: Expected a corresponding source field for ' + 'handle `%s`.', handleField.handle) : invariant(false) : void 0;\n  var handleKey = getHandleStorageKey(handleField, variables);\n  return {\n    kind: 'LinkedField',\n    alias: sourceField.alias,\n    name: handleKey,\n    storageKey: handleKey,\n    args: null,\n    concreteType: sourceField.concreteType,\n    plural: sourceField.plural,\n    selections: sourceField.selections\n  };\n}\n\nmodule.exports = cloneRelayHandleSourceField;","map":{"version":3,"sources":["/Users/gayatri/work/laminar-grpc/frontend/node_modules/relay-runtime/lib/store/cloneRelayHandleSourceField.js"],"names":["areEqual","require","invariant","_require","LINKED_FIELD","_require2","getHandleStorageKey","cloneRelayHandleSourceField","handleField","selections","variables","sourceField","find","source","kind","name","alias","args","process","env","NODE_ENV","handle","handleKey","storageKey","concreteType","plural","module","exports"],"mappings":"AAAA;;;;;;;;;AASA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAtB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,2BAAD,CAAtB;AAAA,IACIG,YAAY,GAAGD,QAAQ,CAACC,YAD5B;;AAGA,IAAIC,SAAS,GAAGJ,OAAO,CAAC,mBAAD,CAAvB;AAAA,IACIK,mBAAmB,GAAGD,SAAS,CAACC,mBADpC;AAGA;;;;;;;;;AAOA,SAASC,2BAAT,CAAqCC,WAArC,EAAkDC,UAAlD,EAA8DC,SAA9D,EAAyE;AACvE,MAAIC,WAAW,GAAGF,UAAU,CAACG,IAAX,CAAgB,UAAUC,MAAV,EAAkB;AAClD,WAAOA,MAAM,CAACC,IAAP,KAAgBV,YAAhB,IAAgCS,MAAM,CAACE,IAAP,KAAgBP,WAAW,CAACO,IAA5D,IAAoEF,MAAM,CAACG,KAAP,KAAiBR,WAAW,CAACQ,KAAjG,IAA0GhB,QAAQ,CAACa,MAAM,CAACI,IAAR,EAAcT,WAAW,CAACS,IAA1B,CAAzH;AACD,GAFiB,CAAlB;AAGA,IAAEN,WAAW,IAAIA,WAAW,CAACG,IAAZ,KAAqBV,YAAtC,IAAsDc,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwClB,SAAS,CAAC,KAAD,EAAQ,4EAA4E,cAApF,EAAoGM,WAAW,CAACa,MAAhH,CAAjD,GAA2KnB,SAAS,CAAC,KAAD,CAA1O,GAAoP,KAAK,CAAzP;AACA,MAAIoB,SAAS,GAAGhB,mBAAmB,CAACE,WAAD,EAAcE,SAAd,CAAnC;AACA,SAAO;AACLI,IAAAA,IAAI,EAAE,aADD;AAELE,IAAAA,KAAK,EAAEL,WAAW,CAACK,KAFd;AAGLD,IAAAA,IAAI,EAAEO,SAHD;AAILC,IAAAA,UAAU,EAAED,SAJP;AAKLL,IAAAA,IAAI,EAAE,IALD;AAMLO,IAAAA,YAAY,EAAEb,WAAW,CAACa,YANrB;AAOLC,IAAAA,MAAM,EAAEd,WAAW,CAACc,MAPf;AAQLhB,IAAAA,UAAU,EAAEE,WAAW,CAACF;AARnB,GAAP;AAUD;;AAEDiB,MAAM,CAACC,OAAP,GAAiBpB,2BAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('../util/RelayConcreteNode'),\n    LINKED_FIELD = _require.LINKED_FIELD;\n\nvar _require2 = require('./RelayStoreUtils'),\n    getHandleStorageKey = _require2.getHandleStorageKey;\n\n/**\n * @private\n *\n * Creates a clone of the supplied `handleField` by finding the original linked\n * field (on which the handle was declared) among the sibling `selections`, and\n * copying its selections into the clone.\n */\nfunction cloneRelayHandleSourceField(handleField, selections, variables) {\n  var sourceField = selections.find(function (source) {\n    return source.kind === LINKED_FIELD && source.name === handleField.name && source.alias === handleField.alias && areEqual(source.args, handleField.args);\n  });\n  !(sourceField && sourceField.kind === LINKED_FIELD) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'cloneRelayHandleSourceField: Expected a corresponding source field for ' + 'handle `%s`.', handleField.handle) : invariant(false) : void 0;\n  var handleKey = getHandleStorageKey(handleField, variables);\n  return {\n    kind: 'LinkedField',\n    alias: sourceField.alias,\n    name: handleKey,\n    storageKey: handleKey,\n    args: null,\n    concreteType: sourceField.concreteType,\n    plural: sourceField.plural,\n    selections: sourceField.selections\n  };\n}\n\nmodule.exports = cloneRelayHandleSourceField;"]},"metadata":{},"sourceType":"script"}